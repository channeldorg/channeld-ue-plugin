// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unreal_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unreal_5fcommon_2eproto CHANNELDUE_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct CHANNELDUE_API TableStruct_unreal_5fcommon_2eproto {
  static const uint32_t offsets[];
};
CHANNELDUE_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_unreal_5fcommon_2eproto;
namespace unrealpb {
class ActorComponentRef;
struct ActorComponentRefDefaultTypeInternal;
CHANNELDUE_API extern ActorComponentRefDefaultTypeInternal _ActorComponentRef_default_instance_;
class ActorComponentState;
struct ActorComponentStateDefaultTypeInternal;
CHANNELDUE_API extern ActorComponentStateDefaultTypeInternal _ActorComponentState_default_instance_;
class ActorState;
struct ActorStateDefaultTypeInternal;
CHANNELDUE_API extern ActorStateDefaultTypeInternal _ActorState_default_instance_;
class CharacterState;
struct CharacterStateDefaultTypeInternal;
CHANNELDUE_API extern CharacterStateDefaultTypeInternal _CharacterState_default_instance_;
class Character_ClientMoveResponsePacked_Params;
struct Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal _Character_ClientMoveResponsePacked_Params_default_instance_;
class Character_ServerMovePacked_Params;
struct Character_ServerMovePacked_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Character_ServerMovePacked_ParamsDefaultTypeInternal _Character_ServerMovePacked_Params_default_instance_;
class ControllerState;
struct ControllerStateDefaultTypeInternal;
CHANNELDUE_API extern ControllerStateDefaultTypeInternal _ControllerState_default_instance_;
class Controller_ClientSetLocation_Params;
struct Controller_ClientSetLocation_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Controller_ClientSetLocation_ParamsDefaultTypeInternal _Controller_ClientSetLocation_Params_default_instance_;
class Controller_ClientSetRotation_Params;
struct Controller_ClientSetRotation_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Controller_ClientSetRotation_ParamsDefaultTypeInternal _Controller_ClientSetRotation_Params_default_instance_;
class DestroyObjectMessage;
struct DestroyObjectMessageDefaultTypeInternal;
CHANNELDUE_API extern DestroyObjectMessageDefaultTypeInternal _DestroyObjectMessage_default_instance_;
class FBasedMovementInfo;
struct FBasedMovementInfoDefaultTypeInternal;
CHANNELDUE_API extern FBasedMovementInfoDefaultTypeInternal _FBasedMovementInfo_default_instance_;
class FClientAdjustment;
struct FClientAdjustmentDefaultTypeInternal;
CHANNELDUE_API extern FClientAdjustmentDefaultTypeInternal _FClientAdjustment_default_instance_;
class FRepAttachment;
struct FRepAttachmentDefaultTypeInternal;
CHANNELDUE_API extern FRepAttachmentDefaultTypeInternal _FRepAttachment_default_instance_;
class FRepMovement;
struct FRepMovementDefaultTypeInternal;
CHANNELDUE_API extern FRepMovementDefaultTypeInternal _FRepMovement_default_instance_;
class FRepRootMotionMontage;
struct FRepRootMotionMontageDefaultTypeInternal;
CHANNELDUE_API extern FRepRootMotionMontageDefaultTypeInternal _FRepRootMotionMontage_default_instance_;
class FRootMotionSource;
struct FRootMotionSourceDefaultTypeInternal;
CHANNELDUE_API extern FRootMotionSourceDefaultTypeInternal _FRootMotionSource_default_instance_;
class FRootMotionSourceGroup;
struct FRootMotionSourceGroupDefaultTypeInternal;
CHANNELDUE_API extern FRootMotionSourceGroupDefaultTypeInternal _FRootMotionSourceGroup_default_instance_;
class FRootMotionSource_FRootMotionFinishVelocitySettings;
struct FRootMotionSource_FRootMotionFinishVelocitySettingsDefaultTypeInternal;
CHANNELDUE_API extern FRootMotionSource_FRootMotionFinishVelocitySettingsDefaultTypeInternal _FRootMotionSource_FRootMotionFinishVelocitySettings_default_instance_;
class FVector;
struct FVectorDefaultTypeInternal;
CHANNELDUE_API extern FVectorDefaultTypeInternal _FVector_default_instance_;
class GameStateBase;
struct GameStateBaseDefaultTypeInternal;
CHANNELDUE_API extern GameStateBaseDefaultTypeInternal _GameStateBase_default_instance_;
class GetHandoverContextMessage;
struct GetHandoverContextMessageDefaultTypeInternal;
CHANNELDUE_API extern GetHandoverContextMessageDefaultTypeInternal _GetHandoverContextMessage_default_instance_;
class GetHandoverContextResultMessage;
struct GetHandoverContextResultMessageDefaultTypeInternal;
CHANNELDUE_API extern GetHandoverContextResultMessageDefaultTypeInternal _GetHandoverContextResultMessage_default_instance_;
class GetUnrealObjectRefMessage;
struct GetUnrealObjectRefMessageDefaultTypeInternal;
CHANNELDUE_API extern GetUnrealObjectRefMessageDefaultTypeInternal _GetUnrealObjectRefMessage_default_instance_;
class GetUnrealObjectRefResultMessage;
struct GetUnrealObjectRefResultMessageDefaultTypeInternal;
CHANNELDUE_API extern GetUnrealObjectRefResultMessageDefaultTypeInternal _GetUnrealObjectRefResultMessage_default_instance_;
class HandoverContext;
struct HandoverContextDefaultTypeInternal;
CHANNELDUE_API extern HandoverContextDefaultTypeInternal _HandoverContext_default_instance_;
class HandoverData;
struct HandoverDataDefaultTypeInternal;
CHANNELDUE_API extern HandoverDataDefaultTypeInternal _HandoverData_default_instance_;
class PawnState;
struct PawnStateDefaultTypeInternal;
CHANNELDUE_API extern PawnStateDefaultTypeInternal _PawnState_default_instance_;
class PlayerControllerState;
struct PlayerControllerStateDefaultTypeInternal;
CHANNELDUE_API extern PlayerControllerStateDefaultTypeInternal _PlayerControllerState_default_instance_;
class PlayerController_ClientCapBandwidth_Params;
struct PlayerController_ClientCapBandwidth_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientCapBandwidth_ParamsDefaultTypeInternal _PlayerController_ClientCapBandwidth_Params_default_instance_;
class PlayerController_ClientEnableNetworkVoice_Params;
struct PlayerController_ClientEnableNetworkVoice_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientEnableNetworkVoice_ParamsDefaultTypeInternal _PlayerController_ClientEnableNetworkVoice_Params_default_instance_;
class PlayerController_ClientGotoState_Params;
struct PlayerController_ClientGotoState_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientGotoState_ParamsDefaultTypeInternal _PlayerController_ClientGotoState_Params_default_instance_;
class PlayerController_ClientReceiveLocalizedMessage_Params;
struct PlayerController_ClientReceiveLocalizedMessage_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientReceiveLocalizedMessage_ParamsDefaultTypeInternal _PlayerController_ClientReceiveLocalizedMessage_Params_default_instance_;
class PlayerController_ClientRestart_Params;
struct PlayerController_ClientRestart_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientRestart_ParamsDefaultTypeInternal _PlayerController_ClientRestart_Params_default_instance_;
class PlayerController_ClientRetryClientRestart_Params;
struct PlayerController_ClientRetryClientRestart_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientRetryClientRestart_ParamsDefaultTypeInternal _PlayerController_ClientRetryClientRestart_Params_default_instance_;
class PlayerController_ClientSetCameraMode_Params;
struct PlayerController_ClientSetCameraMode_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientSetCameraMode_ParamsDefaultTypeInternal _PlayerController_ClientSetCameraMode_Params_default_instance_;
class PlayerController_ClientSetHUD_Params;
struct PlayerController_ClientSetHUD_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientSetHUD_ParamsDefaultTypeInternal _PlayerController_ClientSetHUD_Params_default_instance_;
class PlayerController_ClientSetViewTarget_Params;
struct PlayerController_ClientSetViewTarget_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientSetViewTarget_ParamsDefaultTypeInternal _PlayerController_ClientSetViewTarget_Params_default_instance_;
class PlayerController_ServerAcknowledgePossession_Params;
struct PlayerController_ServerAcknowledgePossession_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ServerAcknowledgePossession_ParamsDefaultTypeInternal _PlayerController_ServerAcknowledgePossession_Params_default_instance_;
class PlayerController_ServerSetSpectatorLocation_Params;
struct PlayerController_ServerSetSpectatorLocation_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ServerSetSpectatorLocation_ParamsDefaultTypeInternal _PlayerController_ServerSetSpectatorLocation_Params_default_instance_;
class PlayerController_ServerUpdateCamera_Params;
struct PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal _PlayerController_ServerUpdateCamera_Params_default_instance_;
class PlayerState;
struct PlayerStateDefaultTypeInternal;
CHANNELDUE_API extern PlayerStateDefaultTypeInternal _PlayerState_default_instance_;
class RemoteFunctionMessage;
struct RemoteFunctionMessageDefaultTypeInternal;
CHANNELDUE_API extern RemoteFunctionMessageDefaultTypeInternal _RemoteFunctionMessage_default_instance_;
class SceneComponentState;
struct SceneComponentStateDefaultTypeInternal;
CHANNELDUE_API extern SceneComponentStateDefaultTypeInternal _SceneComponentState_default_instance_;
class SpatialChannelData;
struct SpatialChannelDataDefaultTypeInternal;
CHANNELDUE_API extern SpatialChannelDataDefaultTypeInternal _SpatialChannelData_default_instance_;
class SpatialChannelData_EntitiesEntry_DoNotUse;
struct SpatialChannelData_EntitiesEntry_DoNotUseDefaultTypeInternal;
CHANNELDUE_API extern SpatialChannelData_EntitiesEntry_DoNotUseDefaultTypeInternal _SpatialChannelData_EntitiesEntry_DoNotUse_default_instance_;
class SpatialEntityState;
struct SpatialEntityStateDefaultTypeInternal;
CHANNELDUE_API extern SpatialEntityStateDefaultTypeInternal _SpatialEntityState_default_instance_;
class SpawnObjectMessage;
struct SpawnObjectMessageDefaultTypeInternal;
CHANNELDUE_API extern SpawnObjectMessageDefaultTypeInternal _SpawnObjectMessage_default_instance_;
class SyncNetIdMessage;
struct SyncNetIdMessageDefaultTypeInternal;
CHANNELDUE_API extern SyncNetIdMessageDefaultTypeInternal _SyncNetIdMessage_default_instance_;
class SyncNetIdMessage_NetIdPath;
struct SyncNetIdMessage_NetIdPathDefaultTypeInternal;
CHANNELDUE_API extern SyncNetIdMessage_NetIdPathDefaultTypeInternal _SyncNetIdMessage_NetIdPath_default_instance_;
class UnrealObjectRef;
struct UnrealObjectRefDefaultTypeInternal;
CHANNELDUE_API extern UnrealObjectRefDefaultTypeInternal _UnrealObjectRef_default_instance_;
class UnrealObjectRef_GuidCachedObject;
struct UnrealObjectRef_GuidCachedObjectDefaultTypeInternal;
CHANNELDUE_API extern UnrealObjectRef_GuidCachedObjectDefaultTypeInternal _UnrealObjectRef_GuidCachedObject_default_instance_;
}  // namespace unrealpb
PROTOBUF_NAMESPACE_OPEN
template<> CHANNELDUE_API ::unrealpb::ActorComponentRef* Arena::CreateMaybeMessage<::unrealpb::ActorComponentRef>(Arena*);
template<> CHANNELDUE_API ::unrealpb::ActorComponentState* Arena::CreateMaybeMessage<::unrealpb::ActorComponentState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::ActorState* Arena::CreateMaybeMessage<::unrealpb::ActorState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::CharacterState* Arena::CreateMaybeMessage<::unrealpb::CharacterState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Character_ClientMoveResponsePacked_Params* Arena::CreateMaybeMessage<::unrealpb::Character_ClientMoveResponsePacked_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Character_ServerMovePacked_Params* Arena::CreateMaybeMessage<::unrealpb::Character_ServerMovePacked_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::ControllerState* Arena::CreateMaybeMessage<::unrealpb::ControllerState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Controller_ClientSetLocation_Params* Arena::CreateMaybeMessage<::unrealpb::Controller_ClientSetLocation_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Controller_ClientSetRotation_Params* Arena::CreateMaybeMessage<::unrealpb::Controller_ClientSetRotation_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::DestroyObjectMessage* Arena::CreateMaybeMessage<::unrealpb::DestroyObjectMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FBasedMovementInfo* Arena::CreateMaybeMessage<::unrealpb::FBasedMovementInfo>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FClientAdjustment* Arena::CreateMaybeMessage<::unrealpb::FClientAdjustment>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FRepAttachment* Arena::CreateMaybeMessage<::unrealpb::FRepAttachment>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FRepMovement* Arena::CreateMaybeMessage<::unrealpb::FRepMovement>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FRepRootMotionMontage* Arena::CreateMaybeMessage<::unrealpb::FRepRootMotionMontage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FRootMotionSource* Arena::CreateMaybeMessage<::unrealpb::FRootMotionSource>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FRootMotionSourceGroup* Arena::CreateMaybeMessage<::unrealpb::FRootMotionSourceGroup>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* Arena::CreateMaybeMessage<::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FVector* Arena::CreateMaybeMessage<::unrealpb::FVector>(Arena*);
template<> CHANNELDUE_API ::unrealpb::GameStateBase* Arena::CreateMaybeMessage<::unrealpb::GameStateBase>(Arena*);
template<> CHANNELDUE_API ::unrealpb::GetHandoverContextMessage* Arena::CreateMaybeMessage<::unrealpb::GetHandoverContextMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::GetHandoverContextResultMessage* Arena::CreateMaybeMessage<::unrealpb::GetHandoverContextResultMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::GetUnrealObjectRefMessage* Arena::CreateMaybeMessage<::unrealpb::GetUnrealObjectRefMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::GetUnrealObjectRefResultMessage* Arena::CreateMaybeMessage<::unrealpb::GetUnrealObjectRefResultMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::HandoverContext* Arena::CreateMaybeMessage<::unrealpb::HandoverContext>(Arena*);
template<> CHANNELDUE_API ::unrealpb::HandoverData* Arena::CreateMaybeMessage<::unrealpb::HandoverData>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PawnState* Arena::CreateMaybeMessage<::unrealpb::PawnState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerControllerState* Arena::CreateMaybeMessage<::unrealpb::PlayerControllerState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientCapBandwidth_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientCapBandwidth_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientEnableNetworkVoice_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientEnableNetworkVoice_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientGotoState_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientGotoState_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientReceiveLocalizedMessage_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientReceiveLocalizedMessage_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientRestart_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientRestart_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientRetryClientRestart_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientRetryClientRestart_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientSetCameraMode_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientSetCameraMode_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientSetHUD_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientSetHUD_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientSetViewTarget_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientSetViewTarget_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ServerAcknowledgePossession_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ServerAcknowledgePossession_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ServerSetSpectatorLocation_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ServerSetSpectatorLocation_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ServerUpdateCamera_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ServerUpdateCamera_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerState* Arena::CreateMaybeMessage<::unrealpb::PlayerState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::RemoteFunctionMessage* Arena::CreateMaybeMessage<::unrealpb::RemoteFunctionMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::SceneComponentState* Arena::CreateMaybeMessage<::unrealpb::SceneComponentState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::SpatialChannelData* Arena::CreateMaybeMessage<::unrealpb::SpatialChannelData>(Arena*);
template<> CHANNELDUE_API ::unrealpb::SpatialChannelData_EntitiesEntry_DoNotUse* Arena::CreateMaybeMessage<::unrealpb::SpatialChannelData_EntitiesEntry_DoNotUse>(Arena*);
template<> CHANNELDUE_API ::unrealpb::SpatialEntityState* Arena::CreateMaybeMessage<::unrealpb::SpatialEntityState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::SpawnObjectMessage* Arena::CreateMaybeMessage<::unrealpb::SpawnObjectMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::SyncNetIdMessage* Arena::CreateMaybeMessage<::unrealpb::SyncNetIdMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::SyncNetIdMessage_NetIdPath* Arena::CreateMaybeMessage<::unrealpb::SyncNetIdMessage_NetIdPath>(Arena*);
template<> CHANNELDUE_API ::unrealpb::UnrealObjectRef* Arena::CreateMaybeMessage<::unrealpb::UnrealObjectRef>(Arena*);
template<> CHANNELDUE_API ::unrealpb::UnrealObjectRef_GuidCachedObject* Arena::CreateMaybeMessage<::unrealpb::UnrealObjectRef_GuidCachedObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace unrealpb {

enum MessageType : int {
  INVALID = 0,
  LOW_LEVEL = 100,
  ANY = 101,
  RPC = 102,
  SPAWN = 103,
  DESTROY = 104,
  HANDOVER_CONTEXT = 105,
  GET_UNREAL_OBJECT_REF = 106,
  SYNC_NET_ID = 107,
  SERVER_PLAYER_SPAWNED = 201,
  SERVER_PLAYER_LEAVE = 202,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
CHANNELDUE_API bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = INVALID;
constexpr MessageType MessageType_MAX = SERVER_PLAYER_LEAVE;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

CHANNELDUE_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum UnrealObjectType : int {
  UOT_Unknown = 0,
  UOT_GameState = 1,
  UOT_Actor = 2,
  UOT_Pawn = 3,
  UOT_Character = 4,
  UOT_PlayerState = 5,
  UOT_Controller = 6,
  UOT_PlayerController = 7,
  UnrealObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UnrealObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
CHANNELDUE_API bool UnrealObjectType_IsValid(int value);
constexpr UnrealObjectType UnrealObjectType_MIN = UOT_Unknown;
constexpr UnrealObjectType UnrealObjectType_MAX = UOT_PlayerController;
constexpr int UnrealObjectType_ARRAYSIZE = UnrealObjectType_MAX + 1;

CHANNELDUE_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnrealObjectType_descriptor();
template<typename T>
inline const std::string& UnrealObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UnrealObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UnrealObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UnrealObjectType_descriptor(), enum_t_value);
}
inline bool UnrealObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UnrealObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UnrealObjectType>(
    UnrealObjectType_descriptor(), name, value);
}
// ===================================================================

class CHANNELDUE_API FVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FVector) */ {
 public:
  inline FVector() : FVector(nullptr) {}
  ~FVector() override;
  explicit PROTOBUF_CONSTEXPR FVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FVector(const FVector& from);
  FVector(FVector&& from) noexcept
    : FVector() {
    *this = ::std::move(from);
  }

  inline FVector& operator=(const FVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline FVector& operator=(FVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const FVector* internal_default_instance() {
    return reinterpret_cast<const FVector*>(
               &_FVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FVector& a, FVector& b) {
    a.Swap(&b);
  }
  inline void Swap(FVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FVector& from) {
    FVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FVector";
  }
  protected:
  explicit FVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API UnrealObjectRef_GuidCachedObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.UnrealObjectRef.GuidCachedObject) */ {
 public:
  inline UnrealObjectRef_GuidCachedObject() : UnrealObjectRef_GuidCachedObject(nullptr) {}
  ~UnrealObjectRef_GuidCachedObject() override;
  explicit PROTOBUF_CONSTEXPR UnrealObjectRef_GuidCachedObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnrealObjectRef_GuidCachedObject(const UnrealObjectRef_GuidCachedObject& from);
  UnrealObjectRef_GuidCachedObject(UnrealObjectRef_GuidCachedObject&& from) noexcept
    : UnrealObjectRef_GuidCachedObject() {
    *this = ::std::move(from);
  }

  inline UnrealObjectRef_GuidCachedObject& operator=(const UnrealObjectRef_GuidCachedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnrealObjectRef_GuidCachedObject& operator=(UnrealObjectRef_GuidCachedObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnrealObjectRef_GuidCachedObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnrealObjectRef_GuidCachedObject* internal_default_instance() {
    return reinterpret_cast<const UnrealObjectRef_GuidCachedObject*>(
               &_UnrealObjectRef_GuidCachedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnrealObjectRef_GuidCachedObject& a, UnrealObjectRef_GuidCachedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(UnrealObjectRef_GuidCachedObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnrealObjectRef_GuidCachedObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnrealObjectRef_GuidCachedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnrealObjectRef_GuidCachedObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnrealObjectRef_GuidCachedObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnrealObjectRef_GuidCachedObject& from) {
    UnrealObjectRef_GuidCachedObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnrealObjectRef_GuidCachedObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.UnrealObjectRef.GuidCachedObject";
  }
  protected:
  explicit UnrealObjectRef_GuidCachedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathNameFieldNumber = 2,
    kNetGUIDFieldNumber = 1,
    kOuterGUIDFieldNumber = 3,
  };
  // string pathName = 2;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // uint32 netGUID = 1;
  void clear_netguid();
  uint32_t netguid() const;
  void set_netguid(uint32_t value);
  private:
  uint32_t _internal_netguid() const;
  void _internal_set_netguid(uint32_t value);
  public:

  // uint32 outerGUID = 3;
  void clear_outerguid();
  uint32_t outerguid() const;
  void set_outerguid(uint32_t value);
  private:
  uint32_t _internal_outerguid() const;
  void _internal_set_outerguid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.UnrealObjectRef.GuidCachedObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    uint32_t netguid_;
    uint32_t outerguid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API UnrealObjectRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.UnrealObjectRef) */ {
 public:
  inline UnrealObjectRef() : UnrealObjectRef(nullptr) {}
  ~UnrealObjectRef() override;
  explicit PROTOBUF_CONSTEXPR UnrealObjectRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnrealObjectRef(const UnrealObjectRef& from);
  UnrealObjectRef(UnrealObjectRef&& from) noexcept
    : UnrealObjectRef() {
    *this = ::std::move(from);
  }

  inline UnrealObjectRef& operator=(const UnrealObjectRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnrealObjectRef& operator=(UnrealObjectRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnrealObjectRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnrealObjectRef* internal_default_instance() {
    return reinterpret_cast<const UnrealObjectRef*>(
               &_UnrealObjectRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnrealObjectRef& a, UnrealObjectRef& b) {
    a.Swap(&b);
  }
  inline void Swap(UnrealObjectRef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnrealObjectRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnrealObjectRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnrealObjectRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnrealObjectRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnrealObjectRef& from) {
    UnrealObjectRef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnrealObjectRef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.UnrealObjectRef";
  }
  protected:
  explicit UnrealObjectRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UnrealObjectRef_GuidCachedObject GuidCachedObject;

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 2,
    kNetGUIDBunchFieldNumber = 3,
    kClassPathFieldNumber = 6,
    kNetGUIDFieldNumber = 1,
    kBunchBitsNumFieldNumber = 4,
    kOwningConnIdFieldNumber = 7,
  };
  // repeated .unrealpb.UnrealObjectRef.GuidCachedObject context = 2;
  int context_size() const;
  private:
  int _internal_context_size() const;
  public:
  void clear_context();
  ::unrealpb::UnrealObjectRef_GuidCachedObject* mutable_context(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject >*
      mutable_context();
  private:
  const ::unrealpb::UnrealObjectRef_GuidCachedObject& _internal_context(int index) const;
  ::unrealpb::UnrealObjectRef_GuidCachedObject* _internal_add_context();
  public:
  const ::unrealpb::UnrealObjectRef_GuidCachedObject& context(int index) const;
  ::unrealpb::UnrealObjectRef_GuidCachedObject* add_context();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject >&
      context() const;

  // optional bytes netGUIDBunch = 3;
  bool has_netguidbunch() const;
  private:
  bool _internal_has_netguidbunch() const;
  public:
  void clear_netguidbunch();
  const std::string& netguidbunch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_netguidbunch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_netguidbunch();
  PROTOBUF_NODISCARD std::string* release_netguidbunch();
  void set_allocated_netguidbunch(std::string* netguidbunch);
  private:
  const std::string& _internal_netguidbunch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_netguidbunch(const std::string& value);
  std::string* _internal_mutable_netguidbunch();
  public:

  // optional string classPath = 6;
  bool has_classpath() const;
  private:
  bool _internal_has_classpath() const;
  public:
  void clear_classpath();
  const std::string& classpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_classpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_classpath();
  PROTOBUF_NODISCARD std::string* release_classpath();
  void set_allocated_classpath(std::string* classpath);
  private:
  const std::string& _internal_classpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_classpath(const std::string& value);
  std::string* _internal_mutable_classpath();
  public:

  // optional uint32 netGUID = 1;
  bool has_netguid() const;
  private:
  bool _internal_has_netguid() const;
  public:
  void clear_netguid();
  uint32_t netguid() const;
  void set_netguid(uint32_t value);
  private:
  uint32_t _internal_netguid() const;
  void _internal_set_netguid(uint32_t value);
  public:

  // optional uint32 bunchBitsNum = 4;
  bool has_bunchbitsnum() const;
  private:
  bool _internal_has_bunchbitsnum() const;
  public:
  void clear_bunchbitsnum();
  uint32_t bunchbitsnum() const;
  void set_bunchbitsnum(uint32_t value);
  private:
  uint32_t _internal_bunchbitsnum() const;
  void _internal_set_bunchbitsnum(uint32_t value);
  public:

  // optional uint32 owningConnId = 7;
  bool has_owningconnid() const;
  private:
  bool _internal_has_owningconnid() const;
  public:
  void clear_owningconnid();
  uint32_t owningconnid() const;
  void set_owningconnid(uint32_t value);
  private:
  uint32_t _internal_owningconnid() const;
  void _internal_set_owningconnid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.UnrealObjectRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject > context_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr netguidbunch_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classpath_;
    uint32_t netguid_;
    uint32_t bunchbitsnum_;
    uint32_t owningconnid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ActorComponentRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.ActorComponentRef) */ {
 public:
  inline ActorComponentRef() : ActorComponentRef(nullptr) {}
  ~ActorComponentRef() override;
  explicit PROTOBUF_CONSTEXPR ActorComponentRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorComponentRef(const ActorComponentRef& from);
  ActorComponentRef(ActorComponentRef&& from) noexcept
    : ActorComponentRef() {
    *this = ::std::move(from);
  }

  inline ActorComponentRef& operator=(const ActorComponentRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorComponentRef& operator=(ActorComponentRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorComponentRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorComponentRef* internal_default_instance() {
    return reinterpret_cast<const ActorComponentRef*>(
               &_ActorComponentRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActorComponentRef& a, ActorComponentRef& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorComponentRef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorComponentRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorComponentRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorComponentRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorComponentRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorComponentRef& from) {
    ActorComponentRef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorComponentRef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.ActorComponentRef";
  }
  protected:
  explicit ActorComponentRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompNameFieldNumber = 2,
    kOwnerFieldNumber = 1,
  };
  // optional string compName = 2;
  bool has_compname() const;
  private:
  bool _internal_has_compname() const;
  public:
  void clear_compname();
  const std::string& compname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compname();
  PROTOBUF_NODISCARD std::string* release_compname();
  void set_allocated_compname(std::string* compname);
  private:
  const std::string& _internal_compname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compname(const std::string& value);
  std::string* _internal_mutable_compname();
  public:

  // optional .unrealpb.UnrealObjectRef owner = 1;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::unrealpb::UnrealObjectRef& owner() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_owner();
  ::unrealpb::UnrealObjectRef* mutable_owner();
  void set_allocated_owner(::unrealpb::UnrealObjectRef* owner);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_owner() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::unrealpb::UnrealObjectRef* owner);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_owner();

  // @@protoc_insertion_point(class_scope:unrealpb.ActorComponentRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compname_;
    ::unrealpb::UnrealObjectRef* owner_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API RemoteFunctionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.RemoteFunctionMessage) */ {
 public:
  inline RemoteFunctionMessage() : RemoteFunctionMessage(nullptr) {}
  ~RemoteFunctionMessage() override;
  explicit PROTOBUF_CONSTEXPR RemoteFunctionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteFunctionMessage(const RemoteFunctionMessage& from);
  RemoteFunctionMessage(RemoteFunctionMessage&& from) noexcept
    : RemoteFunctionMessage() {
    *this = ::std::move(from);
  }

  inline RemoteFunctionMessage& operator=(const RemoteFunctionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteFunctionMessage& operator=(RemoteFunctionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteFunctionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteFunctionMessage* internal_default_instance() {
    return reinterpret_cast<const RemoteFunctionMessage*>(
               &_RemoteFunctionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RemoteFunctionMessage& a, RemoteFunctionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteFunctionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteFunctionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteFunctionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteFunctionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteFunctionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteFunctionMessage& from) {
    RemoteFunctionMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteFunctionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.RemoteFunctionMessage";
  }
  protected:
  explicit RemoteFunctionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 2,
    kParamsPayloadFieldNumber = 3,
    kTargetObjFieldNumber = 1,
    kRedirectionCounterFieldNumber = 4,
  };
  // string functionName = 2;
  void clear_functionname();
  const std::string& functionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_functionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_functionname();
  PROTOBUF_NODISCARD std::string* release_functionname();
  void set_allocated_functionname(std::string* functionname);
  private:
  const std::string& _internal_functionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_functionname(const std::string& value);
  std::string* _internal_mutable_functionname();
  public:

  // bytes paramsPayload = 3;
  void clear_paramspayload();
  const std::string& paramspayload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paramspayload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paramspayload();
  PROTOBUF_NODISCARD std::string* release_paramspayload();
  void set_allocated_paramspayload(std::string* paramspayload);
  private:
  const std::string& _internal_paramspayload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paramspayload(const std::string& value);
  std::string* _internal_mutable_paramspayload();
  public:

  // .unrealpb.UnrealObjectRef targetObj = 1;
  bool has_targetobj() const;
  private:
  bool _internal_has_targetobj() const;
  public:
  void clear_targetobj();
  const ::unrealpb::UnrealObjectRef& targetobj() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_targetobj();
  ::unrealpb::UnrealObjectRef* mutable_targetobj();
  void set_allocated_targetobj(::unrealpb::UnrealObjectRef* targetobj);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_targetobj() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_targetobj();
  public:
  void unsafe_arena_set_allocated_targetobj(
      ::unrealpb::UnrealObjectRef* targetobj);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_targetobj();

  // int32 redirectionCounter = 4;
  void clear_redirectioncounter();
  int32_t redirectioncounter() const;
  void set_redirectioncounter(int32_t value);
  private:
  int32_t _internal_redirectioncounter() const;
  void _internal_set_redirectioncounter(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.RemoteFunctionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramspayload_;
    ::unrealpb::UnrealObjectRef* targetobj_;
    int32_t redirectioncounter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpawnObjectMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.SpawnObjectMessage) */ {
 public:
  inline SpawnObjectMessage() : SpawnObjectMessage(nullptr) {}
  ~SpawnObjectMessage() override;
  explicit PROTOBUF_CONSTEXPR SpawnObjectMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnObjectMessage(const SpawnObjectMessage& from);
  SpawnObjectMessage(SpawnObjectMessage&& from) noexcept
    : SpawnObjectMessage() {
    *this = ::std::move(from);
  }

  inline SpawnObjectMessage& operator=(const SpawnObjectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnObjectMessage& operator=(SpawnObjectMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnObjectMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnObjectMessage* internal_default_instance() {
    return reinterpret_cast<const SpawnObjectMessage*>(
               &_SpawnObjectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SpawnObjectMessage& a, SpawnObjectMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnObjectMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnObjectMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnObjectMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnObjectMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawnObjectMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawnObjectMessage& from) {
    SpawnObjectMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnObjectMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.SpawnObjectMessage";
  }
  protected:
  explicit SpawnObjectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
    kLocationFieldNumber = 5,
    kChannelIdFieldNumber = 2,
    kLocalRoleFieldNumber = 3,
  };
  // .unrealpb.UnrealObjectRef obj = 1;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::unrealpb::UnrealObjectRef& obj() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_obj();
  ::unrealpb::UnrealObjectRef* mutable_obj();
  void set_allocated_obj(::unrealpb::UnrealObjectRef* obj);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_obj() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_obj();
  public:
  void unsafe_arena_set_allocated_obj(
      ::unrealpb::UnrealObjectRef* obj);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_obj();

  // optional .unrealpb.FVector location = 5;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::unrealpb::FVector& location() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_location();
  ::unrealpb::FVector* mutable_location();
  void set_allocated_location(::unrealpb::FVector* location);
  private:
  const ::unrealpb::FVector& _internal_location() const;
  ::unrealpb::FVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::unrealpb::FVector* location);
  ::unrealpb::FVector* unsafe_arena_release_location();

  // optional uint32 channelId = 2;
  bool has_channelid() const;
  private:
  bool _internal_has_channelid() const;
  public:
  void clear_channelid();
  uint32_t channelid() const;
  void set_channelid(uint32_t value);
  private:
  uint32_t _internal_channelid() const;
  void _internal_set_channelid(uint32_t value);
  public:

  // optional uint32 localRole = 3;
  bool has_localrole() const;
  private:
  bool _internal_has_localrole() const;
  public:
  void clear_localrole();
  uint32_t localrole() const;
  void set_localrole(uint32_t value);
  private:
  uint32_t _internal_localrole() const;
  void _internal_set_localrole(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.SpawnObjectMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::UnrealObjectRef* obj_;
    ::unrealpb::FVector* location_;
    uint32_t channelid_;
    uint32_t localrole_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API DestroyObjectMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.DestroyObjectMessage) */ {
 public:
  inline DestroyObjectMessage() : DestroyObjectMessage(nullptr) {}
  ~DestroyObjectMessage() override;
  explicit PROTOBUF_CONSTEXPR DestroyObjectMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestroyObjectMessage(const DestroyObjectMessage& from);
  DestroyObjectMessage(DestroyObjectMessage&& from) noexcept
    : DestroyObjectMessage() {
    *this = ::std::move(from);
  }

  inline DestroyObjectMessage& operator=(const DestroyObjectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyObjectMessage& operator=(DestroyObjectMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestroyObjectMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyObjectMessage* internal_default_instance() {
    return reinterpret_cast<const DestroyObjectMessage*>(
               &_DestroyObjectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DestroyObjectMessage& a, DestroyObjectMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyObjectMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyObjectMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyObjectMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyObjectMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DestroyObjectMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DestroyObjectMessage& from) {
    DestroyObjectMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyObjectMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.DestroyObjectMessage";
  }
  protected:
  explicit DestroyObjectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // uint32 netId = 1;
  void clear_netid();
  uint32_t netid() const;
  void set_netid(uint32_t value);
  private:
  uint32_t _internal_netid() const;
  void _internal_set_netid(uint32_t value);
  public:

  // uint32 reason = 2;
  void clear_reason();
  uint32_t reason() const;
  void set_reason(uint32_t value);
  private:
  uint32_t _internal_reason() const;
  void _internal_set_reason(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.DestroyObjectMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t netid_;
    uint32_t reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API HandoverContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.HandoverContext) */ {
 public:
  inline HandoverContext() : HandoverContext(nullptr) {}
  ~HandoverContext() override;
  explicit PROTOBUF_CONSTEXPR HandoverContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandoverContext(const HandoverContext& from);
  HandoverContext(HandoverContext&& from) noexcept
    : HandoverContext() {
    *this = ::std::move(from);
  }

  inline HandoverContext& operator=(const HandoverContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandoverContext& operator=(HandoverContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandoverContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandoverContext* internal_default_instance() {
    return reinterpret_cast<const HandoverContext*>(
               &_HandoverContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HandoverContext& a, HandoverContext& b) {
    a.Swap(&b);
  }
  inline void Swap(HandoverContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandoverContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandoverContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandoverContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandoverContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandoverContext& from) {
    HandoverContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandoverContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.HandoverContext";
  }
  protected:
  explicit HandoverContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
    kClientConnIdFieldNumber = 2,
  };
  // .unrealpb.UnrealObjectRef obj = 1;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::unrealpb::UnrealObjectRef& obj() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_obj();
  ::unrealpb::UnrealObjectRef* mutable_obj();
  void set_allocated_obj(::unrealpb::UnrealObjectRef* obj);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_obj() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_obj();
  public:
  void unsafe_arena_set_allocated_obj(
      ::unrealpb::UnrealObjectRef* obj);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_obj();

  // optional uint32 clientConnId = 2;
  bool has_clientconnid() const;
  private:
  bool _internal_has_clientconnid() const;
  public:
  void clear_clientconnid();
  uint32_t clientconnid() const;
  void set_clientconnid(uint32_t value);
  private:
  uint32_t _internal_clientconnid() const;
  void _internal_set_clientconnid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.HandoverContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::UnrealObjectRef* obj_;
    uint32_t clientconnid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API GetHandoverContextMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.GetHandoverContextMessage) */ {
 public:
  inline GetHandoverContextMessage() : GetHandoverContextMessage(nullptr) {}
  ~GetHandoverContextMessage() override;
  explicit PROTOBUF_CONSTEXPR GetHandoverContextMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHandoverContextMessage(const GetHandoverContextMessage& from);
  GetHandoverContextMessage(GetHandoverContextMessage&& from) noexcept
    : GetHandoverContextMessage() {
    *this = ::std::move(from);
  }

  inline GetHandoverContextMessage& operator=(const GetHandoverContextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHandoverContextMessage& operator=(GetHandoverContextMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHandoverContextMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHandoverContextMessage* internal_default_instance() {
    return reinterpret_cast<const GetHandoverContextMessage*>(
               &_GetHandoverContextMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetHandoverContextMessage& a, GetHandoverContextMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHandoverContextMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHandoverContextMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHandoverContextMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHandoverContextMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHandoverContextMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetHandoverContextMessage& from) {
    GetHandoverContextMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHandoverContextMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.GetHandoverContextMessage";
  }
  protected:
  explicit GetHandoverContextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetIdFieldNumber = 1,
    kSrcChannelIdFieldNumber = 2,
    kDstChannelIdFieldNumber = 3,
  };
  // uint32 netId = 1;
  void clear_netid();
  uint32_t netid() const;
  void set_netid(uint32_t value);
  private:
  uint32_t _internal_netid() const;
  void _internal_set_netid(uint32_t value);
  public:

  // uint32 srcChannelId = 2;
  void clear_srcchannelid();
  uint32_t srcchannelid() const;
  void set_srcchannelid(uint32_t value);
  private:
  uint32_t _internal_srcchannelid() const;
  void _internal_set_srcchannelid(uint32_t value);
  public:

  // uint32 dstChannelId = 3;
  void clear_dstchannelid();
  uint32_t dstchannelid() const;
  void set_dstchannelid(uint32_t value);
  private:
  uint32_t _internal_dstchannelid() const;
  void _internal_set_dstchannelid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.GetHandoverContextMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t netid_;
    uint32_t srcchannelid_;
    uint32_t dstchannelid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API GetHandoverContextResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.GetHandoverContextResultMessage) */ {
 public:
  inline GetHandoverContextResultMessage() : GetHandoverContextResultMessage(nullptr) {}
  ~GetHandoverContextResultMessage() override;
  explicit PROTOBUF_CONSTEXPR GetHandoverContextResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHandoverContextResultMessage(const GetHandoverContextResultMessage& from);
  GetHandoverContextResultMessage(GetHandoverContextResultMessage&& from) noexcept
    : GetHandoverContextResultMessage() {
    *this = ::std::move(from);
  }

  inline GetHandoverContextResultMessage& operator=(const GetHandoverContextResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHandoverContextResultMessage& operator=(GetHandoverContextResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHandoverContextResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHandoverContextResultMessage* internal_default_instance() {
    return reinterpret_cast<const GetHandoverContextResultMessage*>(
               &_GetHandoverContextResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetHandoverContextResultMessage& a, GetHandoverContextResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHandoverContextResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHandoverContextResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHandoverContextResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHandoverContextResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHandoverContextResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetHandoverContextResultMessage& from) {
    GetHandoverContextResultMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHandoverContextResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.GetHandoverContextResultMessage";
  }
  protected:
  explicit GetHandoverContextResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 4,
    kNetIdFieldNumber = 1,
    kSrcChannelIdFieldNumber = 2,
    kDstChannelIdFieldNumber = 3,
  };
  // repeated .unrealpb.HandoverContext context = 4;
  int context_size() const;
  private:
  int _internal_context_size() const;
  public:
  void clear_context();
  ::unrealpb::HandoverContext* mutable_context(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext >*
      mutable_context();
  private:
  const ::unrealpb::HandoverContext& _internal_context(int index) const;
  ::unrealpb::HandoverContext* _internal_add_context();
  public:
  const ::unrealpb::HandoverContext& context(int index) const;
  ::unrealpb::HandoverContext* add_context();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext >&
      context() const;

  // uint32 netId = 1;
  void clear_netid();
  uint32_t netid() const;
  void set_netid(uint32_t value);
  private:
  uint32_t _internal_netid() const;
  void _internal_set_netid(uint32_t value);
  public:

  // uint32 srcChannelId = 2;
  void clear_srcchannelid();
  uint32_t srcchannelid() const;
  void set_srcchannelid(uint32_t value);
  private:
  uint32_t _internal_srcchannelid() const;
  void _internal_set_srcchannelid(uint32_t value);
  public:

  // uint32 dstChannelId = 3;
  void clear_dstchannelid();
  uint32_t dstchannelid() const;
  void set_dstchannelid(uint32_t value);
  private:
  uint32_t _internal_dstchannelid() const;
  void _internal_set_dstchannelid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.GetHandoverContextResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext > context_;
    uint32_t netid_;
    uint32_t srcchannelid_;
    uint32_t dstchannelid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API HandoverData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.HandoverData) */ {
 public:
  inline HandoverData() : HandoverData(nullptr) {}
  ~HandoverData() override;
  explicit PROTOBUF_CONSTEXPR HandoverData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandoverData(const HandoverData& from);
  HandoverData(HandoverData&& from) noexcept
    : HandoverData() {
    *this = ::std::move(from);
  }

  inline HandoverData& operator=(const HandoverData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandoverData& operator=(HandoverData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandoverData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandoverData* internal_default_instance() {
    return reinterpret_cast<const HandoverData*>(
               &_HandoverData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HandoverData& a, HandoverData& b) {
    a.Swap(&b);
  }
  inline void Swap(HandoverData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandoverData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandoverData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandoverData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandoverData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandoverData& from) {
    HandoverData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandoverData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.HandoverData";
  }
  protected:
  explicit HandoverData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 1,
    kChannelDataFieldNumber = 2,
  };
  // repeated .unrealpb.HandoverContext context = 1;
  int context_size() const;
  private:
  int _internal_context_size() const;
  public:
  void clear_context();
  ::unrealpb::HandoverContext* mutable_context(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext >*
      mutable_context();
  private:
  const ::unrealpb::HandoverContext& _internal_context(int index) const;
  ::unrealpb::HandoverContext* _internal_add_context();
  public:
  const ::unrealpb::HandoverContext& context(int index) const;
  ::unrealpb::HandoverContext* add_context();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext >&
      context() const;

  // optional .google.protobuf.Any channelData = 2;
  bool has_channeldata() const;
  private:
  bool _internal_has_channeldata() const;
  public:
  void clear_channeldata();
  const ::PROTOBUF_NAMESPACE_ID::Any& channeldata() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_channeldata();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_channeldata();
  void set_allocated_channeldata(::PROTOBUF_NAMESPACE_ID::Any* channeldata);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_channeldata() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_channeldata();
  public:
  void unsafe_arena_set_allocated_channeldata(
      ::PROTOBUF_NAMESPACE_ID::Any* channeldata);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_channeldata();

  // @@protoc_insertion_point(class_scope:unrealpb.HandoverData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext > context_;
    ::PROTOBUF_NAMESPACE_ID::Any* channeldata_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API GetUnrealObjectRefMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.GetUnrealObjectRefMessage) */ {
 public:
  inline GetUnrealObjectRefMessage() : GetUnrealObjectRefMessage(nullptr) {}
  ~GetUnrealObjectRefMessage() override;
  explicit PROTOBUF_CONSTEXPR GetUnrealObjectRefMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUnrealObjectRefMessage(const GetUnrealObjectRefMessage& from);
  GetUnrealObjectRefMessage(GetUnrealObjectRefMessage&& from) noexcept
    : GetUnrealObjectRefMessage() {
    *this = ::std::move(from);
  }

  inline GetUnrealObjectRefMessage& operator=(const GetUnrealObjectRefMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUnrealObjectRefMessage& operator=(GetUnrealObjectRefMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUnrealObjectRefMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUnrealObjectRefMessage* internal_default_instance() {
    return reinterpret_cast<const GetUnrealObjectRefMessage*>(
               &_GetUnrealObjectRefMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetUnrealObjectRefMessage& a, GetUnrealObjectRefMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUnrealObjectRefMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUnrealObjectRefMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUnrealObjectRefMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUnrealObjectRefMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUnrealObjectRefMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUnrealObjectRefMessage& from) {
    GetUnrealObjectRefMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUnrealObjectRefMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.GetUnrealObjectRefMessage";
  }
  protected:
  explicit GetUnrealObjectRefMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetGUIDFieldNumber = 1,
  };
  // repeated uint32 netGUID = 1;
  int netguid_size() const;
  private:
  int _internal_netguid_size() const;
  public:
  void clear_netguid();
  private:
  uint32_t _internal_netguid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_netguid() const;
  void _internal_add_netguid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_netguid();
  public:
  uint32_t netguid(int index) const;
  void set_netguid(int index, uint32_t value);
  void add_netguid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      netguid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_netguid();

  // @@protoc_insertion_point(class_scope:unrealpb.GetUnrealObjectRefMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > netguid_;
    mutable std::atomic<int> _netguid_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API GetUnrealObjectRefResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.GetUnrealObjectRefResultMessage) */ {
 public:
  inline GetUnrealObjectRefResultMessage() : GetUnrealObjectRefResultMessage(nullptr) {}
  ~GetUnrealObjectRefResultMessage() override;
  explicit PROTOBUF_CONSTEXPR GetUnrealObjectRefResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUnrealObjectRefResultMessage(const GetUnrealObjectRefResultMessage& from);
  GetUnrealObjectRefResultMessage(GetUnrealObjectRefResultMessage&& from) noexcept
    : GetUnrealObjectRefResultMessage() {
    *this = ::std::move(from);
  }

  inline GetUnrealObjectRefResultMessage& operator=(const GetUnrealObjectRefResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUnrealObjectRefResultMessage& operator=(GetUnrealObjectRefResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUnrealObjectRefResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUnrealObjectRefResultMessage* internal_default_instance() {
    return reinterpret_cast<const GetUnrealObjectRefResultMessage*>(
               &_GetUnrealObjectRefResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetUnrealObjectRefResultMessage& a, GetUnrealObjectRefResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUnrealObjectRefResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUnrealObjectRefResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUnrealObjectRefResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUnrealObjectRefResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUnrealObjectRefResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUnrealObjectRefResultMessage& from) {
    GetUnrealObjectRefResultMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUnrealObjectRefResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.GetUnrealObjectRefResultMessage";
  }
  protected:
  explicit GetUnrealObjectRefResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjRefFieldNumber = 1,
  };
  // repeated .unrealpb.UnrealObjectRef objRef = 1;
  int objref_size() const;
  private:
  int _internal_objref_size() const;
  public:
  void clear_objref();
  ::unrealpb::UnrealObjectRef* mutable_objref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >*
      mutable_objref();
  private:
  const ::unrealpb::UnrealObjectRef& _internal_objref(int index) const;
  ::unrealpb::UnrealObjectRef* _internal_add_objref();
  public:
  const ::unrealpb::UnrealObjectRef& objref(int index) const;
  ::unrealpb::UnrealObjectRef* add_objref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >&
      objref() const;

  // @@protoc_insertion_point(class_scope:unrealpb.GetUnrealObjectRefResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef > objref_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SyncNetIdMessage_NetIdPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.SyncNetIdMessage.NetIdPath) */ {
 public:
  inline SyncNetIdMessage_NetIdPath() : SyncNetIdMessage_NetIdPath(nullptr) {}
  ~SyncNetIdMessage_NetIdPath() override;
  explicit PROTOBUF_CONSTEXPR SyncNetIdMessage_NetIdPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncNetIdMessage_NetIdPath(const SyncNetIdMessage_NetIdPath& from);
  SyncNetIdMessage_NetIdPath(SyncNetIdMessage_NetIdPath&& from) noexcept
    : SyncNetIdMessage_NetIdPath() {
    *this = ::std::move(from);
  }

  inline SyncNetIdMessage_NetIdPath& operator=(const SyncNetIdMessage_NetIdPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNetIdMessage_NetIdPath& operator=(SyncNetIdMessage_NetIdPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncNetIdMessage_NetIdPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncNetIdMessage_NetIdPath* internal_default_instance() {
    return reinterpret_cast<const SyncNetIdMessage_NetIdPath*>(
               &_SyncNetIdMessage_NetIdPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SyncNetIdMessage_NetIdPath& a, SyncNetIdMessage_NetIdPath& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNetIdMessage_NetIdPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncNetIdMessage_NetIdPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncNetIdMessage_NetIdPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncNetIdMessage_NetIdPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncNetIdMessage_NetIdPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncNetIdMessage_NetIdPath& from) {
    SyncNetIdMessage_NetIdPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNetIdMessage_NetIdPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.SyncNetIdMessage.NetIdPath";
  }
  protected:
  explicit SyncNetIdMessage_NetIdPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kNetIdFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // uint32 netId = 1;
  void clear_netid();
  uint32_t netid() const;
  void set_netid(uint32_t value);
  private:
  uint32_t _internal_netid() const;
  void _internal_set_netid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.SyncNetIdMessage.NetIdPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    uint32_t netid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SyncNetIdMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.SyncNetIdMessage) */ {
 public:
  inline SyncNetIdMessage() : SyncNetIdMessage(nullptr) {}
  ~SyncNetIdMessage() override;
  explicit PROTOBUF_CONSTEXPR SyncNetIdMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncNetIdMessage(const SyncNetIdMessage& from);
  SyncNetIdMessage(SyncNetIdMessage&& from) noexcept
    : SyncNetIdMessage() {
    *this = ::std::move(from);
  }

  inline SyncNetIdMessage& operator=(const SyncNetIdMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNetIdMessage& operator=(SyncNetIdMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncNetIdMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncNetIdMessage* internal_default_instance() {
    return reinterpret_cast<const SyncNetIdMessage*>(
               &_SyncNetIdMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SyncNetIdMessage& a, SyncNetIdMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNetIdMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncNetIdMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncNetIdMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncNetIdMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncNetIdMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncNetIdMessage& from) {
    SyncNetIdMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNetIdMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.SyncNetIdMessage";
  }
  protected:
  explicit SyncNetIdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SyncNetIdMessage_NetIdPath NetIdPath;

  // accessors -------------------------------------------------------

  enum : int {
    kNetIdPathsFieldNumber = 1,
  };
  // repeated .unrealpb.SyncNetIdMessage.NetIdPath netIdPaths = 1;
  int netidpaths_size() const;
  private:
  int _internal_netidpaths_size() const;
  public:
  void clear_netidpaths();
  ::unrealpb::SyncNetIdMessage_NetIdPath* mutable_netidpaths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::SyncNetIdMessage_NetIdPath >*
      mutable_netidpaths();
  private:
  const ::unrealpb::SyncNetIdMessage_NetIdPath& _internal_netidpaths(int index) const;
  ::unrealpb::SyncNetIdMessage_NetIdPath* _internal_add_netidpaths();
  public:
  const ::unrealpb::SyncNetIdMessage_NetIdPath& netidpaths(int index) const;
  ::unrealpb::SyncNetIdMessage_NetIdPath* add_netidpaths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::SyncNetIdMessage_NetIdPath >&
      netidpaths() const;

  // @@protoc_insertion_point(class_scope:unrealpb.SyncNetIdMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::SyncNetIdMessage_NetIdPath > netidpaths_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpatialEntityState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.SpatialEntityState) */ {
 public:
  inline SpatialEntityState() : SpatialEntityState(nullptr) {}
  ~SpatialEntityState() override;
  explicit PROTOBUF_CONSTEXPR SpatialEntityState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialEntityState(const SpatialEntityState& from);
  SpatialEntityState(SpatialEntityState&& from) noexcept
    : SpatialEntityState() {
    *this = ::std::move(from);
  }

  inline SpatialEntityState& operator=(const SpatialEntityState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialEntityState& operator=(SpatialEntityState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialEntityState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialEntityState* internal_default_instance() {
    return reinterpret_cast<const SpatialEntityState*>(
               &_SpatialEntityState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SpatialEntityState& a, SpatialEntityState& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialEntityState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialEntityState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialEntityState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialEntityState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialEntityState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialEntityState& from) {
    SpatialEntityState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialEntityState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.SpatialEntityState";
  }
  protected:
  explicit SpatialEntityState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjRefFieldNumber = 1,
    kEntityDataFieldNumber = 3,
    kRemovedFieldNumber = 2,
  };
  // .unrealpb.UnrealObjectRef objRef = 1;
  bool has_objref() const;
  private:
  bool _internal_has_objref() const;
  public:
  void clear_objref();
  const ::unrealpb::UnrealObjectRef& objref() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_objref();
  ::unrealpb::UnrealObjectRef* mutable_objref();
  void set_allocated_objref(::unrealpb::UnrealObjectRef* objref);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_objref() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_objref();
  public:
  void unsafe_arena_set_allocated_objref(
      ::unrealpb::UnrealObjectRef* objref);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_objref();

  // optional .google.protobuf.Any entityData = 3;
  bool has_entitydata() const;
  private:
  bool _internal_has_entitydata() const;
  public:
  void clear_entitydata();
  const ::PROTOBUF_NAMESPACE_ID::Any& entitydata() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_entitydata();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_entitydata();
  void set_allocated_entitydata(::PROTOBUF_NAMESPACE_ID::Any* entitydata);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_entitydata() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_entitydata();
  public:
  void unsafe_arena_set_allocated_entitydata(
      ::PROTOBUF_NAMESPACE_ID::Any* entitydata);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_entitydata();

  // bool removed = 2;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.SpatialEntityState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::UnrealObjectRef* objref_;
    ::PROTOBUF_NAMESPACE_ID::Any* entitydata_;
    bool removed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SpatialChannelData_EntitiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SpatialChannelData_EntitiesEntry_DoNotUse, 
    uint32_t, ::unrealpb::SpatialEntityState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SpatialChannelData_EntitiesEntry_DoNotUse, 
    uint32_t, ::unrealpb::SpatialEntityState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SpatialChannelData_EntitiesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SpatialChannelData_EntitiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SpatialChannelData_EntitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SpatialChannelData_EntitiesEntry_DoNotUse& other);
  static const SpatialChannelData_EntitiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SpatialChannelData_EntitiesEntry_DoNotUse*>(&_SpatialChannelData_EntitiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};

// -------------------------------------------------------------------

class CHANNELDUE_API SpatialChannelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.SpatialChannelData) */ {
 public:
  inline SpatialChannelData() : SpatialChannelData(nullptr) {}
  ~SpatialChannelData() override;
  explicit PROTOBUF_CONSTEXPR SpatialChannelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialChannelData(const SpatialChannelData& from);
  SpatialChannelData(SpatialChannelData&& from) noexcept
    : SpatialChannelData() {
    *this = ::std::move(from);
  }

  inline SpatialChannelData& operator=(const SpatialChannelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialChannelData& operator=(SpatialChannelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialChannelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialChannelData* internal_default_instance() {
    return reinterpret_cast<const SpatialChannelData*>(
               &_SpatialChannelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SpatialChannelData& a, SpatialChannelData& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialChannelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialChannelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialChannelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialChannelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialChannelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialChannelData& from) {
    SpatialChannelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialChannelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.SpatialChannelData";
  }
  protected:
  explicit SpatialChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
  };
  // map<uint32, .unrealpb.SpatialEntityState> entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SpatialEntityState >&
      _internal_entities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SpatialEntityState >*
      _internal_mutable_entities();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SpatialEntityState >&
      entities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SpatialEntityState >*
      mutable_entities();

  // @@protoc_insertion_point(class_scope:unrealpb.SpatialChannelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SpatialChannelData_EntitiesEntry_DoNotUse,
        uint32_t, ::unrealpb::SpatialEntityState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> entities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API FRepMovement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FRepMovement) */ {
 public:
  inline FRepMovement() : FRepMovement(nullptr) {}
  ~FRepMovement() override;
  explicit PROTOBUF_CONSTEXPR FRepMovement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FRepMovement(const FRepMovement& from);
  FRepMovement(FRepMovement&& from) noexcept
    : FRepMovement() {
    *this = ::std::move(from);
  }

  inline FRepMovement& operator=(const FRepMovement& from) {
    CopyFrom(from);
    return *this;
  }
  inline FRepMovement& operator=(FRepMovement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FRepMovement& default_instance() {
    return *internal_default_instance();
  }
  static inline const FRepMovement* internal_default_instance() {
    return reinterpret_cast<const FRepMovement*>(
               &_FRepMovement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FRepMovement& a, FRepMovement& b) {
    a.Swap(&b);
  }
  inline void Swap(FRepMovement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FRepMovement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FRepMovement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FRepMovement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FRepMovement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FRepMovement& from) {
    FRepMovement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FRepMovement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FRepMovement";
  }
  protected:
  explicit FRepMovement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearVelocityFieldNumber = 1,
    kAngularVelocityFieldNumber = 2,
    kLocationFieldNumber = 3,
    kRotationFieldNumber = 4,
    kBSimulatedPhysicSleepFieldNumber = 5,
    kBRepPhysicsFieldNumber = 6,
  };
  // optional .unrealpb.FVector linearVelocity = 1;
  bool has_linearvelocity() const;
  private:
  bool _internal_has_linearvelocity() const;
  public:
  void clear_linearvelocity();
  const ::unrealpb::FVector& linearvelocity() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_linearvelocity();
  ::unrealpb::FVector* mutable_linearvelocity();
  void set_allocated_linearvelocity(::unrealpb::FVector* linearvelocity);
  private:
  const ::unrealpb::FVector& _internal_linearvelocity() const;
  ::unrealpb::FVector* _internal_mutable_linearvelocity();
  public:
  void unsafe_arena_set_allocated_linearvelocity(
      ::unrealpb::FVector* linearvelocity);
  ::unrealpb::FVector* unsafe_arena_release_linearvelocity();

  // optional .unrealpb.FVector angularVelocity = 2;
  bool has_angularvelocity() const;
  private:
  bool _internal_has_angularvelocity() const;
  public:
  void clear_angularvelocity();
  const ::unrealpb::FVector& angularvelocity() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_angularvelocity();
  ::unrealpb::FVector* mutable_angularvelocity();
  void set_allocated_angularvelocity(::unrealpb::FVector* angularvelocity);
  private:
  const ::unrealpb::FVector& _internal_angularvelocity() const;
  ::unrealpb::FVector* _internal_mutable_angularvelocity();
  public:
  void unsafe_arena_set_allocated_angularvelocity(
      ::unrealpb::FVector* angularvelocity);
  ::unrealpb::FVector* unsafe_arena_release_angularvelocity();

  // optional .unrealpb.FVector location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::unrealpb::FVector& location() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_location();
  ::unrealpb::FVector* mutable_location();
  void set_allocated_location(::unrealpb::FVector* location);
  private:
  const ::unrealpb::FVector& _internal_location() const;
  ::unrealpb::FVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::unrealpb::FVector* location);
  ::unrealpb::FVector* unsafe_arena_release_location();

  // optional .unrealpb.FVector rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::unrealpb::FVector& rotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_rotation();
  ::unrealpb::FVector* mutable_rotation();
  void set_allocated_rotation(::unrealpb::FVector* rotation);
  private:
  const ::unrealpb::FVector& _internal_rotation() const;
  ::unrealpb::FVector* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::unrealpb::FVector* rotation);
  ::unrealpb::FVector* unsafe_arena_release_rotation();

  // optional bool bSimulatedPhysicSleep = 5;
  bool has_bsimulatedphysicsleep() const;
  private:
  bool _internal_has_bsimulatedphysicsleep() const;
  public:
  void clear_bsimulatedphysicsleep();
  bool bsimulatedphysicsleep() const;
  void set_bsimulatedphysicsleep(bool value);
  private:
  bool _internal_bsimulatedphysicsleep() const;
  void _internal_set_bsimulatedphysicsleep(bool value);
  public:

  // optional bool bRepPhysics = 6;
  bool has_brepphysics() const;
  private:
  bool _internal_has_brepphysics() const;
  public:
  void clear_brepphysics();
  bool brepphysics() const;
  void set_brepphysics(bool value);
  private:
  bool _internal_brepphysics() const;
  void _internal_set_brepphysics(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FRepMovement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::FVector* linearvelocity_;
    ::unrealpb::FVector* angularvelocity_;
    ::unrealpb::FVector* location_;
    ::unrealpb::FVector* rotation_;
    bool bsimulatedphysicsleep_;
    bool brepphysics_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API FRepAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FRepAttachment) */ {
 public:
  inline FRepAttachment() : FRepAttachment(nullptr) {}
  ~FRepAttachment() override;
  explicit PROTOBUF_CONSTEXPR FRepAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FRepAttachment(const FRepAttachment& from);
  FRepAttachment(FRepAttachment&& from) noexcept
    : FRepAttachment() {
    *this = ::std::move(from);
  }

  inline FRepAttachment& operator=(const FRepAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline FRepAttachment& operator=(FRepAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FRepAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const FRepAttachment* internal_default_instance() {
    return reinterpret_cast<const FRepAttachment*>(
               &_FRepAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FRepAttachment& a, FRepAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(FRepAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FRepAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FRepAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FRepAttachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FRepAttachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FRepAttachment& from) {
    FRepAttachment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FRepAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FRepAttachment";
  }
  protected:
  explicit FRepAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachSocketFieldNumber = 5,
    kAttachParentFieldNumber = 1,
    kLocationOffsetFieldNumber = 2,
    kRelativeScaleFieldNumber = 3,
    kRotationOffsetFieldNumber = 4,
    kAttachComponentFieldNumber = 6,
  };
  // optional string attachSocket = 5;
  bool has_attachsocket() const;
  private:
  bool _internal_has_attachsocket() const;
  public:
  void clear_attachsocket();
  const std::string& attachsocket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachsocket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachsocket();
  PROTOBUF_NODISCARD std::string* release_attachsocket();
  void set_allocated_attachsocket(std::string* attachsocket);
  private:
  const std::string& _internal_attachsocket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachsocket(const std::string& value);
  std::string* _internal_mutable_attachsocket();
  public:

  // optional .unrealpb.UnrealObjectRef attachParent = 1;
  bool has_attachparent() const;
  private:
  bool _internal_has_attachparent() const;
  public:
  void clear_attachparent();
  const ::unrealpb::UnrealObjectRef& attachparent() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_attachparent();
  ::unrealpb::UnrealObjectRef* mutable_attachparent();
  void set_allocated_attachparent(::unrealpb::UnrealObjectRef* attachparent);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_attachparent() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_attachparent();
  public:
  void unsafe_arena_set_allocated_attachparent(
      ::unrealpb::UnrealObjectRef* attachparent);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_attachparent();

  // optional .unrealpb.FVector locationOffset = 2;
  bool has_locationoffset() const;
  private:
  bool _internal_has_locationoffset() const;
  public:
  void clear_locationoffset();
  const ::unrealpb::FVector& locationoffset() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_locationoffset();
  ::unrealpb::FVector* mutable_locationoffset();
  void set_allocated_locationoffset(::unrealpb::FVector* locationoffset);
  private:
  const ::unrealpb::FVector& _internal_locationoffset() const;
  ::unrealpb::FVector* _internal_mutable_locationoffset();
  public:
  void unsafe_arena_set_allocated_locationoffset(
      ::unrealpb::FVector* locationoffset);
  ::unrealpb::FVector* unsafe_arena_release_locationoffset();

  // optional .unrealpb.FVector relativeScale = 3;
  bool has_relativescale() const;
  private:
  bool _internal_has_relativescale() const;
  public:
  void clear_relativescale();
  const ::unrealpb::FVector& relativescale() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativescale();
  ::unrealpb::FVector* mutable_relativescale();
  void set_allocated_relativescale(::unrealpb::FVector* relativescale);
  private:
  const ::unrealpb::FVector& _internal_relativescale() const;
  ::unrealpb::FVector* _internal_mutable_relativescale();
  public:
  void unsafe_arena_set_allocated_relativescale(
      ::unrealpb::FVector* relativescale);
  ::unrealpb::FVector* unsafe_arena_release_relativescale();

  // optional .unrealpb.FVector rotationOffset = 4;
  bool has_rotationoffset() const;
  private:
  bool _internal_has_rotationoffset() const;
  public:
  void clear_rotationoffset();
  const ::unrealpb::FVector& rotationoffset() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_rotationoffset();
  ::unrealpb::FVector* mutable_rotationoffset();
  void set_allocated_rotationoffset(::unrealpb::FVector* rotationoffset);
  private:
  const ::unrealpb::FVector& _internal_rotationoffset() const;
  ::unrealpb::FVector* _internal_mutable_rotationoffset();
  public:
  void unsafe_arena_set_allocated_rotationoffset(
      ::unrealpb::FVector* rotationoffset);
  ::unrealpb::FVector* unsafe_arena_release_rotationoffset();

  // optional .unrealpb.ActorComponentRef attachComponent = 6;
  bool has_attachcomponent() const;
  private:
  bool _internal_has_attachcomponent() const;
  public:
  void clear_attachcomponent();
  const ::unrealpb::ActorComponentRef& attachcomponent() const;
  PROTOBUF_NODISCARD ::unrealpb::ActorComponentRef* release_attachcomponent();
  ::unrealpb::ActorComponentRef* mutable_attachcomponent();
  void set_allocated_attachcomponent(::unrealpb::ActorComponentRef* attachcomponent);
  private:
  const ::unrealpb::ActorComponentRef& _internal_attachcomponent() const;
  ::unrealpb::ActorComponentRef* _internal_mutable_attachcomponent();
  public:
  void unsafe_arena_set_allocated_attachcomponent(
      ::unrealpb::ActorComponentRef* attachcomponent);
  ::unrealpb::ActorComponentRef* unsafe_arena_release_attachcomponent();

  // @@protoc_insertion_point(class_scope:unrealpb.FRepAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachsocket_;
    ::unrealpb::UnrealObjectRef* attachparent_;
    ::unrealpb::FVector* locationoffset_;
    ::unrealpb::FVector* relativescale_;
    ::unrealpb::FVector* rotationoffset_;
    ::unrealpb::ActorComponentRef* attachcomponent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ActorState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.ActorState) */ {
 public:
  inline ActorState() : ActorState(nullptr) {}
  ~ActorState() override;
  explicit PROTOBUF_CONSTEXPR ActorState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorState(const ActorState& from);
  ActorState(ActorState&& from) noexcept
    : ActorState() {
    *this = ::std::move(from);
  }

  inline ActorState& operator=(const ActorState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorState& operator=(ActorState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorState* internal_default_instance() {
    return reinterpret_cast<const ActorState*>(
               &_ActorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ActorState& a, ActorState& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorState& from) {
    ActorState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.ActorState";
  }
  protected:
  explicit ActorState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 6,
    kInstigatorFieldNumber = 10,
    kReplicatedMovementFieldNumber = 11,
    kAttachmentReplicationFieldNumber = 12,
    kOwningConnIdFieldNumber = 2,
    kLocalRoleFieldNumber = 4,
    kRemovedFieldNumber = 1,
    kBReplicateMovementFieldNumber = 3,
    kBHiddenFieldNumber = 7,
    kBTearOffFieldNumber = 8,
    kRemoteRoleFieldNumber = 5,
    kBCanBeDamagedFieldNumber = 9,
  };
  // optional .unrealpb.UnrealObjectRef owner = 6;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::unrealpb::UnrealObjectRef& owner() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_owner();
  ::unrealpb::UnrealObjectRef* mutable_owner();
  void set_allocated_owner(::unrealpb::UnrealObjectRef* owner);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_owner() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::unrealpb::UnrealObjectRef* owner);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_owner();

  // optional .unrealpb.UnrealObjectRef instigator = 10;
  bool has_instigator() const;
  private:
  bool _internal_has_instigator() const;
  public:
  void clear_instigator();
  const ::unrealpb::UnrealObjectRef& instigator() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_instigator();
  ::unrealpb::UnrealObjectRef* mutable_instigator();
  void set_allocated_instigator(::unrealpb::UnrealObjectRef* instigator);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_instigator() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_instigator();
  public:
  void unsafe_arena_set_allocated_instigator(
      ::unrealpb::UnrealObjectRef* instigator);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_instigator();

  // optional .unrealpb.FRepMovement replicatedMovement = 11;
  bool has_replicatedmovement() const;
  private:
  bool _internal_has_replicatedmovement() const;
  public:
  void clear_replicatedmovement();
  const ::unrealpb::FRepMovement& replicatedmovement() const;
  PROTOBUF_NODISCARD ::unrealpb::FRepMovement* release_replicatedmovement();
  ::unrealpb::FRepMovement* mutable_replicatedmovement();
  void set_allocated_replicatedmovement(::unrealpb::FRepMovement* replicatedmovement);
  private:
  const ::unrealpb::FRepMovement& _internal_replicatedmovement() const;
  ::unrealpb::FRepMovement* _internal_mutable_replicatedmovement();
  public:
  void unsafe_arena_set_allocated_replicatedmovement(
      ::unrealpb::FRepMovement* replicatedmovement);
  ::unrealpb::FRepMovement* unsafe_arena_release_replicatedmovement();

  // optional .unrealpb.FRepAttachment attachmentReplication = 12;
  bool has_attachmentreplication() const;
  private:
  bool _internal_has_attachmentreplication() const;
  public:
  void clear_attachmentreplication();
  const ::unrealpb::FRepAttachment& attachmentreplication() const;
  PROTOBUF_NODISCARD ::unrealpb::FRepAttachment* release_attachmentreplication();
  ::unrealpb::FRepAttachment* mutable_attachmentreplication();
  void set_allocated_attachmentreplication(::unrealpb::FRepAttachment* attachmentreplication);
  private:
  const ::unrealpb::FRepAttachment& _internal_attachmentreplication() const;
  ::unrealpb::FRepAttachment* _internal_mutable_attachmentreplication();
  public:
  void unsafe_arena_set_allocated_attachmentreplication(
      ::unrealpb::FRepAttachment* attachmentreplication);
  ::unrealpb::FRepAttachment* unsafe_arena_release_attachmentreplication();

  // optional uint32 owningConnId = 2;
  bool has_owningconnid() const;
  private:
  bool _internal_has_owningconnid() const;
  public:
  void clear_owningconnid();
  uint32_t owningconnid() const;
  void set_owningconnid(uint32_t value);
  private:
  uint32_t _internal_owningconnid() const;
  void _internal_set_owningconnid(uint32_t value);
  public:

  // optional uint32 localRole = 4;
  bool has_localrole() const;
  private:
  bool _internal_has_localrole() const;
  public:
  void clear_localrole();
  uint32_t localrole() const;
  void set_localrole(uint32_t value);
  private:
  uint32_t _internal_localrole() const;
  void _internal_set_localrole(uint32_t value);
  public:

  // bool removed = 1;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // optional bool bReplicateMovement = 3;
  bool has_breplicatemovement() const;
  private:
  bool _internal_has_breplicatemovement() const;
  public:
  void clear_breplicatemovement();
  bool breplicatemovement() const;
  void set_breplicatemovement(bool value);
  private:
  bool _internal_breplicatemovement() const;
  void _internal_set_breplicatemovement(bool value);
  public:

  // optional bool bHidden = 7;
  bool has_bhidden() const;
  private:
  bool _internal_has_bhidden() const;
  public:
  void clear_bhidden();
  bool bhidden() const;
  void set_bhidden(bool value);
  private:
  bool _internal_bhidden() const;
  void _internal_set_bhidden(bool value);
  public:

  // optional bool bTearOff = 8;
  bool has_btearoff() const;
  private:
  bool _internal_has_btearoff() const;
  public:
  void clear_btearoff();
  bool btearoff() const;
  void set_btearoff(bool value);
  private:
  bool _internal_btearoff() const;
  void _internal_set_btearoff(bool value);
  public:

  // optional uint32 remoteRole = 5;
  bool has_remoterole() const;
  private:
  bool _internal_has_remoterole() const;
  public:
  void clear_remoterole();
  uint32_t remoterole() const;
  void set_remoterole(uint32_t value);
  private:
  uint32_t _internal_remoterole() const;
  void _internal_set_remoterole(uint32_t value);
  public:

  // optional bool bCanBeDamaged = 9;
  bool has_bcanbedamaged() const;
  private:
  bool _internal_has_bcanbedamaged() const;
  public:
  void clear_bcanbedamaged();
  bool bcanbedamaged() const;
  void set_bcanbedamaged(bool value);
  private:
  bool _internal_bcanbedamaged() const;
  void _internal_set_bcanbedamaged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.ActorState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::UnrealObjectRef* owner_;
    ::unrealpb::UnrealObjectRef* instigator_;
    ::unrealpb::FRepMovement* replicatedmovement_;
    ::unrealpb::FRepAttachment* attachmentreplication_;
    uint32_t owningconnid_;
    uint32_t localrole_;
    bool removed_;
    bool breplicatemovement_;
    bool bhidden_;
    bool btearoff_;
    uint32_t remoterole_;
    bool bcanbedamaged_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ActorComponentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.ActorComponentState) */ {
 public:
  inline ActorComponentState() : ActorComponentState(nullptr) {}
  ~ActorComponentState() override;
  explicit PROTOBUF_CONSTEXPR ActorComponentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorComponentState(const ActorComponentState& from);
  ActorComponentState(ActorComponentState&& from) noexcept
    : ActorComponentState() {
    *this = ::std::move(from);
  }

  inline ActorComponentState& operator=(const ActorComponentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorComponentState& operator=(ActorComponentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorComponentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorComponentState* internal_default_instance() {
    return reinterpret_cast<const ActorComponentState*>(
               &_ActorComponentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ActorComponentState& a, ActorComponentState& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorComponentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorComponentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorComponentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorComponentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorComponentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorComponentState& from) {
    ActorComponentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorComponentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.ActorComponentState";
  }
  protected:
  explicit ActorComponentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedFieldNumber = 1,
    kBIsActiveFieldNumber = 2,
    kBReplicatedFieldNumber = 3,
  };
  // bool removed = 1;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // optional bool bIsActive = 2;
  bool has_bisactive() const;
  private:
  bool _internal_has_bisactive() const;
  public:
  void clear_bisactive();
  bool bisactive() const;
  void set_bisactive(bool value);
  private:
  bool _internal_bisactive() const;
  void _internal_set_bisactive(bool value);
  public:

  // optional bool bReplicated = 3;
  bool has_breplicated() const;
  private:
  bool _internal_has_breplicated() const;
  public:
  void clear_breplicated();
  bool breplicated() const;
  void set_breplicated(bool value);
  private:
  bool _internal_breplicated() const;
  void _internal_set_breplicated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.ActorComponentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool removed_;
    bool bisactive_;
    bool breplicated_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SceneComponentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.SceneComponentState) */ {
 public:
  inline SceneComponentState() : SceneComponentState(nullptr) {}
  ~SceneComponentState() override;
  explicit PROTOBUF_CONSTEXPR SceneComponentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneComponentState(const SceneComponentState& from);
  SceneComponentState(SceneComponentState&& from) noexcept
    : SceneComponentState() {
    *this = ::std::move(from);
  }

  inline SceneComponentState& operator=(const SceneComponentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneComponentState& operator=(SceneComponentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneComponentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneComponentState* internal_default_instance() {
    return reinterpret_cast<const SceneComponentState*>(
               &_SceneComponentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SceneComponentState& a, SceneComponentState& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneComponentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneComponentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneComponentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneComponentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneComponentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneComponentState& from) {
    SceneComponentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneComponentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.SceneComponentState";
  }
  protected:
  explicit SceneComponentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachChildrenFieldNumber = 10,
    kAttachSocketNameFieldNumber = 11,
    kAttachParentFieldNumber = 9,
    kRelativeLocationFieldNumber = 12,
    kRelativeRotationFieldNumber = 13,
    kRelativeScaleFieldNumber = 14,
    kRemovedFieldNumber = 1,
    kBAbsoluteLocationFieldNumber = 2,
    kBAbsoluteRotationFieldNumber = 3,
    kBAbsoluteScaleFieldNumber = 4,
    kBVisibleFieldNumber = 5,
    kBShouldBeAttachedFieldNumber = 6,
    kBShouldSnapLocationWhenAttachedFieldNumber = 7,
    kBShouldSnapRotationWhenAttachedFieldNumber = 8,
  };
  // repeated .unrealpb.ActorComponentRef attachChildren = 10;
  int attachchildren_size() const;
  private:
  int _internal_attachchildren_size() const;
  public:
  void clear_attachchildren();
  ::unrealpb::ActorComponentRef* mutable_attachchildren(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::ActorComponentRef >*
      mutable_attachchildren();
  private:
  const ::unrealpb::ActorComponentRef& _internal_attachchildren(int index) const;
  ::unrealpb::ActorComponentRef* _internal_add_attachchildren();
  public:
  const ::unrealpb::ActorComponentRef& attachchildren(int index) const;
  ::unrealpb::ActorComponentRef* add_attachchildren();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::ActorComponentRef >&
      attachchildren() const;

  // optional string attachSocketName = 11;
  bool has_attachsocketname() const;
  private:
  bool _internal_has_attachsocketname() const;
  public:
  void clear_attachsocketname();
  const std::string& attachsocketname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachsocketname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachsocketname();
  PROTOBUF_NODISCARD std::string* release_attachsocketname();
  void set_allocated_attachsocketname(std::string* attachsocketname);
  private:
  const std::string& _internal_attachsocketname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachsocketname(const std::string& value);
  std::string* _internal_mutable_attachsocketname();
  public:

  // optional .unrealpb.ActorComponentRef attachParent = 9;
  bool has_attachparent() const;
  private:
  bool _internal_has_attachparent() const;
  public:
  void clear_attachparent();
  const ::unrealpb::ActorComponentRef& attachparent() const;
  PROTOBUF_NODISCARD ::unrealpb::ActorComponentRef* release_attachparent();
  ::unrealpb::ActorComponentRef* mutable_attachparent();
  void set_allocated_attachparent(::unrealpb::ActorComponentRef* attachparent);
  private:
  const ::unrealpb::ActorComponentRef& _internal_attachparent() const;
  ::unrealpb::ActorComponentRef* _internal_mutable_attachparent();
  public:
  void unsafe_arena_set_allocated_attachparent(
      ::unrealpb::ActorComponentRef* attachparent);
  ::unrealpb::ActorComponentRef* unsafe_arena_release_attachparent();

  // optional .unrealpb.FVector relativeLocation = 12;
  bool has_relativelocation() const;
  private:
  bool _internal_has_relativelocation() const;
  public:
  void clear_relativelocation();
  const ::unrealpb::FVector& relativelocation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativelocation();
  ::unrealpb::FVector* mutable_relativelocation();
  void set_allocated_relativelocation(::unrealpb::FVector* relativelocation);
  private:
  const ::unrealpb::FVector& _internal_relativelocation() const;
  ::unrealpb::FVector* _internal_mutable_relativelocation();
  public:
  void unsafe_arena_set_allocated_relativelocation(
      ::unrealpb::FVector* relativelocation);
  ::unrealpb::FVector* unsafe_arena_release_relativelocation();

  // optional .unrealpb.FVector relativeRotation = 13;
  bool has_relativerotation() const;
  private:
  bool _internal_has_relativerotation() const;
  public:
  void clear_relativerotation();
  const ::unrealpb::FVector& relativerotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativerotation();
  ::unrealpb::FVector* mutable_relativerotation();
  void set_allocated_relativerotation(::unrealpb::FVector* relativerotation);
  private:
  const ::unrealpb::FVector& _internal_relativerotation() const;
  ::unrealpb::FVector* _internal_mutable_relativerotation();
  public:
  void unsafe_arena_set_allocated_relativerotation(
      ::unrealpb::FVector* relativerotation);
  ::unrealpb::FVector* unsafe_arena_release_relativerotation();

  // optional .unrealpb.FVector relativeScale = 14;
  bool has_relativescale() const;
  private:
  bool _internal_has_relativescale() const;
  public:
  void clear_relativescale();
  const ::unrealpb::FVector& relativescale() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativescale();
  ::unrealpb::FVector* mutable_relativescale();
  void set_allocated_relativescale(::unrealpb::FVector* relativescale);
  private:
  const ::unrealpb::FVector& _internal_relativescale() const;
  ::unrealpb::FVector* _internal_mutable_relativescale();
  public:
  void unsafe_arena_set_allocated_relativescale(
      ::unrealpb::FVector* relativescale);
  ::unrealpb::FVector* unsafe_arena_release_relativescale();

  // bool removed = 1;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // optional bool bAbsoluteLocation = 2;
  bool has_babsolutelocation() const;
  private:
  bool _internal_has_babsolutelocation() const;
  public:
  void clear_babsolutelocation();
  bool babsolutelocation() const;
  void set_babsolutelocation(bool value);
  private:
  bool _internal_babsolutelocation() const;
  void _internal_set_babsolutelocation(bool value);
  public:

  // optional bool bAbsoluteRotation = 3;
  bool has_babsoluterotation() const;
  private:
  bool _internal_has_babsoluterotation() const;
  public:
  void clear_babsoluterotation();
  bool babsoluterotation() const;
  void set_babsoluterotation(bool value);
  private:
  bool _internal_babsoluterotation() const;
  void _internal_set_babsoluterotation(bool value);
  public:

  // optional bool bAbsoluteScale = 4;
  bool has_babsolutescale() const;
  private:
  bool _internal_has_babsolutescale() const;
  public:
  void clear_babsolutescale();
  bool babsolutescale() const;
  void set_babsolutescale(bool value);
  private:
  bool _internal_babsolutescale() const;
  void _internal_set_babsolutescale(bool value);
  public:

  // optional bool bVisible = 5;
  bool has_bvisible() const;
  private:
  bool _internal_has_bvisible() const;
  public:
  void clear_bvisible();
  bool bvisible() const;
  void set_bvisible(bool value);
  private:
  bool _internal_bvisible() const;
  void _internal_set_bvisible(bool value);
  public:

  // optional bool bShouldBeAttached = 6;
  bool has_bshouldbeattached() const;
  private:
  bool _internal_has_bshouldbeattached() const;
  public:
  void clear_bshouldbeattached();
  bool bshouldbeattached() const;
  void set_bshouldbeattached(bool value);
  private:
  bool _internal_bshouldbeattached() const;
  void _internal_set_bshouldbeattached(bool value);
  public:

  // optional bool bShouldSnapLocationWhenAttached = 7;
  bool has_bshouldsnaplocationwhenattached() const;
  private:
  bool _internal_has_bshouldsnaplocationwhenattached() const;
  public:
  void clear_bshouldsnaplocationwhenattached();
  bool bshouldsnaplocationwhenattached() const;
  void set_bshouldsnaplocationwhenattached(bool value);
  private:
  bool _internal_bshouldsnaplocationwhenattached() const;
  void _internal_set_bshouldsnaplocationwhenattached(bool value);
  public:

  // optional bool bShouldSnapRotationWhenAttached = 8;
  bool has_bshouldsnaprotationwhenattached() const;
  private:
  bool _internal_has_bshouldsnaprotationwhenattached() const;
  public:
  void clear_bshouldsnaprotationwhenattached();
  bool bshouldsnaprotationwhenattached() const;
  void set_bshouldsnaprotationwhenattached(bool value);
  private:
  bool _internal_bshouldsnaprotationwhenattached() const;
  void _internal_set_bshouldsnaprotationwhenattached(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.SceneComponentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::ActorComponentRef > attachchildren_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachsocketname_;
    ::unrealpb::ActorComponentRef* attachparent_;
    ::unrealpb::FVector* relativelocation_;
    ::unrealpb::FVector* relativerotation_;
    ::unrealpb::FVector* relativescale_;
    bool removed_;
    bool babsolutelocation_;
    bool babsoluterotation_;
    bool babsolutescale_;
    bool bvisible_;
    bool bshouldbeattached_;
    bool bshouldsnaplocationwhenattached_;
    bool bshouldsnaprotationwhenattached_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API FBasedMovementInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FBasedMovementInfo) */ {
 public:
  inline FBasedMovementInfo() : FBasedMovementInfo(nullptr) {}
  ~FBasedMovementInfo() override;
  explicit PROTOBUF_CONSTEXPR FBasedMovementInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FBasedMovementInfo(const FBasedMovementInfo& from);
  FBasedMovementInfo(FBasedMovementInfo&& from) noexcept
    : FBasedMovementInfo() {
    *this = ::std::move(from);
  }

  inline FBasedMovementInfo& operator=(const FBasedMovementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FBasedMovementInfo& operator=(FBasedMovementInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FBasedMovementInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FBasedMovementInfo* internal_default_instance() {
    return reinterpret_cast<const FBasedMovementInfo*>(
               &_FBasedMovementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FBasedMovementInfo& a, FBasedMovementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FBasedMovementInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FBasedMovementInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FBasedMovementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FBasedMovementInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FBasedMovementInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FBasedMovementInfo& from) {
    FBasedMovementInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FBasedMovementInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FBasedMovementInfo";
  }
  protected:
  explicit FBasedMovementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoneNameFieldNumber = 2,
    kMovementBaseFieldNumber = 1,
    kLocationFieldNumber = 3,
    kRotationFieldNumber = 4,
    kBServerHasBaseComponentFieldNumber = 5,
    kBRelativeRotationFieldNumber = 6,
    kBServerHasVelocityFieldNumber = 7,
  };
  // optional string boneName = 2;
  bool has_bonename() const;
  private:
  bool _internal_has_bonename() const;
  public:
  void clear_bonename();
  const std::string& bonename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bonename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bonename();
  PROTOBUF_NODISCARD std::string* release_bonename();
  void set_allocated_bonename(std::string* bonename);
  private:
  const std::string& _internal_bonename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bonename(const std::string& value);
  std::string* _internal_mutable_bonename();
  public:

  // optional .unrealpb.ActorComponentRef movementBase = 1;
  bool has_movementbase() const;
  private:
  bool _internal_has_movementbase() const;
  public:
  void clear_movementbase();
  const ::unrealpb::ActorComponentRef& movementbase() const;
  PROTOBUF_NODISCARD ::unrealpb::ActorComponentRef* release_movementbase();
  ::unrealpb::ActorComponentRef* mutable_movementbase();
  void set_allocated_movementbase(::unrealpb::ActorComponentRef* movementbase);
  private:
  const ::unrealpb::ActorComponentRef& _internal_movementbase() const;
  ::unrealpb::ActorComponentRef* _internal_mutable_movementbase();
  public:
  void unsafe_arena_set_allocated_movementbase(
      ::unrealpb::ActorComponentRef* movementbase);
  ::unrealpb::ActorComponentRef* unsafe_arena_release_movementbase();

  // optional .unrealpb.FVector location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::unrealpb::FVector& location() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_location();
  ::unrealpb::FVector* mutable_location();
  void set_allocated_location(::unrealpb::FVector* location);
  private:
  const ::unrealpb::FVector& _internal_location() const;
  ::unrealpb::FVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::unrealpb::FVector* location);
  ::unrealpb::FVector* unsafe_arena_release_location();

  // optional .unrealpb.FVector rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::unrealpb::FVector& rotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_rotation();
  ::unrealpb::FVector* mutable_rotation();
  void set_allocated_rotation(::unrealpb::FVector* rotation);
  private:
  const ::unrealpb::FVector& _internal_rotation() const;
  ::unrealpb::FVector* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::unrealpb::FVector* rotation);
  ::unrealpb::FVector* unsafe_arena_release_rotation();

  // optional bool bServerHasBaseComponent = 5;
  bool has_bserverhasbasecomponent() const;
  private:
  bool _internal_has_bserverhasbasecomponent() const;
  public:
  void clear_bserverhasbasecomponent();
  bool bserverhasbasecomponent() const;
  void set_bserverhasbasecomponent(bool value);
  private:
  bool _internal_bserverhasbasecomponent() const;
  void _internal_set_bserverhasbasecomponent(bool value);
  public:

  // optional bool bRelativeRotation = 6;
  bool has_brelativerotation() const;
  private:
  bool _internal_has_brelativerotation() const;
  public:
  void clear_brelativerotation();
  bool brelativerotation() const;
  void set_brelativerotation(bool value);
  private:
  bool _internal_brelativerotation() const;
  void _internal_set_brelativerotation(bool value);
  public:

  // optional bool bServerHasVelocity = 7;
  bool has_bserverhasvelocity() const;
  private:
  bool _internal_has_bserverhasvelocity() const;
  public:
  void clear_bserverhasvelocity();
  bool bserverhasvelocity() const;
  void set_bserverhasvelocity(bool value);
  private:
  bool _internal_bserverhasvelocity() const;
  void _internal_set_bserverhasvelocity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FBasedMovementInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bonename_;
    ::unrealpb::ActorComponentRef* movementbase_;
    ::unrealpb::FVector* location_;
    ::unrealpb::FVector* rotation_;
    bool bserverhasbasecomponent_;
    bool brelativerotation_;
    bool bserverhasvelocity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API FRootMotionSource_FRootMotionFinishVelocitySettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings) */ {
 public:
  inline FRootMotionSource_FRootMotionFinishVelocitySettings() : FRootMotionSource_FRootMotionFinishVelocitySettings(nullptr) {}
  ~FRootMotionSource_FRootMotionFinishVelocitySettings() override;
  explicit PROTOBUF_CONSTEXPR FRootMotionSource_FRootMotionFinishVelocitySettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FRootMotionSource_FRootMotionFinishVelocitySettings(const FRootMotionSource_FRootMotionFinishVelocitySettings& from);
  FRootMotionSource_FRootMotionFinishVelocitySettings(FRootMotionSource_FRootMotionFinishVelocitySettings&& from) noexcept
    : FRootMotionSource_FRootMotionFinishVelocitySettings() {
    *this = ::std::move(from);
  }

  inline FRootMotionSource_FRootMotionFinishVelocitySettings& operator=(const FRootMotionSource_FRootMotionFinishVelocitySettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline FRootMotionSource_FRootMotionFinishVelocitySettings& operator=(FRootMotionSource_FRootMotionFinishVelocitySettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FRootMotionSource_FRootMotionFinishVelocitySettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const FRootMotionSource_FRootMotionFinishVelocitySettings* internal_default_instance() {
    return reinterpret_cast<const FRootMotionSource_FRootMotionFinishVelocitySettings*>(
               &_FRootMotionSource_FRootMotionFinishVelocitySettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FRootMotionSource_FRootMotionFinishVelocitySettings& a, FRootMotionSource_FRootMotionFinishVelocitySettings& b) {
    a.Swap(&b);
  }
  inline void Swap(FRootMotionSource_FRootMotionFinishVelocitySettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FRootMotionSource_FRootMotionFinishVelocitySettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FRootMotionSource_FRootMotionFinishVelocitySettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FRootMotionSource_FRootMotionFinishVelocitySettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FRootMotionSource_FRootMotionFinishVelocitySettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FRootMotionSource_FRootMotionFinishVelocitySettings& from) {
    FRootMotionSource_FRootMotionFinishVelocitySettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FRootMotionSource_FRootMotionFinishVelocitySettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings";
  }
  protected:
  explicit FRootMotionSource_FRootMotionFinishVelocitySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetVelocityFieldNumber = 2,
    kModeFieldNumber = 1,
    kClampVelocityFieldNumber = 3,
  };
  // optional .unrealpb.FVector setVelocity = 2;
  bool has_setvelocity() const;
  private:
  bool _internal_has_setvelocity() const;
  public:
  void clear_setvelocity();
  const ::unrealpb::FVector& setvelocity() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_setvelocity();
  ::unrealpb::FVector* mutable_setvelocity();
  void set_allocated_setvelocity(::unrealpb::FVector* setvelocity);
  private:
  const ::unrealpb::FVector& _internal_setvelocity() const;
  ::unrealpb::FVector* _internal_mutable_setvelocity();
  public:
  void unsafe_arena_set_allocated_setvelocity(
      ::unrealpb::FVector* setvelocity);
  ::unrealpb::FVector* unsafe_arena_release_setvelocity();

  // optional uint32 mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // optional float clampVelocity = 3;
  bool has_clampvelocity() const;
  private:
  bool _internal_has_clampvelocity() const;
  public:
  void clear_clampvelocity();
  float clampvelocity() const;
  void set_clampvelocity(float value);
  private:
  float _internal_clampvelocity() const;
  void _internal_set_clampvelocity(float value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::FVector* setvelocity_;
    uint32_t mode_;
    float clampvelocity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API FRootMotionSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FRootMotionSource) */ {
 public:
  inline FRootMotionSource() : FRootMotionSource(nullptr) {}
  ~FRootMotionSource() override;
  explicit PROTOBUF_CONSTEXPR FRootMotionSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FRootMotionSource(const FRootMotionSource& from);
  FRootMotionSource(FRootMotionSource&& from) noexcept
    : FRootMotionSource() {
    *this = ::std::move(from);
  }

  inline FRootMotionSource& operator=(const FRootMotionSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline FRootMotionSource& operator=(FRootMotionSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FRootMotionSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const FRootMotionSource* internal_default_instance() {
    return reinterpret_cast<const FRootMotionSource*>(
               &_FRootMotionSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(FRootMotionSource& a, FRootMotionSource& b) {
    a.Swap(&b);
  }
  inline void Swap(FRootMotionSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FRootMotionSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FRootMotionSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FRootMotionSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FRootMotionSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FRootMotionSource& from) {
    FRootMotionSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FRootMotionSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FRootMotionSource";
  }
  protected:
  explicit FRootMotionSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FRootMotionSource_FRootMotionFinishVelocitySettings FRootMotionFinishVelocitySettings;

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceNameFieldNumber = 4,
    kFinishVelocityParamsFieldNumber = 16,
    kPriorityFieldNumber = 1,
    kLocalIdFieldNumber = 2,
    kAccumulatedModeFieldNumber = 3,
    kStartTimeFieldNumber = 5,
    kCurrentTimeFieldNumber = 6,
    kPreviousTimeFieldNumber = 7,
    kDurationFieldNumber = 8,
    kStatusFieldNumber = 9,
    kSettingsFieldNumber = 10,
    kBInLocalSpaceFieldNumber = 11,
    kBNeedsSimulatedCatchupFieldNumber = 12,
    kBSimulatedNeedsSmoothingFieldNumber = 13,
    kBHasRootMotionFieldNumber = 14,
    kBlendWeightFieldNumber = 15,
  };
  // optional string instanceName = 4;
  bool has_instancename() const;
  private:
  bool _internal_has_instancename() const;
  public:
  void clear_instancename();
  const std::string& instancename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instancename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instancename();
  PROTOBUF_NODISCARD std::string* release_instancename();
  void set_allocated_instancename(std::string* instancename);
  private:
  const std::string& _internal_instancename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instancename(const std::string& value);
  std::string* _internal_mutable_instancename();
  public:

  // optional .unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings finishVelocityParams = 16;
  bool has_finishvelocityparams() const;
  private:
  bool _internal_has_finishvelocityparams() const;
  public:
  void clear_finishvelocityparams();
  const ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings& finishvelocityparams() const;
  PROTOBUF_NODISCARD ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* release_finishvelocityparams();
  ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* mutable_finishvelocityparams();
  void set_allocated_finishvelocityparams(::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* finishvelocityparams);
  private:
  const ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings& _internal_finishvelocityparams() const;
  ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* _internal_mutable_finishvelocityparams();
  public:
  void unsafe_arena_set_allocated_finishvelocityparams(
      ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* finishvelocityparams);
  ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* unsafe_arena_release_finishvelocityparams();

  // optional uint32 priority = 1;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // optional uint32 localId = 2;
  bool has_localid() const;
  private:
  bool _internal_has_localid() const;
  public:
  void clear_localid();
  uint32_t localid() const;
  void set_localid(uint32_t value);
  private:
  uint32_t _internal_localid() const;
  void _internal_set_localid(uint32_t value);
  public:

  // optional uint32 accumulatedMode = 3;
  bool has_accumulatedmode() const;
  private:
  bool _internal_has_accumulatedmode() const;
  public:
  void clear_accumulatedmode();
  uint32_t accumulatedmode() const;
  void set_accumulatedmode(uint32_t value);
  private:
  uint32_t _internal_accumulatedmode() const;
  void _internal_set_accumulatedmode(uint32_t value);
  public:

  // optional float startTime = 5;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  float starttime() const;
  void set_starttime(float value);
  private:
  float _internal_starttime() const;
  void _internal_set_starttime(float value);
  public:

  // optional float currentTime = 6;
  bool has_currenttime() const;
  private:
  bool _internal_has_currenttime() const;
  public:
  void clear_currenttime();
  float currenttime() const;
  void set_currenttime(float value);
  private:
  float _internal_currenttime() const;
  void _internal_set_currenttime(float value);
  public:

  // optional float previousTime = 7;
  bool has_previoustime() const;
  private:
  bool _internal_has_previoustime() const;
  public:
  void clear_previoustime();
  float previoustime() const;
  void set_previoustime(float value);
  private:
  float _internal_previoustime() const;
  void _internal_set_previoustime(float value);
  public:

  // optional float duration = 8;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // optional uint32 status = 9;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // optional uint32 settings = 10;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  uint32_t settings() const;
  void set_settings(uint32_t value);
  private:
  uint32_t _internal_settings() const;
  void _internal_set_settings(uint32_t value);
  public:

  // optional bool bInLocalSpace = 11;
  bool has_binlocalspace() const;
  private:
  bool _internal_has_binlocalspace() const;
  public:
  void clear_binlocalspace();
  bool binlocalspace() const;
  void set_binlocalspace(bool value);
  private:
  bool _internal_binlocalspace() const;
  void _internal_set_binlocalspace(bool value);
  public:

  // optional bool bNeedsSimulatedCatchup = 12;
  bool has_bneedssimulatedcatchup() const;
  private:
  bool _internal_has_bneedssimulatedcatchup() const;
  public:
  void clear_bneedssimulatedcatchup();
  bool bneedssimulatedcatchup() const;
  void set_bneedssimulatedcatchup(bool value);
  private:
  bool _internal_bneedssimulatedcatchup() const;
  void _internal_set_bneedssimulatedcatchup(bool value);
  public:

  // optional bool bSimulatedNeedsSmoothing = 13;
  bool has_bsimulatedneedssmoothing() const;
  private:
  bool _internal_has_bsimulatedneedssmoothing() const;
  public:
  void clear_bsimulatedneedssmoothing();
  bool bsimulatedneedssmoothing() const;
  void set_bsimulatedneedssmoothing(bool value);
  private:
  bool _internal_bsimulatedneedssmoothing() const;
  void _internal_set_bsimulatedneedssmoothing(bool value);
  public:

  // optional bool bHasRootMotion = 14;
  bool has_bhasrootmotion() const;
  private:
  bool _internal_has_bhasrootmotion() const;
  public:
  void clear_bhasrootmotion();
  bool bhasrootmotion() const;
  void set_bhasrootmotion(bool value);
  private:
  bool _internal_bhasrootmotion() const;
  void _internal_set_bhasrootmotion(bool value);
  public:

  // optional float blendWeight = 15;
  bool has_blendweight() const;
  private:
  bool _internal_has_blendweight() const;
  public:
  void clear_blendweight();
  float blendweight() const;
  void set_blendweight(float value);
  private:
  float _internal_blendweight() const;
  void _internal_set_blendweight(float value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FRootMotionSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instancename_;
    ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* finishvelocityparams_;
    uint32_t priority_;
    uint32_t localid_;
    uint32_t accumulatedmode_;
    float starttime_;
    float currenttime_;
    float previoustime_;
    float duration_;
    uint32_t status_;
    uint32_t settings_;
    bool binlocalspace_;
    bool bneedssimulatedcatchup_;
    bool bsimulatedneedssmoothing_;
    bool bhasrootmotion_;
    float blendweight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API FRootMotionSourceGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FRootMotionSourceGroup) */ {
 public:
  inline FRootMotionSourceGroup() : FRootMotionSourceGroup(nullptr) {}
  ~FRootMotionSourceGroup() override;
  explicit PROTOBUF_CONSTEXPR FRootMotionSourceGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FRootMotionSourceGroup(const FRootMotionSourceGroup& from);
  FRootMotionSourceGroup(FRootMotionSourceGroup&& from) noexcept
    : FRootMotionSourceGroup() {
    *this = ::std::move(from);
  }

  inline FRootMotionSourceGroup& operator=(const FRootMotionSourceGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline FRootMotionSourceGroup& operator=(FRootMotionSourceGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FRootMotionSourceGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const FRootMotionSourceGroup* internal_default_instance() {
    return reinterpret_cast<const FRootMotionSourceGroup*>(
               &_FRootMotionSourceGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FRootMotionSourceGroup& a, FRootMotionSourceGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(FRootMotionSourceGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FRootMotionSourceGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FRootMotionSourceGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FRootMotionSourceGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FRootMotionSourceGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FRootMotionSourceGroup& from) {
    FRootMotionSourceGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FRootMotionSourceGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FRootMotionSourceGroup";
  }
  protected:
  explicit FRootMotionSourceGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootMotionSourcesFieldNumber = 1,
    kPendingAddRootMotionSourcesFieldNumber = 2,
    kLastPreAdditiveVelocityFieldNumber = 8,
    kBHasAdditiveSourcesFieldNumber = 3,
    kBHasOverrideSourcesFieldNumber = 4,
    kBHasOverrideSourcesWithIgnoreZAccumulateFieldNumber = 5,
    kBIsAdditiveVelocityAppliedFieldNumber = 6,
    kLastAccumulatedSettingsFieldNumber = 7,
  };
  // repeated .unrealpb.FRootMotionSource rootMotionSources = 1;
  int rootmotionsources_size() const;
  private:
  int _internal_rootmotionsources_size() const;
  public:
  void clear_rootmotionsources();
  ::unrealpb::FRootMotionSource* mutable_rootmotionsources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource >*
      mutable_rootmotionsources();
  private:
  const ::unrealpb::FRootMotionSource& _internal_rootmotionsources(int index) const;
  ::unrealpb::FRootMotionSource* _internal_add_rootmotionsources();
  public:
  const ::unrealpb::FRootMotionSource& rootmotionsources(int index) const;
  ::unrealpb::FRootMotionSource* add_rootmotionsources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource >&
      rootmotionsources() const;

  // repeated .unrealpb.FRootMotionSource pendingAddRootMotionSources = 2;
  int pendingaddrootmotionsources_size() const;
  private:
  int _internal_pendingaddrootmotionsources_size() const;
  public:
  void clear_pendingaddrootmotionsources();
  ::unrealpb::FRootMotionSource* mutable_pendingaddrootmotionsources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource >*
      mutable_pendingaddrootmotionsources();
  private:
  const ::unrealpb::FRootMotionSource& _internal_pendingaddrootmotionsources(int index) const;
  ::unrealpb::FRootMotionSource* _internal_add_pendingaddrootmotionsources();
  public:
  const ::unrealpb::FRootMotionSource& pendingaddrootmotionsources(int index) const;
  ::unrealpb::FRootMotionSource* add_pendingaddrootmotionsources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource >&
      pendingaddrootmotionsources() const;

  // optional .unrealpb.FVector lastPreAdditiveVelocity = 8;
  bool has_lastpreadditivevelocity() const;
  private:
  bool _internal_has_lastpreadditivevelocity() const;
  public:
  void clear_lastpreadditivevelocity();
  const ::unrealpb::FVector& lastpreadditivevelocity() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_lastpreadditivevelocity();
  ::unrealpb::FVector* mutable_lastpreadditivevelocity();
  void set_allocated_lastpreadditivevelocity(::unrealpb::FVector* lastpreadditivevelocity);
  private:
  const ::unrealpb::FVector& _internal_lastpreadditivevelocity() const;
  ::unrealpb::FVector* _internal_mutable_lastpreadditivevelocity();
  public:
  void unsafe_arena_set_allocated_lastpreadditivevelocity(
      ::unrealpb::FVector* lastpreadditivevelocity);
  ::unrealpb::FVector* unsafe_arena_release_lastpreadditivevelocity();

  // optional bool bHasAdditiveSources = 3;
  bool has_bhasadditivesources() const;
  private:
  bool _internal_has_bhasadditivesources() const;
  public:
  void clear_bhasadditivesources();
  bool bhasadditivesources() const;
  void set_bhasadditivesources(bool value);
  private:
  bool _internal_bhasadditivesources() const;
  void _internal_set_bhasadditivesources(bool value);
  public:

  // optional bool bHasOverrideSources = 4;
  bool has_bhasoverridesources() const;
  private:
  bool _internal_has_bhasoverridesources() const;
  public:
  void clear_bhasoverridesources();
  bool bhasoverridesources() const;
  void set_bhasoverridesources(bool value);
  private:
  bool _internal_bhasoverridesources() const;
  void _internal_set_bhasoverridesources(bool value);
  public:

  // optional bool bHasOverrideSourcesWithIgnoreZAccumulate = 5;
  bool has_bhasoverridesourceswithignorezaccumulate() const;
  private:
  bool _internal_has_bhasoverridesourceswithignorezaccumulate() const;
  public:
  void clear_bhasoverridesourceswithignorezaccumulate();
  bool bhasoverridesourceswithignorezaccumulate() const;
  void set_bhasoverridesourceswithignorezaccumulate(bool value);
  private:
  bool _internal_bhasoverridesourceswithignorezaccumulate() const;
  void _internal_set_bhasoverridesourceswithignorezaccumulate(bool value);
  public:

  // optional bool bIsAdditiveVelocityApplied = 6;
  bool has_bisadditivevelocityapplied() const;
  private:
  bool _internal_has_bisadditivevelocityapplied() const;
  public:
  void clear_bisadditivevelocityapplied();
  bool bisadditivevelocityapplied() const;
  void set_bisadditivevelocityapplied(bool value);
  private:
  bool _internal_bisadditivevelocityapplied() const;
  void _internal_set_bisadditivevelocityapplied(bool value);
  public:

  // optional uint32 lastAccumulatedSettings = 7;
  bool has_lastaccumulatedsettings() const;
  private:
  bool _internal_has_lastaccumulatedsettings() const;
  public:
  void clear_lastaccumulatedsettings();
  uint32_t lastaccumulatedsettings() const;
  void set_lastaccumulatedsettings(uint32_t value);
  private:
  uint32_t _internal_lastaccumulatedsettings() const;
  void _internal_set_lastaccumulatedsettings(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FRootMotionSourceGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource > rootmotionsources_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource > pendingaddrootmotionsources_;
    ::unrealpb::FVector* lastpreadditivevelocity_;
    bool bhasadditivesources_;
    bool bhasoverridesources_;
    bool bhasoverridesourceswithignorezaccumulate_;
    bool bisadditivevelocityapplied_;
    uint32_t lastaccumulatedsettings_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API FRepRootMotionMontage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FRepRootMotionMontage) */ {
 public:
  inline FRepRootMotionMontage() : FRepRootMotionMontage(nullptr) {}
  ~FRepRootMotionMontage() override;
  explicit PROTOBUF_CONSTEXPR FRepRootMotionMontage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FRepRootMotionMontage(const FRepRootMotionMontage& from);
  FRepRootMotionMontage(FRepRootMotionMontage&& from) noexcept
    : FRepRootMotionMontage() {
    *this = ::std::move(from);
  }

  inline FRepRootMotionMontage& operator=(const FRepRootMotionMontage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FRepRootMotionMontage& operator=(FRepRootMotionMontage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FRepRootMotionMontage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FRepRootMotionMontage* internal_default_instance() {
    return reinterpret_cast<const FRepRootMotionMontage*>(
               &_FRepRootMotionMontage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FRepRootMotionMontage& a, FRepRootMotionMontage& b) {
    a.Swap(&b);
  }
  inline void Swap(FRepRootMotionMontage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FRepRootMotionMontage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FRepRootMotionMontage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FRepRootMotionMontage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FRepRootMotionMontage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FRepRootMotionMontage& from) {
    FRepRootMotionMontage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FRepRootMotionMontage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FRepRootMotionMontage";
  }
  protected:
  explicit FRepRootMotionMontage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovementBaseBoneNameFieldNumber = 7,
    kAnimMontageFieldNumber = 2,
    kLocationFieldNumber = 4,
    kRotationFieldNumber = 5,
    kMovementBaseFieldNumber = 6,
    kAuthoritativeRootMotionFieldNumber = 10,
    kAccelerationFieldNumber = 11,
    kLinearVelocityFieldNumber = 12,
    kPositionFieldNumber = 3,
    kBIsActiveFieldNumber = 1,
    kBRelativePositionFieldNumber = 8,
    kBRelativeRotationFieldNumber = 9,
  };
  // optional string movementBaseBoneName = 7;
  bool has_movementbasebonename() const;
  private:
  bool _internal_has_movementbasebonename() const;
  public:
  void clear_movementbasebonename();
  const std::string& movementbasebonename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_movementbasebonename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_movementbasebonename();
  PROTOBUF_NODISCARD std::string* release_movementbasebonename();
  void set_allocated_movementbasebonename(std::string* movementbasebonename);
  private:
  const std::string& _internal_movementbasebonename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_movementbasebonename(const std::string& value);
  std::string* _internal_mutable_movementbasebonename();
  public:

  // optional .unrealpb.UnrealObjectRef animMontage = 2;
  bool has_animmontage() const;
  private:
  bool _internal_has_animmontage() const;
  public:
  void clear_animmontage();
  const ::unrealpb::UnrealObjectRef& animmontage() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_animmontage();
  ::unrealpb::UnrealObjectRef* mutable_animmontage();
  void set_allocated_animmontage(::unrealpb::UnrealObjectRef* animmontage);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_animmontage() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_animmontage();
  public:
  void unsafe_arena_set_allocated_animmontage(
      ::unrealpb::UnrealObjectRef* animmontage);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_animmontage();

  // optional .unrealpb.FVector location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::unrealpb::FVector& location() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_location();
  ::unrealpb::FVector* mutable_location();
  void set_allocated_location(::unrealpb::FVector* location);
  private:
  const ::unrealpb::FVector& _internal_location() const;
  ::unrealpb::FVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::unrealpb::FVector* location);
  ::unrealpb::FVector* unsafe_arena_release_location();

  // optional .unrealpb.FVector rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::unrealpb::FVector& rotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_rotation();
  ::unrealpb::FVector* mutable_rotation();
  void set_allocated_rotation(::unrealpb::FVector* rotation);
  private:
  const ::unrealpb::FVector& _internal_rotation() const;
  ::unrealpb::FVector* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::unrealpb::FVector* rotation);
  ::unrealpb::FVector* unsafe_arena_release_rotation();

  // optional .unrealpb.ActorComponentRef movementBase = 6;
  bool has_movementbase() const;
  private:
  bool _internal_has_movementbase() const;
  public:
  void clear_movementbase();
  const ::unrealpb::ActorComponentRef& movementbase() const;
  PROTOBUF_NODISCARD ::unrealpb::ActorComponentRef* release_movementbase();
  ::unrealpb::ActorComponentRef* mutable_movementbase();
  void set_allocated_movementbase(::unrealpb::ActorComponentRef* movementbase);
  private:
  const ::unrealpb::ActorComponentRef& _internal_movementbase() const;
  ::unrealpb::ActorComponentRef* _internal_mutable_movementbase();
  public:
  void unsafe_arena_set_allocated_movementbase(
      ::unrealpb::ActorComponentRef* movementbase);
  ::unrealpb::ActorComponentRef* unsafe_arena_release_movementbase();

  // optional .unrealpb.FRootMotionSourceGroup authoritativeRootMotion = 10;
  bool has_authoritativerootmotion() const;
  private:
  bool _internal_has_authoritativerootmotion() const;
  public:
  void clear_authoritativerootmotion();
  const ::unrealpb::FRootMotionSourceGroup& authoritativerootmotion() const;
  PROTOBUF_NODISCARD ::unrealpb::FRootMotionSourceGroup* release_authoritativerootmotion();
  ::unrealpb::FRootMotionSourceGroup* mutable_authoritativerootmotion();
  void set_allocated_authoritativerootmotion(::unrealpb::FRootMotionSourceGroup* authoritativerootmotion);
  private:
  const ::unrealpb::FRootMotionSourceGroup& _internal_authoritativerootmotion() const;
  ::unrealpb::FRootMotionSourceGroup* _internal_mutable_authoritativerootmotion();
  public:
  void unsafe_arena_set_allocated_authoritativerootmotion(
      ::unrealpb::FRootMotionSourceGroup* authoritativerootmotion);
  ::unrealpb::FRootMotionSourceGroup* unsafe_arena_release_authoritativerootmotion();

  // optional .unrealpb.FVector acceleration = 11;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::unrealpb::FVector& acceleration() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_acceleration();
  ::unrealpb::FVector* mutable_acceleration();
  void set_allocated_acceleration(::unrealpb::FVector* acceleration);
  private:
  const ::unrealpb::FVector& _internal_acceleration() const;
  ::unrealpb::FVector* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::unrealpb::FVector* acceleration);
  ::unrealpb::FVector* unsafe_arena_release_acceleration();

  // optional .unrealpb.FVector linearVelocity = 12;
  bool has_linearvelocity() const;
  private:
  bool _internal_has_linearvelocity() const;
  public:
  void clear_linearvelocity();
  const ::unrealpb::FVector& linearvelocity() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_linearvelocity();
  ::unrealpb::FVector* mutable_linearvelocity();
  void set_allocated_linearvelocity(::unrealpb::FVector* linearvelocity);
  private:
  const ::unrealpb::FVector& _internal_linearvelocity() const;
  ::unrealpb::FVector* _internal_mutable_linearvelocity();
  public:
  void unsafe_arena_set_allocated_linearvelocity(
      ::unrealpb::FVector* linearvelocity);
  ::unrealpb::FVector* unsafe_arena_release_linearvelocity();

  // optional float position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  float position() const;
  void set_position(float value);
  private:
  float _internal_position() const;
  void _internal_set_position(float value);
  public:

  // optional bool bIsActive = 1;
  bool has_bisactive() const;
  private:
  bool _internal_has_bisactive() const;
  public:
  void clear_bisactive();
  bool bisactive() const;
  void set_bisactive(bool value);
  private:
  bool _internal_bisactive() const;
  void _internal_set_bisactive(bool value);
  public:

  // optional bool bRelativePosition = 8;
  bool has_brelativeposition() const;
  private:
  bool _internal_has_brelativeposition() const;
  public:
  void clear_brelativeposition();
  bool brelativeposition() const;
  void set_brelativeposition(bool value);
  private:
  bool _internal_brelativeposition() const;
  void _internal_set_brelativeposition(bool value);
  public:

  // optional bool bRelativeRotation = 9;
  bool has_brelativerotation() const;
  private:
  bool _internal_has_brelativerotation() const;
  public:
  void clear_brelativerotation();
  bool brelativerotation() const;
  void set_brelativerotation(bool value);
  private:
  bool _internal_brelativerotation() const;
  void _internal_set_brelativerotation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FRepRootMotionMontage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr movementbasebonename_;
    ::unrealpb::UnrealObjectRef* animmontage_;
    ::unrealpb::FVector* location_;
    ::unrealpb::FVector* rotation_;
    ::unrealpb::ActorComponentRef* movementbase_;
    ::unrealpb::FRootMotionSourceGroup* authoritativerootmotion_;
    ::unrealpb::FVector* acceleration_;
    ::unrealpb::FVector* linearvelocity_;
    float position_;
    bool bisactive_;
    bool brelativeposition_;
    bool brelativerotation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API CharacterState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.CharacterState) */ {
 public:
  inline CharacterState() : CharacterState(nullptr) {}
  ~CharacterState() override;
  explicit PROTOBUF_CONSTEXPR CharacterState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterState(const CharacterState& from);
  CharacterState(CharacterState&& from) noexcept
    : CharacterState() {
    *this = ::std::move(from);
  }

  inline CharacterState& operator=(const CharacterState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterState& operator=(CharacterState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterState* internal_default_instance() {
    return reinterpret_cast<const CharacterState*>(
               &_CharacterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CharacterState& a, CharacterState& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterState& from) {
    CharacterState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.CharacterState";
  }
  protected:
  explicit CharacterState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootMotionFieldNumber = 2,
    kBasedMovementFieldNumber = 3,
    kServerLastTransformUpdateTimeStampFieldNumber = 4,
    kMovementModeFieldNumber = 5,
    kBIsCrouchedFieldNumber = 6,
    kBProxyIsJumpForceAppliedFieldNumber = 7,
    kAnimRootMotionTranslationScaleFieldNumber = 8,
    kReplayLastTransformUpdateTimeStampFieldNumber = 9,
  };
  // optional .unrealpb.FRepRootMotionMontage rootMotion = 2;
  bool has_rootmotion() const;
  private:
  bool _internal_has_rootmotion() const;
  public:
  void clear_rootmotion();
  const ::unrealpb::FRepRootMotionMontage& rootmotion() const;
  PROTOBUF_NODISCARD ::unrealpb::FRepRootMotionMontage* release_rootmotion();
  ::unrealpb::FRepRootMotionMontage* mutable_rootmotion();
  void set_allocated_rootmotion(::unrealpb::FRepRootMotionMontage* rootmotion);
  private:
  const ::unrealpb::FRepRootMotionMontage& _internal_rootmotion() const;
  ::unrealpb::FRepRootMotionMontage* _internal_mutable_rootmotion();
  public:
  void unsafe_arena_set_allocated_rootmotion(
      ::unrealpb::FRepRootMotionMontage* rootmotion);
  ::unrealpb::FRepRootMotionMontage* unsafe_arena_release_rootmotion();

  // optional .unrealpb.FBasedMovementInfo basedMovement = 3;
  bool has_basedmovement() const;
  private:
  bool _internal_has_basedmovement() const;
  public:
  void clear_basedmovement();
  const ::unrealpb::FBasedMovementInfo& basedmovement() const;
  PROTOBUF_NODISCARD ::unrealpb::FBasedMovementInfo* release_basedmovement();
  ::unrealpb::FBasedMovementInfo* mutable_basedmovement();
  void set_allocated_basedmovement(::unrealpb::FBasedMovementInfo* basedmovement);
  private:
  const ::unrealpb::FBasedMovementInfo& _internal_basedmovement() const;
  ::unrealpb::FBasedMovementInfo* _internal_mutable_basedmovement();
  public:
  void unsafe_arena_set_allocated_basedmovement(
      ::unrealpb::FBasedMovementInfo* basedmovement);
  ::unrealpb::FBasedMovementInfo* unsafe_arena_release_basedmovement();

  // optional float serverLastTransformUpdateTimeStamp = 4;
  bool has_serverlasttransformupdatetimestamp() const;
  private:
  bool _internal_has_serverlasttransformupdatetimestamp() const;
  public:
  void clear_serverlasttransformupdatetimestamp();
  float serverlasttransformupdatetimestamp() const;
  void set_serverlasttransformupdatetimestamp(float value);
  private:
  float _internal_serverlasttransformupdatetimestamp() const;
  void _internal_set_serverlasttransformupdatetimestamp(float value);
  public:

  // optional uint32 movementMode = 5;
  bool has_movementmode() const;
  private:
  bool _internal_has_movementmode() const;
  public:
  void clear_movementmode();
  uint32_t movementmode() const;
  void set_movementmode(uint32_t value);
  private:
  uint32_t _internal_movementmode() const;
  void _internal_set_movementmode(uint32_t value);
  public:

  // optional bool bIsCrouched = 6;
  bool has_biscrouched() const;
  private:
  bool _internal_has_biscrouched() const;
  public:
  void clear_biscrouched();
  bool biscrouched() const;
  void set_biscrouched(bool value);
  private:
  bool _internal_biscrouched() const;
  void _internal_set_biscrouched(bool value);
  public:

  // optional bool bProxyIsJumpForceApplied = 7;
  bool has_bproxyisjumpforceapplied() const;
  private:
  bool _internal_has_bproxyisjumpforceapplied() const;
  public:
  void clear_bproxyisjumpforceapplied();
  bool bproxyisjumpforceapplied() const;
  void set_bproxyisjumpforceapplied(bool value);
  private:
  bool _internal_bproxyisjumpforceapplied() const;
  void _internal_set_bproxyisjumpforceapplied(bool value);
  public:

  // optional float animRootMotionTranslationScale = 8;
  bool has_animrootmotiontranslationscale() const;
  private:
  bool _internal_has_animrootmotiontranslationscale() const;
  public:
  void clear_animrootmotiontranslationscale();
  float animrootmotiontranslationscale() const;
  void set_animrootmotiontranslationscale(float value);
  private:
  float _internal_animrootmotiontranslationscale() const;
  void _internal_set_animrootmotiontranslationscale(float value);
  public:

  // optional float replayLastTransformUpdateTimeStamp = 9;
  bool has_replaylasttransformupdatetimestamp() const;
  private:
  bool _internal_has_replaylasttransformupdatetimestamp() const;
  public:
  void clear_replaylasttransformupdatetimestamp();
  float replaylasttransformupdatetimestamp() const;
  void set_replaylasttransformupdatetimestamp(float value);
  private:
  float _internal_replaylasttransformupdatetimestamp() const;
  void _internal_set_replaylasttransformupdatetimestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.CharacterState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::FRepRootMotionMontage* rootmotion_;
    ::unrealpb::FBasedMovementInfo* basedmovement_;
    float serverlasttransformupdatetimestamp_;
    uint32_t movementmode_;
    bool biscrouched_;
    bool bproxyisjumpforceapplied_;
    float animrootmotiontranslationscale_;
    float replaylasttransformupdatetimestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Character_ServerMovePacked_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Character_ServerMovePacked_Params) */ {
 public:
  inline Character_ServerMovePacked_Params() : Character_ServerMovePacked_Params(nullptr) {}
  ~Character_ServerMovePacked_Params() override;
  explicit PROTOBUF_CONSTEXPR Character_ServerMovePacked_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character_ServerMovePacked_Params(const Character_ServerMovePacked_Params& from);
  Character_ServerMovePacked_Params(Character_ServerMovePacked_Params&& from) noexcept
    : Character_ServerMovePacked_Params() {
    *this = ::std::move(from);
  }

  inline Character_ServerMovePacked_Params& operator=(const Character_ServerMovePacked_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_ServerMovePacked_Params& operator=(Character_ServerMovePacked_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_ServerMovePacked_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_ServerMovePacked_Params* internal_default_instance() {
    return reinterpret_cast<const Character_ServerMovePacked_Params*>(
               &_Character_ServerMovePacked_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Character_ServerMovePacked_Params& a, Character_ServerMovePacked_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_ServerMovePacked_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_ServerMovePacked_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_ServerMovePacked_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_ServerMovePacked_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character_ServerMovePacked_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character_ServerMovePacked_Params& from) {
    Character_ServerMovePacked_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_ServerMovePacked_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Character_ServerMovePacked_Params";
  }
  protected:
  explicit Character_ServerMovePacked_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedBitsFieldNumber = 2,
    kBitsNumFieldNumber = 1,
  };
  // bytes packedBits = 2;
  void clear_packedbits();
  const std::string& packedbits() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packedbits(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packedbits();
  PROTOBUF_NODISCARD std::string* release_packedbits();
  void set_allocated_packedbits(std::string* packedbits);
  private:
  const std::string& _internal_packedbits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packedbits(const std::string& value);
  std::string* _internal_mutable_packedbits();
  public:

  // uint32 bitsNum = 1;
  void clear_bitsnum();
  uint32_t bitsnum() const;
  void set_bitsnum(uint32_t value);
  private:
  uint32_t _internal_bitsnum() const;
  void _internal_set_bitsnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.Character_ServerMovePacked_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packedbits_;
    uint32_t bitsnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Character_ClientMoveResponsePacked_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Character_ClientMoveResponsePacked_Params) */ {
 public:
  inline Character_ClientMoveResponsePacked_Params() : Character_ClientMoveResponsePacked_Params(nullptr) {}
  ~Character_ClientMoveResponsePacked_Params() override;
  explicit PROTOBUF_CONSTEXPR Character_ClientMoveResponsePacked_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character_ClientMoveResponsePacked_Params(const Character_ClientMoveResponsePacked_Params& from);
  Character_ClientMoveResponsePacked_Params(Character_ClientMoveResponsePacked_Params&& from) noexcept
    : Character_ClientMoveResponsePacked_Params() {
    *this = ::std::move(from);
  }

  inline Character_ClientMoveResponsePacked_Params& operator=(const Character_ClientMoveResponsePacked_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_ClientMoveResponsePacked_Params& operator=(Character_ClientMoveResponsePacked_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_ClientMoveResponsePacked_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_ClientMoveResponsePacked_Params* internal_default_instance() {
    return reinterpret_cast<const Character_ClientMoveResponsePacked_Params*>(
               &_Character_ClientMoveResponsePacked_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Character_ClientMoveResponsePacked_Params& a, Character_ClientMoveResponsePacked_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_ClientMoveResponsePacked_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_ClientMoveResponsePacked_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_ClientMoveResponsePacked_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_ClientMoveResponsePacked_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character_ClientMoveResponsePacked_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character_ClientMoveResponsePacked_Params& from) {
    Character_ClientMoveResponsePacked_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_ClientMoveResponsePacked_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Character_ClientMoveResponsePacked_Params";
  }
  protected:
  explicit Character_ClientMoveResponsePacked_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedBitsFieldNumber = 2,
    kBitsNumFieldNumber = 1,
  };
  // bytes packedBits = 2;
  void clear_packedbits();
  const std::string& packedbits() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packedbits(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packedbits();
  PROTOBUF_NODISCARD std::string* release_packedbits();
  void set_allocated_packedbits(std::string* packedbits);
  private:
  const std::string& _internal_packedbits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packedbits(const std::string& value);
  std::string* _internal_mutable_packedbits();
  public:

  // uint32 bitsNum = 1;
  void clear_bitsnum();
  uint32_t bitsnum() const;
  void set_bitsnum(uint32_t value);
  private:
  uint32_t _internal_bitsnum() const;
  void _internal_set_bitsnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.Character_ClientMoveResponsePacked_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packedbits_;
    uint32_t bitsnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerState) */ {
 public:
  inline PlayerState() : PlayerState(nullptr) {}
  ~PlayerState() override;
  explicit PROTOBUF_CONSTEXPR PlayerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerState(const PlayerState& from);
  PlayerState(PlayerState&& from) noexcept
    : PlayerState() {
    *this = ::std::move(from);
  }

  inline PlayerState& operator=(const PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerState& operator=(PlayerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerState* internal_default_instance() {
    return reinterpret_cast<const PlayerState*>(
               &_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PlayerState& a, PlayerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerState& from) {
    PlayerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerState";
  }
  protected:
  explicit PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 5,
    kScoreFieldNumber = 2,
    kPlayerIdFieldNumber = 3,
    kPingFieldNumber = 4,
  };
  // optional string playerName = 5;
  bool has_playername() const;
  private:
  bool _internal_has_playername() const;
  public:
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // optional float score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional int32 playerId = 3;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // optional uint32 ping = 4;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  uint32_t ping() const;
  void set_ping(uint32_t value);
  private:
  uint32_t _internal_ping() const;
  void _internal_set_ping(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    float score_;
    int32_t playerid_;
    uint32_t ping_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ControllerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.ControllerState) */ {
 public:
  inline ControllerState() : ControllerState(nullptr) {}
  ~ControllerState() override;
  explicit PROTOBUF_CONSTEXPR ControllerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerState(const ControllerState& from);
  ControllerState(ControllerState&& from) noexcept
    : ControllerState() {
    *this = ::std::move(from);
  }

  inline ControllerState& operator=(const ControllerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerState& operator=(ControllerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerState* internal_default_instance() {
    return reinterpret_cast<const ControllerState*>(
               &_ControllerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ControllerState& a, ControllerState& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerState& from) {
    ControllerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.ControllerState";
  }
  protected:
  explicit ControllerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStateFieldNumber = 2,
    kPawnFieldNumber = 3,
  };
  // .unrealpb.UnrealObjectRef playerState = 2;
  bool has_playerstate() const;
  private:
  bool _internal_has_playerstate() const;
  public:
  void clear_playerstate();
  const ::unrealpb::UnrealObjectRef& playerstate() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_playerstate();
  ::unrealpb::UnrealObjectRef* mutable_playerstate();
  void set_allocated_playerstate(::unrealpb::UnrealObjectRef* playerstate);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_playerstate() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_playerstate();
  public:
  void unsafe_arena_set_allocated_playerstate(
      ::unrealpb::UnrealObjectRef* playerstate);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_playerstate();

  // .unrealpb.UnrealObjectRef pawn = 3;
  bool has_pawn() const;
  private:
  bool _internal_has_pawn() const;
  public:
  void clear_pawn();
  const ::unrealpb::UnrealObjectRef& pawn() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_pawn();
  ::unrealpb::UnrealObjectRef* mutable_pawn();
  void set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_pawn() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_pawn();
  public:
  void unsafe_arena_set_allocated_pawn(
      ::unrealpb::UnrealObjectRef* pawn);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_pawn();

  // @@protoc_insertion_point(class_scope:unrealpb.ControllerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* playerstate_;
    ::unrealpb::UnrealObjectRef* pawn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Controller_ClientSetLocation_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Controller_ClientSetLocation_Params) */ {
 public:
  inline Controller_ClientSetLocation_Params() : Controller_ClientSetLocation_Params(nullptr) {}
  ~Controller_ClientSetLocation_Params() override;
  explicit PROTOBUF_CONSTEXPR Controller_ClientSetLocation_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Controller_ClientSetLocation_Params(const Controller_ClientSetLocation_Params& from);
  Controller_ClientSetLocation_Params(Controller_ClientSetLocation_Params&& from) noexcept
    : Controller_ClientSetLocation_Params() {
    *this = ::std::move(from);
  }

  inline Controller_ClientSetLocation_Params& operator=(const Controller_ClientSetLocation_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Controller_ClientSetLocation_Params& operator=(Controller_ClientSetLocation_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Controller_ClientSetLocation_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Controller_ClientSetLocation_Params* internal_default_instance() {
    return reinterpret_cast<const Controller_ClientSetLocation_Params*>(
               &_Controller_ClientSetLocation_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Controller_ClientSetLocation_Params& a, Controller_ClientSetLocation_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Controller_ClientSetLocation_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Controller_ClientSetLocation_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Controller_ClientSetLocation_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Controller_ClientSetLocation_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Controller_ClientSetLocation_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Controller_ClientSetLocation_Params& from) {
    Controller_ClientSetLocation_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Controller_ClientSetLocation_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Controller_ClientSetLocation_Params";
  }
  protected:
  explicit Controller_ClientSetLocation_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewLocationFieldNumber = 1,
    kNewRotationFieldNumber = 2,
  };
  // .unrealpb.FVector newLocation = 1;
  bool has_newlocation() const;
  private:
  bool _internal_has_newlocation() const;
  public:
  void clear_newlocation();
  const ::unrealpb::FVector& newlocation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newlocation();
  ::unrealpb::FVector* mutable_newlocation();
  void set_allocated_newlocation(::unrealpb::FVector* newlocation);
  private:
  const ::unrealpb::FVector& _internal_newlocation() const;
  ::unrealpb::FVector* _internal_mutable_newlocation();
  public:
  void unsafe_arena_set_allocated_newlocation(
      ::unrealpb::FVector* newlocation);
  ::unrealpb::FVector* unsafe_arena_release_newlocation();

  // .unrealpb.FVector newRotation = 2;
  bool has_newrotation() const;
  private:
  bool _internal_has_newrotation() const;
  public:
  void clear_newrotation();
  const ::unrealpb::FVector& newrotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newrotation();
  ::unrealpb::FVector* mutable_newrotation();
  void set_allocated_newrotation(::unrealpb::FVector* newrotation);
  private:
  const ::unrealpb::FVector& _internal_newrotation() const;
  ::unrealpb::FVector* _internal_mutable_newrotation();
  public:
  void unsafe_arena_set_allocated_newrotation(
      ::unrealpb::FVector* newrotation);
  ::unrealpb::FVector* unsafe_arena_release_newrotation();

  // @@protoc_insertion_point(class_scope:unrealpb.Controller_ClientSetLocation_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* newlocation_;
    ::unrealpb::FVector* newrotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Controller_ClientSetRotation_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Controller_ClientSetRotation_Params) */ {
 public:
  inline Controller_ClientSetRotation_Params() : Controller_ClientSetRotation_Params(nullptr) {}
  ~Controller_ClientSetRotation_Params() override;
  explicit PROTOBUF_CONSTEXPR Controller_ClientSetRotation_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Controller_ClientSetRotation_Params(const Controller_ClientSetRotation_Params& from);
  Controller_ClientSetRotation_Params(Controller_ClientSetRotation_Params&& from) noexcept
    : Controller_ClientSetRotation_Params() {
    *this = ::std::move(from);
  }

  inline Controller_ClientSetRotation_Params& operator=(const Controller_ClientSetRotation_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Controller_ClientSetRotation_Params& operator=(Controller_ClientSetRotation_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Controller_ClientSetRotation_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Controller_ClientSetRotation_Params* internal_default_instance() {
    return reinterpret_cast<const Controller_ClientSetRotation_Params*>(
               &_Controller_ClientSetRotation_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Controller_ClientSetRotation_Params& a, Controller_ClientSetRotation_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Controller_ClientSetRotation_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Controller_ClientSetRotation_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Controller_ClientSetRotation_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Controller_ClientSetRotation_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Controller_ClientSetRotation_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Controller_ClientSetRotation_Params& from) {
    Controller_ClientSetRotation_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Controller_ClientSetRotation_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Controller_ClientSetRotation_Params";
  }
  protected:
  explicit Controller_ClientSetRotation_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewRotationFieldNumber = 1,
    kBResetCameraFieldNumber = 2,
  };
  // .unrealpb.FVector newRotation = 1;
  bool has_newrotation() const;
  private:
  bool _internal_has_newrotation() const;
  public:
  void clear_newrotation();
  const ::unrealpb::FVector& newrotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newrotation();
  ::unrealpb::FVector* mutable_newrotation();
  void set_allocated_newrotation(::unrealpb::FVector* newrotation);
  private:
  const ::unrealpb::FVector& _internal_newrotation() const;
  ::unrealpb::FVector* _internal_mutable_newrotation();
  public:
  void unsafe_arena_set_allocated_newrotation(
      ::unrealpb::FVector* newrotation);
  ::unrealpb::FVector* unsafe_arena_release_newrotation();

  // bool bResetCamera = 2;
  void clear_bresetcamera();
  bool bresetcamera() const;
  void set_bresetcamera(bool value);
  private:
  bool _internal_bresetcamera() const;
  void _internal_set_bresetcamera(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.Controller_ClientSetRotation_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* newrotation_;
    bool bresetcamera_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerControllerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerControllerState) */ {
 public:
  inline PlayerControllerState() : PlayerControllerState(nullptr) {}
  ~PlayerControllerState() override;
  explicit PROTOBUF_CONSTEXPR PlayerControllerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerControllerState(const PlayerControllerState& from);
  PlayerControllerState(PlayerControllerState&& from) noexcept
    : PlayerControllerState() {
    *this = ::std::move(from);
  }

  inline PlayerControllerState& operator=(const PlayerControllerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerControllerState& operator=(PlayerControllerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerControllerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerControllerState* internal_default_instance() {
    return reinterpret_cast<const PlayerControllerState*>(
               &_PlayerControllerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PlayerControllerState& a, PlayerControllerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerControllerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerControllerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerControllerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerControllerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerControllerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerControllerState& from) {
    PlayerControllerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerControllerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerControllerState";
  }
  protected:
  explicit PlayerControllerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetViewRotationFieldNumber = 2,
    kSpawnLocationFieldNumber = 3,
  };
  // optional .unrealpb.FVector targetViewRotation = 2;
  bool has_targetviewrotation() const;
  private:
  bool _internal_has_targetviewrotation() const;
  public:
  void clear_targetviewrotation();
  const ::unrealpb::FVector& targetviewrotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_targetviewrotation();
  ::unrealpb::FVector* mutable_targetviewrotation();
  void set_allocated_targetviewrotation(::unrealpb::FVector* targetviewrotation);
  private:
  const ::unrealpb::FVector& _internal_targetviewrotation() const;
  ::unrealpb::FVector* _internal_mutable_targetviewrotation();
  public:
  void unsafe_arena_set_allocated_targetviewrotation(
      ::unrealpb::FVector* targetviewrotation);
  ::unrealpb::FVector* unsafe_arena_release_targetviewrotation();

  // optional .unrealpb.FVector spawnLocation = 3;
  bool has_spawnlocation() const;
  private:
  bool _internal_has_spawnlocation() const;
  public:
  void clear_spawnlocation();
  const ::unrealpb::FVector& spawnlocation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_spawnlocation();
  ::unrealpb::FVector* mutable_spawnlocation();
  void set_allocated_spawnlocation(::unrealpb::FVector* spawnlocation);
  private:
  const ::unrealpb::FVector& _internal_spawnlocation() const;
  ::unrealpb::FVector* _internal_mutable_spawnlocation();
  public:
  void unsafe_arena_set_allocated_spawnlocation(
      ::unrealpb::FVector* spawnlocation);
  ::unrealpb::FVector* unsafe_arena_release_spawnlocation();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerControllerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::FVector* targetviewrotation_;
    ::unrealpb::FVector* spawnlocation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ServerUpdateCamera_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ServerUpdateCamera_Params) */ {
 public:
  inline PlayerController_ServerUpdateCamera_Params() : PlayerController_ServerUpdateCamera_Params(nullptr) {}
  ~PlayerController_ServerUpdateCamera_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ServerUpdateCamera_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ServerUpdateCamera_Params(const PlayerController_ServerUpdateCamera_Params& from);
  PlayerController_ServerUpdateCamera_Params(PlayerController_ServerUpdateCamera_Params&& from) noexcept
    : PlayerController_ServerUpdateCamera_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ServerUpdateCamera_Params& operator=(const PlayerController_ServerUpdateCamera_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ServerUpdateCamera_Params& operator=(PlayerController_ServerUpdateCamera_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ServerUpdateCamera_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ServerUpdateCamera_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ServerUpdateCamera_Params*>(
               &_PlayerController_ServerUpdateCamera_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PlayerController_ServerUpdateCamera_Params& a, PlayerController_ServerUpdateCamera_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ServerUpdateCamera_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ServerUpdateCamera_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ServerUpdateCamera_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ServerUpdateCamera_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ServerUpdateCamera_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ServerUpdateCamera_Params& from) {
    PlayerController_ServerUpdateCamera_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ServerUpdateCamera_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ServerUpdateCamera_Params";
  }
  protected:
  explicit PlayerController_ServerUpdateCamera_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamLocFieldNumber = 1,
    kCamPitchAndYawFieldNumber = 2,
  };
  // .unrealpb.FVector camLoc = 1;
  bool has_camloc() const;
  private:
  bool _internal_has_camloc() const;
  public:
  void clear_camloc();
  const ::unrealpb::FVector& camloc() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_camloc();
  ::unrealpb::FVector* mutable_camloc();
  void set_allocated_camloc(::unrealpb::FVector* camloc);
  private:
  const ::unrealpb::FVector& _internal_camloc() const;
  ::unrealpb::FVector* _internal_mutable_camloc();
  public:
  void unsafe_arena_set_allocated_camloc(
      ::unrealpb::FVector* camloc);
  ::unrealpb::FVector* unsafe_arena_release_camloc();

  // int32 camPitchAndYaw = 2;
  void clear_campitchandyaw();
  int32_t campitchandyaw() const;
  void set_campitchandyaw(int32_t value);
  private:
  int32_t _internal_campitchandyaw() const;
  void _internal_set_campitchandyaw(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ServerUpdateCamera_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* camloc_;
    int32_t campitchandyaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientSetHUD_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientSetHUD_Params) */ {
 public:
  inline PlayerController_ClientSetHUD_Params() : PlayerController_ClientSetHUD_Params(nullptr) {}
  ~PlayerController_ClientSetHUD_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientSetHUD_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientSetHUD_Params(const PlayerController_ClientSetHUD_Params& from);
  PlayerController_ClientSetHUD_Params(PlayerController_ClientSetHUD_Params&& from) noexcept
    : PlayerController_ClientSetHUD_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientSetHUD_Params& operator=(const PlayerController_ClientSetHUD_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientSetHUD_Params& operator=(PlayerController_ClientSetHUD_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientSetHUD_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientSetHUD_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientSetHUD_Params*>(
               &_PlayerController_ClientSetHUD_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PlayerController_ClientSetHUD_Params& a, PlayerController_ClientSetHUD_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientSetHUD_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientSetHUD_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientSetHUD_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientSetHUD_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientSetHUD_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientSetHUD_Params& from) {
    PlayerController_ClientSetHUD_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientSetHUD_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientSetHUD_Params";
  }
  protected:
  explicit PlayerController_ClientSetHUD_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHudClassNameFieldNumber = 1,
  };
  // optional string hudClassName = 1;
  bool has_hudclassname() const;
  private:
  bool _internal_has_hudclassname() const;
  public:
  void clear_hudclassname();
  const std::string& hudclassname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hudclassname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hudclassname();
  PROTOBUF_NODISCARD std::string* release_hudclassname();
  void set_allocated_hudclassname(std::string* hudclassname);
  private:
  const std::string& _internal_hudclassname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hudclassname(const std::string& value);
  std::string* _internal_mutable_hudclassname();
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientSetHUD_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hudclassname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientSetViewTarget_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientSetViewTarget_Params) */ {
 public:
  inline PlayerController_ClientSetViewTarget_Params() : PlayerController_ClientSetViewTarget_Params(nullptr) {}
  ~PlayerController_ClientSetViewTarget_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientSetViewTarget_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientSetViewTarget_Params(const PlayerController_ClientSetViewTarget_Params& from);
  PlayerController_ClientSetViewTarget_Params(PlayerController_ClientSetViewTarget_Params&& from) noexcept
    : PlayerController_ClientSetViewTarget_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientSetViewTarget_Params& operator=(const PlayerController_ClientSetViewTarget_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientSetViewTarget_Params& operator=(PlayerController_ClientSetViewTarget_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientSetViewTarget_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientSetViewTarget_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientSetViewTarget_Params*>(
               &_PlayerController_ClientSetViewTarget_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PlayerController_ClientSetViewTarget_Params& a, PlayerController_ClientSetViewTarget_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientSetViewTarget_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientSetViewTarget_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientSetViewTarget_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientSetViewTarget_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientSetViewTarget_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientSetViewTarget_Params& from) {
    PlayerController_ClientSetViewTarget_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientSetViewTarget_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientSetViewTarget_Params";
  }
  protected:
  explicit PlayerController_ClientSetViewTarget_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kBlendTimeFieldNumber = 2,
    kBlendFunctionFieldNumber = 3,
    kBlendExpFieldNumber = 4,
    kBLockOutgoingFieldNumber = 5,
  };
  // .unrealpb.UnrealObjectRef actor = 1;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::unrealpb::UnrealObjectRef& actor() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_actor();
  ::unrealpb::UnrealObjectRef* mutable_actor();
  void set_allocated_actor(::unrealpb::UnrealObjectRef* actor);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_actor() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::unrealpb::UnrealObjectRef* actor);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_actor();

  // float blendTime = 2;
  void clear_blendtime();
  float blendtime() const;
  void set_blendtime(float value);
  private:
  float _internal_blendtime() const;
  void _internal_set_blendtime(float value);
  public:

  // uint32 blendFunction = 3;
  void clear_blendfunction();
  uint32_t blendfunction() const;
  void set_blendfunction(uint32_t value);
  private:
  uint32_t _internal_blendfunction() const;
  void _internal_set_blendfunction(uint32_t value);
  public:

  // float blendExp = 4;
  void clear_blendexp();
  float blendexp() const;
  void set_blendexp(float value);
  private:
  float _internal_blendexp() const;
  void _internal_set_blendexp(float value);
  public:

  // bool bLockOutgoing = 5;
  void clear_blockoutgoing();
  bool blockoutgoing() const;
  void set_blockoutgoing(bool value);
  private:
  bool _internal_blockoutgoing() const;
  void _internal_set_blockoutgoing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientSetViewTarget_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* actor_;
    float blendtime_;
    uint32_t blendfunction_;
    float blendexp_;
    bool blockoutgoing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientEnableNetworkVoice_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientEnableNetworkVoice_Params) */ {
 public:
  inline PlayerController_ClientEnableNetworkVoice_Params() : PlayerController_ClientEnableNetworkVoice_Params(nullptr) {}
  ~PlayerController_ClientEnableNetworkVoice_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientEnableNetworkVoice_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientEnableNetworkVoice_Params(const PlayerController_ClientEnableNetworkVoice_Params& from);
  PlayerController_ClientEnableNetworkVoice_Params(PlayerController_ClientEnableNetworkVoice_Params&& from) noexcept
    : PlayerController_ClientEnableNetworkVoice_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientEnableNetworkVoice_Params& operator=(const PlayerController_ClientEnableNetworkVoice_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientEnableNetworkVoice_Params& operator=(PlayerController_ClientEnableNetworkVoice_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientEnableNetworkVoice_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientEnableNetworkVoice_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientEnableNetworkVoice_Params*>(
               &_PlayerController_ClientEnableNetworkVoice_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(PlayerController_ClientEnableNetworkVoice_Params& a, PlayerController_ClientEnableNetworkVoice_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientEnableNetworkVoice_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientEnableNetworkVoice_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientEnableNetworkVoice_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientEnableNetworkVoice_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientEnableNetworkVoice_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientEnableNetworkVoice_Params& from) {
    PlayerController_ClientEnableNetworkVoice_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientEnableNetworkVoice_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientEnableNetworkVoice_Params";
  }
  protected:
  explicit PlayerController_ClientEnableNetworkVoice_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  private:
  bool _internal_has_benable() const;
  public:
  void clear_benable();
  bool benable() const;
  void set_benable(bool value);
  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientEnableNetworkVoice_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientCapBandwidth_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientCapBandwidth_Params) */ {
 public:
  inline PlayerController_ClientCapBandwidth_Params() : PlayerController_ClientCapBandwidth_Params(nullptr) {}
  ~PlayerController_ClientCapBandwidth_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientCapBandwidth_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientCapBandwidth_Params(const PlayerController_ClientCapBandwidth_Params& from);
  PlayerController_ClientCapBandwidth_Params(PlayerController_ClientCapBandwidth_Params&& from) noexcept
    : PlayerController_ClientCapBandwidth_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientCapBandwidth_Params& operator=(const PlayerController_ClientCapBandwidth_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientCapBandwidth_Params& operator=(PlayerController_ClientCapBandwidth_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientCapBandwidth_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientCapBandwidth_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientCapBandwidth_Params*>(
               &_PlayerController_ClientCapBandwidth_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PlayerController_ClientCapBandwidth_Params& a, PlayerController_ClientCapBandwidth_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientCapBandwidth_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientCapBandwidth_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientCapBandwidth_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientCapBandwidth_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientCapBandwidth_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientCapBandwidth_Params& from) {
    PlayerController_ClientCapBandwidth_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientCapBandwidth_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientCapBandwidth_Params";
  }
  protected:
  explicit PlayerController_ClientCapBandwidth_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapFieldNumber = 1,
  };
  // int32 cap = 1;
  void clear_cap();
  int32_t cap() const;
  void set_cap(int32_t value);
  private:
  int32_t _internal_cap() const;
  void _internal_set_cap(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientCapBandwidth_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientRestart_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientRestart_Params) */ {
 public:
  inline PlayerController_ClientRestart_Params() : PlayerController_ClientRestart_Params(nullptr) {}
  ~PlayerController_ClientRestart_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientRestart_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientRestart_Params(const PlayerController_ClientRestart_Params& from);
  PlayerController_ClientRestart_Params(PlayerController_ClientRestart_Params&& from) noexcept
    : PlayerController_ClientRestart_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientRestart_Params& operator=(const PlayerController_ClientRestart_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientRestart_Params& operator=(PlayerController_ClientRestart_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientRestart_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientRestart_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientRestart_Params*>(
               &_PlayerController_ClientRestart_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PlayerController_ClientRestart_Params& a, PlayerController_ClientRestart_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientRestart_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientRestart_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientRestart_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientRestart_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientRestart_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientRestart_Params& from) {
    PlayerController_ClientRestart_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientRestart_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientRestart_Params";
  }
  protected:
  explicit PlayerController_ClientRestart_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPawnFieldNumber = 1,
  };
  // .unrealpb.UnrealObjectRef pawn = 1;
  bool has_pawn() const;
  private:
  bool _internal_has_pawn() const;
  public:
  void clear_pawn();
  const ::unrealpb::UnrealObjectRef& pawn() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_pawn();
  ::unrealpb::UnrealObjectRef* mutable_pawn();
  void set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_pawn() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_pawn();
  public:
  void unsafe_arena_set_allocated_pawn(
      ::unrealpb::UnrealObjectRef* pawn);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_pawn();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientRestart_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* pawn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientSetCameraMode_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientSetCameraMode_Params) */ {
 public:
  inline PlayerController_ClientSetCameraMode_Params() : PlayerController_ClientSetCameraMode_Params(nullptr) {}
  ~PlayerController_ClientSetCameraMode_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientSetCameraMode_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientSetCameraMode_Params(const PlayerController_ClientSetCameraMode_Params& from);
  PlayerController_ClientSetCameraMode_Params(PlayerController_ClientSetCameraMode_Params&& from) noexcept
    : PlayerController_ClientSetCameraMode_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientSetCameraMode_Params& operator=(const PlayerController_ClientSetCameraMode_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientSetCameraMode_Params& operator=(PlayerController_ClientSetCameraMode_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientSetCameraMode_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientSetCameraMode_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientSetCameraMode_Params*>(
               &_PlayerController_ClientSetCameraMode_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PlayerController_ClientSetCameraMode_Params& a, PlayerController_ClientSetCameraMode_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientSetCameraMode_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientSetCameraMode_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientSetCameraMode_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientSetCameraMode_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientSetCameraMode_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientSetCameraMode_Params& from) {
    PlayerController_ClientSetCameraMode_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientSetCameraMode_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientSetCameraMode_Params";
  }
  protected:
  explicit PlayerController_ClientSetCameraMode_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewCamModeFieldNumber = 1,
  };
  // string newCamMode = 1;
  void clear_newcammode();
  const std::string& newcammode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newcammode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newcammode();
  PROTOBUF_NODISCARD std::string* release_newcammode();
  void set_allocated_newcammode(std::string* newcammode);
  private:
  const std::string& _internal_newcammode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newcammode(const std::string& value);
  std::string* _internal_mutable_newcammode();
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientSetCameraMode_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newcammode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientRetryClientRestart_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientRetryClientRestart_Params) */ {
 public:
  inline PlayerController_ClientRetryClientRestart_Params() : PlayerController_ClientRetryClientRestart_Params(nullptr) {}
  ~PlayerController_ClientRetryClientRestart_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientRetryClientRestart_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientRetryClientRestart_Params(const PlayerController_ClientRetryClientRestart_Params& from);
  PlayerController_ClientRetryClientRestart_Params(PlayerController_ClientRetryClientRestart_Params&& from) noexcept
    : PlayerController_ClientRetryClientRestart_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientRetryClientRestart_Params& operator=(const PlayerController_ClientRetryClientRestart_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientRetryClientRestart_Params& operator=(PlayerController_ClientRetryClientRestart_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientRetryClientRestart_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientRetryClientRestart_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientRetryClientRestart_Params*>(
               &_PlayerController_ClientRetryClientRestart_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PlayerController_ClientRetryClientRestart_Params& a, PlayerController_ClientRetryClientRestart_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientRetryClientRestart_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientRetryClientRestart_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientRetryClientRestart_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientRetryClientRestart_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientRetryClientRestart_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientRetryClientRestart_Params& from) {
    PlayerController_ClientRetryClientRestart_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientRetryClientRestart_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientRetryClientRestart_Params";
  }
  protected:
  explicit PlayerController_ClientRetryClientRestart_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPawnFieldNumber = 1,
  };
  // .unrealpb.UnrealObjectRef pawn = 1;
  bool has_pawn() const;
  private:
  bool _internal_has_pawn() const;
  public:
  void clear_pawn();
  const ::unrealpb::UnrealObjectRef& pawn() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_pawn();
  ::unrealpb::UnrealObjectRef* mutable_pawn();
  void set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_pawn() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_pawn();
  public:
  void unsafe_arena_set_allocated_pawn(
      ::unrealpb::UnrealObjectRef* pawn);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_pawn();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientRetryClientRestart_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* pawn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ServerSetSpectatorLocation_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ServerSetSpectatorLocation_Params) */ {
 public:
  inline PlayerController_ServerSetSpectatorLocation_Params() : PlayerController_ServerSetSpectatorLocation_Params(nullptr) {}
  ~PlayerController_ServerSetSpectatorLocation_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ServerSetSpectatorLocation_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ServerSetSpectatorLocation_Params(const PlayerController_ServerSetSpectatorLocation_Params& from);
  PlayerController_ServerSetSpectatorLocation_Params(PlayerController_ServerSetSpectatorLocation_Params&& from) noexcept
    : PlayerController_ServerSetSpectatorLocation_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ServerSetSpectatorLocation_Params& operator=(const PlayerController_ServerSetSpectatorLocation_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ServerSetSpectatorLocation_Params& operator=(PlayerController_ServerSetSpectatorLocation_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ServerSetSpectatorLocation_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ServerSetSpectatorLocation_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ServerSetSpectatorLocation_Params*>(
               &_PlayerController_ServerSetSpectatorLocation_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PlayerController_ServerSetSpectatorLocation_Params& a, PlayerController_ServerSetSpectatorLocation_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ServerSetSpectatorLocation_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ServerSetSpectatorLocation_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ServerSetSpectatorLocation_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ServerSetSpectatorLocation_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ServerSetSpectatorLocation_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ServerSetSpectatorLocation_Params& from) {
    PlayerController_ServerSetSpectatorLocation_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ServerSetSpectatorLocation_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ServerSetSpectatorLocation_Params";
  }
  protected:
  explicit PlayerController_ServerSetSpectatorLocation_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewLocFieldNumber = 1,
    kNewRotFieldNumber = 2,
  };
  // .unrealpb.FVector newLoc = 1;
  bool has_newloc() const;
  private:
  bool _internal_has_newloc() const;
  public:
  void clear_newloc();
  const ::unrealpb::FVector& newloc() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newloc();
  ::unrealpb::FVector* mutable_newloc();
  void set_allocated_newloc(::unrealpb::FVector* newloc);
  private:
  const ::unrealpb::FVector& _internal_newloc() const;
  ::unrealpb::FVector* _internal_mutable_newloc();
  public:
  void unsafe_arena_set_allocated_newloc(
      ::unrealpb::FVector* newloc);
  ::unrealpb::FVector* unsafe_arena_release_newloc();

  // .unrealpb.FVector newRot = 2;
  bool has_newrot() const;
  private:
  bool _internal_has_newrot() const;
  public:
  void clear_newrot();
  const ::unrealpb::FVector& newrot() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newrot();
  ::unrealpb::FVector* mutable_newrot();
  void set_allocated_newrot(::unrealpb::FVector* newrot);
  private:
  const ::unrealpb::FVector& _internal_newrot() const;
  ::unrealpb::FVector* _internal_mutable_newrot();
  public:
  void unsafe_arena_set_allocated_newrot(
      ::unrealpb::FVector* newrot);
  ::unrealpb::FVector* unsafe_arena_release_newrot();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ServerSetSpectatorLocation_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* newloc_;
    ::unrealpb::FVector* newrot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ServerAcknowledgePossession_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ServerAcknowledgePossession_Params) */ {
 public:
  inline PlayerController_ServerAcknowledgePossession_Params() : PlayerController_ServerAcknowledgePossession_Params(nullptr) {}
  ~PlayerController_ServerAcknowledgePossession_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ServerAcknowledgePossession_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ServerAcknowledgePossession_Params(const PlayerController_ServerAcknowledgePossession_Params& from);
  PlayerController_ServerAcknowledgePossession_Params(PlayerController_ServerAcknowledgePossession_Params&& from) noexcept
    : PlayerController_ServerAcknowledgePossession_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ServerAcknowledgePossession_Params& operator=(const PlayerController_ServerAcknowledgePossession_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ServerAcknowledgePossession_Params& operator=(PlayerController_ServerAcknowledgePossession_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ServerAcknowledgePossession_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ServerAcknowledgePossession_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ServerAcknowledgePossession_Params*>(
               &_PlayerController_ServerAcknowledgePossession_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PlayerController_ServerAcknowledgePossession_Params& a, PlayerController_ServerAcknowledgePossession_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ServerAcknowledgePossession_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ServerAcknowledgePossession_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ServerAcknowledgePossession_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ServerAcknowledgePossession_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ServerAcknowledgePossession_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ServerAcknowledgePossession_Params& from) {
    PlayerController_ServerAcknowledgePossession_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ServerAcknowledgePossession_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ServerAcknowledgePossession_Params";
  }
  protected:
  explicit PlayerController_ServerAcknowledgePossession_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPawnFieldNumber = 1,
  };
  // .unrealpb.UnrealObjectRef pawn = 1;
  bool has_pawn() const;
  private:
  bool _internal_has_pawn() const;
  public:
  void clear_pawn();
  const ::unrealpb::UnrealObjectRef& pawn() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_pawn();
  ::unrealpb::UnrealObjectRef* mutable_pawn();
  void set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_pawn() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_pawn();
  public:
  void unsafe_arena_set_allocated_pawn(
      ::unrealpb::UnrealObjectRef* pawn);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_pawn();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ServerAcknowledgePossession_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* pawn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientGotoState_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientGotoState_Params) */ {
 public:
  inline PlayerController_ClientGotoState_Params() : PlayerController_ClientGotoState_Params(nullptr) {}
  ~PlayerController_ClientGotoState_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientGotoState_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientGotoState_Params(const PlayerController_ClientGotoState_Params& from);
  PlayerController_ClientGotoState_Params(PlayerController_ClientGotoState_Params&& from) noexcept
    : PlayerController_ClientGotoState_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientGotoState_Params& operator=(const PlayerController_ClientGotoState_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientGotoState_Params& operator=(PlayerController_ClientGotoState_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientGotoState_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientGotoState_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientGotoState_Params*>(
               &_PlayerController_ClientGotoState_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(PlayerController_ClientGotoState_Params& a, PlayerController_ClientGotoState_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientGotoState_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientGotoState_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientGotoState_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientGotoState_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientGotoState_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientGotoState_Params& from) {
    PlayerController_ClientGotoState_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientGotoState_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientGotoState_Params";
  }
  protected:
  explicit PlayerController_ClientGotoState_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewStateFieldNumber = 1,
  };
  // string newState = 1;
  void clear_newstate();
  const std::string& newstate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newstate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newstate();
  PROTOBUF_NODISCARD std::string* release_newstate();
  void set_allocated_newstate(std::string* newstate);
  private:
  const std::string& _internal_newstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newstate(const std::string& value);
  std::string* _internal_mutable_newstate();
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientGotoState_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newstate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientReceiveLocalizedMessage_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params) */ {
 public:
  inline PlayerController_ClientReceiveLocalizedMessage_Params() : PlayerController_ClientReceiveLocalizedMessage_Params(nullptr) {}
  ~PlayerController_ClientReceiveLocalizedMessage_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientReceiveLocalizedMessage_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientReceiveLocalizedMessage_Params(const PlayerController_ClientReceiveLocalizedMessage_Params& from);
  PlayerController_ClientReceiveLocalizedMessage_Params(PlayerController_ClientReceiveLocalizedMessage_Params&& from) noexcept
    : PlayerController_ClientReceiveLocalizedMessage_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientReceiveLocalizedMessage_Params& operator=(const PlayerController_ClientReceiveLocalizedMessage_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientReceiveLocalizedMessage_Params& operator=(PlayerController_ClientReceiveLocalizedMessage_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientReceiveLocalizedMessage_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientReceiveLocalizedMessage_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientReceiveLocalizedMessage_Params*>(
               &_PlayerController_ClientReceiveLocalizedMessage_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(PlayerController_ClientReceiveLocalizedMessage_Params& a, PlayerController_ClientReceiveLocalizedMessage_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientReceiveLocalizedMessage_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientReceiveLocalizedMessage_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientReceiveLocalizedMessage_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientReceiveLocalizedMessage_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientReceiveLocalizedMessage_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientReceiveLocalizedMessage_Params& from) {
    PlayerController_ClientReceiveLocalizedMessage_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientReceiveLocalizedMessage_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params";
  }
  protected:
  explicit PlayerController_ClientReceiveLocalizedMessage_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kRelatedPlayerState1FieldNumber = 3,
    kRelatedPlayerState2FieldNumber = 4,
    kOptionalObjectFieldNumber = 5,
    kSwitchFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .unrealpb.UnrealObjectRef relatedPlayerState_1 = 3;
  bool has_relatedplayerstate_1() const;
  private:
  bool _internal_has_relatedplayerstate_1() const;
  public:
  void clear_relatedplayerstate_1();
  const ::unrealpb::UnrealObjectRef& relatedplayerstate_1() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_relatedplayerstate_1();
  ::unrealpb::UnrealObjectRef* mutable_relatedplayerstate_1();
  void set_allocated_relatedplayerstate_1(::unrealpb::UnrealObjectRef* relatedplayerstate_1);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_relatedplayerstate_1() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_relatedplayerstate_1();
  public:
  void unsafe_arena_set_allocated_relatedplayerstate_1(
      ::unrealpb::UnrealObjectRef* relatedplayerstate_1);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_relatedplayerstate_1();

  // .unrealpb.UnrealObjectRef relatedPlayerState_2 = 4;
  bool has_relatedplayerstate_2() const;
  private:
  bool _internal_has_relatedplayerstate_2() const;
  public:
  void clear_relatedplayerstate_2();
  const ::unrealpb::UnrealObjectRef& relatedplayerstate_2() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_relatedplayerstate_2();
  ::unrealpb::UnrealObjectRef* mutable_relatedplayerstate_2();
  void set_allocated_relatedplayerstate_2(::unrealpb::UnrealObjectRef* relatedplayerstate_2);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_relatedplayerstate_2() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_relatedplayerstate_2();
  public:
  void unsafe_arena_set_allocated_relatedplayerstate_2(
      ::unrealpb::UnrealObjectRef* relatedplayerstate_2);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_relatedplayerstate_2();

  // .unrealpb.UnrealObjectRef optionalObject = 5;
  bool has_optionalobject() const;
  private:
  bool _internal_has_optionalobject() const;
  public:
  void clear_optionalobject();
  const ::unrealpb::UnrealObjectRef& optionalobject() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_optionalobject();
  ::unrealpb::UnrealObjectRef* mutable_optionalobject();
  void set_allocated_optionalobject(::unrealpb::UnrealObjectRef* optionalobject);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_optionalobject() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_optionalobject();
  public:
  void unsafe_arena_set_allocated_optionalobject(
      ::unrealpb::UnrealObjectRef* optionalobject);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_optionalobject();

  // int32 switch = 2;
  void clear_switch_();
  int32_t switch_() const;
  void set_switch_(int32_t value);
  private:
  int32_t _internal_switch_() const;
  void _internal_set_switch_(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::unrealpb::UnrealObjectRef* relatedplayerstate_1_;
    ::unrealpb::UnrealObjectRef* relatedplayerstate_2_;
    ::unrealpb::UnrealObjectRef* optionalobject_;
    int32_t switch__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API GameStateBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.GameStateBase) */ {
 public:
  inline GameStateBase() : GameStateBase(nullptr) {}
  ~GameStateBase() override;
  explicit PROTOBUF_CONSTEXPR GameStateBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStateBase(const GameStateBase& from);
  GameStateBase(GameStateBase&& from) noexcept
    : GameStateBase() {
    *this = ::std::move(from);
  }

  inline GameStateBase& operator=(const GameStateBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStateBase& operator=(GameStateBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStateBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStateBase* internal_default_instance() {
    return reinterpret_cast<const GameStateBase*>(
               &_GameStateBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GameStateBase& a, GameStateBase& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStateBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStateBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStateBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameStateBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameStateBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameStateBase& from) {
    GameStateBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStateBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.GameStateBase";
  }
  protected:
  explicit GameStateBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectatorClassNameFieldNumber = 2,
    kGameModeClassNameFieldNumber = 3,
    kReplicatedWorldTimeSecondsFieldNumber = 4,
    kBReplicatedHasBegunPlayFieldNumber = 5,
  };
  // optional string spectatorClassName = 2;
  bool has_spectatorclassname() const;
  private:
  bool _internal_has_spectatorclassname() const;
  public:
  void clear_spectatorclassname();
  const std::string& spectatorclassname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spectatorclassname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spectatorclassname();
  PROTOBUF_NODISCARD std::string* release_spectatorclassname();
  void set_allocated_spectatorclassname(std::string* spectatorclassname);
  private:
  const std::string& _internal_spectatorclassname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spectatorclassname(const std::string& value);
  std::string* _internal_mutable_spectatorclassname();
  public:

  // optional string gameModeClassName = 3;
  bool has_gamemodeclassname() const;
  private:
  bool _internal_has_gamemodeclassname() const;
  public:
  void clear_gamemodeclassname();
  const std::string& gamemodeclassname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamemodeclassname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamemodeclassname();
  PROTOBUF_NODISCARD std::string* release_gamemodeclassname();
  void set_allocated_gamemodeclassname(std::string* gamemodeclassname);
  private:
  const std::string& _internal_gamemodeclassname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamemodeclassname(const std::string& value);
  std::string* _internal_mutable_gamemodeclassname();
  public:

  // optional float replicatedWorldTimeSeconds = 4;
  bool has_replicatedworldtimeseconds() const;
  private:
  bool _internal_has_replicatedworldtimeseconds() const;
  public:
  void clear_replicatedworldtimeseconds();
  float replicatedworldtimeseconds() const;
  void set_replicatedworldtimeseconds(float value);
  private:
  float _internal_replicatedworldtimeseconds() const;
  void _internal_set_replicatedworldtimeseconds(float value);
  public:

  // optional bool bReplicatedHasBegunPlay = 5;
  bool has_breplicatedhasbegunplay() const;
  private:
  bool _internal_has_breplicatedhasbegunplay() const;
  public:
  void clear_breplicatedhasbegunplay();
  bool breplicatedhasbegunplay() const;
  void set_breplicatedhasbegunplay(bool value);
  private:
  bool _internal_breplicatedhasbegunplay() const;
  void _internal_set_breplicatedhasbegunplay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.GameStateBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spectatorclassname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamemodeclassname_;
    float replicatedworldtimeseconds_;
    bool breplicatedhasbegunplay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PawnState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PawnState) */ {
 public:
  inline PawnState() : PawnState(nullptr) {}
  ~PawnState() override;
  explicit PROTOBUF_CONSTEXPR PawnState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PawnState(const PawnState& from);
  PawnState(PawnState&& from) noexcept
    : PawnState() {
    *this = ::std::move(from);
  }

  inline PawnState& operator=(const PawnState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PawnState& operator=(PawnState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PawnState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PawnState* internal_default_instance() {
    return reinterpret_cast<const PawnState*>(
               &_PawnState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PawnState& a, PawnState& b) {
    a.Swap(&b);
  }
  inline void Swap(PawnState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PawnState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PawnState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PawnState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PawnState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PawnState& from) {
    PawnState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PawnState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PawnState";
  }
  protected:
  explicit PawnState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStateFieldNumber = 1,
    kControllerFieldNumber = 2,
    kRemoteViewPitchFieldNumber = 3,
  };
  // .unrealpb.UnrealObjectRef playerState = 1;
  bool has_playerstate() const;
  private:
  bool _internal_has_playerstate() const;
  public:
  void clear_playerstate();
  const ::unrealpb::UnrealObjectRef& playerstate() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_playerstate();
  ::unrealpb::UnrealObjectRef* mutable_playerstate();
  void set_allocated_playerstate(::unrealpb::UnrealObjectRef* playerstate);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_playerstate() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_playerstate();
  public:
  void unsafe_arena_set_allocated_playerstate(
      ::unrealpb::UnrealObjectRef* playerstate);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_playerstate();

  // .unrealpb.UnrealObjectRef controller = 2;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::unrealpb::UnrealObjectRef& controller() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_controller();
  ::unrealpb::UnrealObjectRef* mutable_controller();
  void set_allocated_controller(::unrealpb::UnrealObjectRef* controller);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_controller() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::unrealpb::UnrealObjectRef* controller);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_controller();

  // optional uint32 remoteViewPitch = 3;
  bool has_remoteviewpitch() const;
  private:
  bool _internal_has_remoteviewpitch() const;
  public:
  void clear_remoteviewpitch();
  uint32_t remoteviewpitch() const;
  void set_remoteviewpitch(uint32_t value);
  private:
  uint32_t _internal_remoteviewpitch() const;
  void _internal_set_remoteviewpitch(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PawnState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::UnrealObjectRef* playerstate_;
    ::unrealpb::UnrealObjectRef* controller_;
    uint32_t remoteviewpitch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API FClientAdjustment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FClientAdjustment) */ {
 public:
  inline FClientAdjustment() : FClientAdjustment(nullptr) {}
  ~FClientAdjustment() override;
  explicit PROTOBUF_CONSTEXPR FClientAdjustment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FClientAdjustment(const FClientAdjustment& from);
  FClientAdjustment(FClientAdjustment&& from) noexcept
    : FClientAdjustment() {
    *this = ::std::move(from);
  }

  inline FClientAdjustment& operator=(const FClientAdjustment& from) {
    CopyFrom(from);
    return *this;
  }
  inline FClientAdjustment& operator=(FClientAdjustment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FClientAdjustment& default_instance() {
    return *internal_default_instance();
  }
  static inline const FClientAdjustment* internal_default_instance() {
    return reinterpret_cast<const FClientAdjustment*>(
               &_FClientAdjustment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(FClientAdjustment& a, FClientAdjustment& b) {
    a.Swap(&b);
  }
  inline void Swap(FClientAdjustment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FClientAdjustment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FClientAdjustment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FClientAdjustment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FClientAdjustment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FClientAdjustment& from) {
    FClientAdjustment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FClientAdjustment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FClientAdjustment";
  }
  protected:
  explicit FClientAdjustment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewBaseBoneNameFieldNumber = 7,
    kNewLocFieldNumber = 3,
    kNewVelFieldNumber = 4,
    kNewRotFieldNumber = 5,
    kNewBaseFieldNumber = 6,
    kRootMotionSourceCorrectionFieldNumber = 9,
    kRootMotionRotationFieldNumber = 10,
    kTimeStampFieldNumber = 2,
    kBAckGoodMoveFieldNumber = 1,
    kBBaseRelativePositionFieldNumber = 8,
    kMovementModeFieldNumber = 11,
  };
  // optional string newBaseBoneName = 7;
  bool has_newbasebonename() const;
  private:
  bool _internal_has_newbasebonename() const;
  public:
  void clear_newbasebonename();
  const std::string& newbasebonename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newbasebonename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newbasebonename();
  PROTOBUF_NODISCARD std::string* release_newbasebonename();
  void set_allocated_newbasebonename(std::string* newbasebonename);
  private:
  const std::string& _internal_newbasebonename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newbasebonename(const std::string& value);
  std::string* _internal_mutable_newbasebonename();
  public:

  // optional .unrealpb.FVector newLoc = 3;
  bool has_newloc() const;
  private:
  bool _internal_has_newloc() const;
  public:
  void clear_newloc();
  const ::unrealpb::FVector& newloc() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newloc();
  ::unrealpb::FVector* mutable_newloc();
  void set_allocated_newloc(::unrealpb::FVector* newloc);
  private:
  const ::unrealpb::FVector& _internal_newloc() const;
  ::unrealpb::FVector* _internal_mutable_newloc();
  public:
  void unsafe_arena_set_allocated_newloc(
      ::unrealpb::FVector* newloc);
  ::unrealpb::FVector* unsafe_arena_release_newloc();

  // optional .unrealpb.FVector newVel = 4;
  bool has_newvel() const;
  private:
  bool _internal_has_newvel() const;
  public:
  void clear_newvel();
  const ::unrealpb::FVector& newvel() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newvel();
  ::unrealpb::FVector* mutable_newvel();
  void set_allocated_newvel(::unrealpb::FVector* newvel);
  private:
  const ::unrealpb::FVector& _internal_newvel() const;
  ::unrealpb::FVector* _internal_mutable_newvel();
  public:
  void unsafe_arena_set_allocated_newvel(
      ::unrealpb::FVector* newvel);
  ::unrealpb::FVector* unsafe_arena_release_newvel();

  // optional .unrealpb.FVector newRot = 5;
  bool has_newrot() const;
  private:
  bool _internal_has_newrot() const;
  public:
  void clear_newrot();
  const ::unrealpb::FVector& newrot() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newrot();
  ::unrealpb::FVector* mutable_newrot();
  void set_allocated_newrot(::unrealpb::FVector* newrot);
  private:
  const ::unrealpb::FVector& _internal_newrot() const;
  ::unrealpb::FVector* _internal_mutable_newrot();
  public:
  void unsafe_arena_set_allocated_newrot(
      ::unrealpb::FVector* newrot);
  ::unrealpb::FVector* unsafe_arena_release_newrot();

  // optional .unrealpb.UnrealObjectRef newBase = 6;
  bool has_newbase() const;
  private:
  bool _internal_has_newbase() const;
  public:
  void clear_newbase();
  const ::unrealpb::UnrealObjectRef& newbase() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_newbase();
  ::unrealpb::UnrealObjectRef* mutable_newbase();
  void set_allocated_newbase(::unrealpb::UnrealObjectRef* newbase);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_newbase() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_newbase();
  public:
  void unsafe_arena_set_allocated_newbase(
      ::unrealpb::UnrealObjectRef* newbase);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_newbase();

  // optional .unrealpb.FRootMotionSourceGroup rootMotionSourceCorrection = 9;
  bool has_rootmotionsourcecorrection() const;
  private:
  bool _internal_has_rootmotionsourcecorrection() const;
  public:
  void clear_rootmotionsourcecorrection();
  const ::unrealpb::FRootMotionSourceGroup& rootmotionsourcecorrection() const;
  PROTOBUF_NODISCARD ::unrealpb::FRootMotionSourceGroup* release_rootmotionsourcecorrection();
  ::unrealpb::FRootMotionSourceGroup* mutable_rootmotionsourcecorrection();
  void set_allocated_rootmotionsourcecorrection(::unrealpb::FRootMotionSourceGroup* rootmotionsourcecorrection);
  private:
  const ::unrealpb::FRootMotionSourceGroup& _internal_rootmotionsourcecorrection() const;
  ::unrealpb::FRootMotionSourceGroup* _internal_mutable_rootmotionsourcecorrection();
  public:
  void unsafe_arena_set_allocated_rootmotionsourcecorrection(
      ::unrealpb::FRootMotionSourceGroup* rootmotionsourcecorrection);
  ::unrealpb::FRootMotionSourceGroup* unsafe_arena_release_rootmotionsourcecorrection();

  // optional .unrealpb.FVector rootMotionRotation = 10;
  bool has_rootmotionrotation() const;
  private:
  bool _internal_has_rootmotionrotation() const;
  public:
  void clear_rootmotionrotation();
  const ::unrealpb::FVector& rootmotionrotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_rootmotionrotation();
  ::unrealpb::FVector* mutable_rootmotionrotation();
  void set_allocated_rootmotionrotation(::unrealpb::FVector* rootmotionrotation);
  private:
  const ::unrealpb::FVector& _internal_rootmotionrotation() const;
  ::unrealpb::FVector* _internal_mutable_rootmotionrotation();
  public:
  void unsafe_arena_set_allocated_rootmotionrotation(
      ::unrealpb::FVector* rootmotionrotation);
  ::unrealpb::FVector* unsafe_arena_release_rootmotionrotation();

  // optional float timeStamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // optional bool bAckGoodMove = 1;
  bool has_backgoodmove() const;
  private:
  bool _internal_has_backgoodmove() const;
  public:
  void clear_backgoodmove();
  bool backgoodmove() const;
  void set_backgoodmove(bool value);
  private:
  bool _internal_backgoodmove() const;
  void _internal_set_backgoodmove(bool value);
  public:

  // optional bool bBaseRelativePosition = 8;
  bool has_bbaserelativeposition() const;
  private:
  bool _internal_has_bbaserelativeposition() const;
  public:
  void clear_bbaserelativeposition();
  bool bbaserelativeposition() const;
  void set_bbaserelativeposition(bool value);
  private:
  bool _internal_bbaserelativeposition() const;
  void _internal_set_bbaserelativeposition(bool value);
  public:

  // optional uint32 movementMode = 11;
  bool has_movementmode() const;
  private:
  bool _internal_has_movementmode() const;
  public:
  void clear_movementmode();
  uint32_t movementmode() const;
  void set_movementmode(uint32_t value);
  private:
  uint32_t _internal_movementmode() const;
  void _internal_set_movementmode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FClientAdjustment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newbasebonename_;
    ::unrealpb::FVector* newloc_;
    ::unrealpb::FVector* newvel_;
    ::unrealpb::FVector* newrot_;
    ::unrealpb::UnrealObjectRef* newbase_;
    ::unrealpb::FRootMotionSourceGroup* rootmotionsourcecorrection_;
    ::unrealpb::FVector* rootmotionrotation_;
    float timestamp_;
    bool backgoodmove_;
    bool bbaserelativeposition_;
    uint32_t movementmode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FVector

// optional float x = 1;
inline bool FVector::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FVector::has_x() const {
  return _internal_has_x();
}
inline void FVector::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float FVector::_internal_x() const {
  return _impl_.x_;
}
inline float FVector::x() const {
  // @@protoc_insertion_point(field_get:unrealpb.FVector.x)
  return _internal_x();
}
inline void FVector::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void FVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:unrealpb.FVector.x)
}

// optional float y = 2;
inline bool FVector::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FVector::has_y() const {
  return _internal_has_y();
}
inline void FVector::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FVector::_internal_y() const {
  return _impl_.y_;
}
inline float FVector::y() const {
  // @@protoc_insertion_point(field_get:unrealpb.FVector.y)
  return _internal_y();
}
inline void FVector::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void FVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:unrealpb.FVector.y)
}

// optional float z = 3;
inline bool FVector::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FVector::has_z() const {
  return _internal_has_z();
}
inline void FVector::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FVector::_internal_z() const {
  return _impl_.z_;
}
inline float FVector::z() const {
  // @@protoc_insertion_point(field_get:unrealpb.FVector.z)
  return _internal_z();
}
inline void FVector::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void FVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:unrealpb.FVector.z)
}

// -------------------------------------------------------------------

// UnrealObjectRef_GuidCachedObject

// uint32 netGUID = 1;
inline void UnrealObjectRef_GuidCachedObject::clear_netguid() {
  _impl_.netguid_ = 0u;
}
inline uint32_t UnrealObjectRef_GuidCachedObject::_internal_netguid() const {
  return _impl_.netguid_;
}
inline uint32_t UnrealObjectRef_GuidCachedObject::netguid() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.GuidCachedObject.netGUID)
  return _internal_netguid();
}
inline void UnrealObjectRef_GuidCachedObject::_internal_set_netguid(uint32_t value) {
  
  _impl_.netguid_ = value;
}
inline void UnrealObjectRef_GuidCachedObject::set_netguid(uint32_t value) {
  _internal_set_netguid(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.GuidCachedObject.netGUID)
}

// string pathName = 2;
inline void UnrealObjectRef_GuidCachedObject::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& UnrealObjectRef_GuidCachedObject::pathname() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnrealObjectRef_GuidCachedObject::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
}
inline std::string* UnrealObjectRef_GuidCachedObject::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
  return _s;
}
inline const std::string& UnrealObjectRef_GuidCachedObject::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void UnrealObjectRef_GuidCachedObject::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* UnrealObjectRef_GuidCachedObject::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* UnrealObjectRef_GuidCachedObject::release_pathname() {
  // @@protoc_insertion_point(field_release:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
  return _impl_.pathname_.Release();
}
inline void UnrealObjectRef_GuidCachedObject::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
}

// uint32 outerGUID = 3;
inline void UnrealObjectRef_GuidCachedObject::clear_outerguid() {
  _impl_.outerguid_ = 0u;
}
inline uint32_t UnrealObjectRef_GuidCachedObject::_internal_outerguid() const {
  return _impl_.outerguid_;
}
inline uint32_t UnrealObjectRef_GuidCachedObject::outerguid() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.GuidCachedObject.outerGUID)
  return _internal_outerguid();
}
inline void UnrealObjectRef_GuidCachedObject::_internal_set_outerguid(uint32_t value) {
  
  _impl_.outerguid_ = value;
}
inline void UnrealObjectRef_GuidCachedObject::set_outerguid(uint32_t value) {
  _internal_set_outerguid(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.GuidCachedObject.outerGUID)
}

// -------------------------------------------------------------------

// UnrealObjectRef

// optional uint32 netGUID = 1;
inline bool UnrealObjectRef::_internal_has_netguid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UnrealObjectRef::has_netguid() const {
  return _internal_has_netguid();
}
inline void UnrealObjectRef::clear_netguid() {
  _impl_.netguid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t UnrealObjectRef::_internal_netguid() const {
  return _impl_.netguid_;
}
inline uint32_t UnrealObjectRef::netguid() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.netGUID)
  return _internal_netguid();
}
inline void UnrealObjectRef::_internal_set_netguid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.netguid_ = value;
}
inline void UnrealObjectRef::set_netguid(uint32_t value) {
  _internal_set_netguid(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.netGUID)
}

// repeated .unrealpb.UnrealObjectRef.GuidCachedObject context = 2;
inline int UnrealObjectRef::_internal_context_size() const {
  return _impl_.context_.size();
}
inline int UnrealObjectRef::context_size() const {
  return _internal_context_size();
}
inline void UnrealObjectRef::clear_context() {
  _impl_.context_.Clear();
}
inline ::unrealpb::UnrealObjectRef_GuidCachedObject* UnrealObjectRef::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.UnrealObjectRef.context)
  return _impl_.context_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject >*
UnrealObjectRef::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.UnrealObjectRef.context)
  return &_impl_.context_;
}
inline const ::unrealpb::UnrealObjectRef_GuidCachedObject& UnrealObjectRef::_internal_context(int index) const {
  return _impl_.context_.Get(index);
}
inline const ::unrealpb::UnrealObjectRef_GuidCachedObject& UnrealObjectRef::context(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.context)
  return _internal_context(index);
}
inline ::unrealpb::UnrealObjectRef_GuidCachedObject* UnrealObjectRef::_internal_add_context() {
  return _impl_.context_.Add();
}
inline ::unrealpb::UnrealObjectRef_GuidCachedObject* UnrealObjectRef::add_context() {
  ::unrealpb::UnrealObjectRef_GuidCachedObject* _add = _internal_add_context();
  // @@protoc_insertion_point(field_add:unrealpb.UnrealObjectRef.context)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject >&
UnrealObjectRef::context() const {
  // @@protoc_insertion_point(field_list:unrealpb.UnrealObjectRef.context)
  return _impl_.context_;
}

// optional bytes netGUIDBunch = 3;
inline bool UnrealObjectRef::_internal_has_netguidbunch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnrealObjectRef::has_netguidbunch() const {
  return _internal_has_netguidbunch();
}
inline void UnrealObjectRef::clear_netguidbunch() {
  _impl_.netguidbunch_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UnrealObjectRef::netguidbunch() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.netGUIDBunch)
  return _internal_netguidbunch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnrealObjectRef::set_netguidbunch(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.netguidbunch_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.netGUIDBunch)
}
inline std::string* UnrealObjectRef::mutable_netguidbunch() {
  std::string* _s = _internal_mutable_netguidbunch();
  // @@protoc_insertion_point(field_mutable:unrealpb.UnrealObjectRef.netGUIDBunch)
  return _s;
}
inline const std::string& UnrealObjectRef::_internal_netguidbunch() const {
  return _impl_.netguidbunch_.Get();
}
inline void UnrealObjectRef::_internal_set_netguidbunch(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.netguidbunch_.Set(value, GetArenaForAllocation());
}
inline std::string* UnrealObjectRef::_internal_mutable_netguidbunch() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.netguidbunch_.Mutable(GetArenaForAllocation());
}
inline std::string* UnrealObjectRef::release_netguidbunch() {
  // @@protoc_insertion_point(field_release:unrealpb.UnrealObjectRef.netGUIDBunch)
  if (!_internal_has_netguidbunch()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.netguidbunch_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.netguidbunch_.IsDefault()) {
    _impl_.netguidbunch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UnrealObjectRef::set_allocated_netguidbunch(std::string* netguidbunch) {
  if (netguidbunch != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.netguidbunch_.SetAllocated(netguidbunch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.netguidbunch_.IsDefault()) {
    _impl_.netguidbunch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.UnrealObjectRef.netGUIDBunch)
}

// optional uint32 bunchBitsNum = 4;
inline bool UnrealObjectRef::_internal_has_bunchbitsnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UnrealObjectRef::has_bunchbitsnum() const {
  return _internal_has_bunchbitsnum();
}
inline void UnrealObjectRef::clear_bunchbitsnum() {
  _impl_.bunchbitsnum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t UnrealObjectRef::_internal_bunchbitsnum() const {
  return _impl_.bunchbitsnum_;
}
inline uint32_t UnrealObjectRef::bunchbitsnum() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.bunchBitsNum)
  return _internal_bunchbitsnum();
}
inline void UnrealObjectRef::_internal_set_bunchbitsnum(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bunchbitsnum_ = value;
}
inline void UnrealObjectRef::set_bunchbitsnum(uint32_t value) {
  _internal_set_bunchbitsnum(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.bunchBitsNum)
}

// optional string classPath = 6;
inline bool UnrealObjectRef::_internal_has_classpath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnrealObjectRef::has_classpath() const {
  return _internal_has_classpath();
}
inline void UnrealObjectRef::clear_classpath() {
  _impl_.classpath_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UnrealObjectRef::classpath() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.classPath)
  return _internal_classpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnrealObjectRef::set_classpath(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.classpath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.classPath)
}
inline std::string* UnrealObjectRef::mutable_classpath() {
  std::string* _s = _internal_mutable_classpath();
  // @@protoc_insertion_point(field_mutable:unrealpb.UnrealObjectRef.classPath)
  return _s;
}
inline const std::string& UnrealObjectRef::_internal_classpath() const {
  return _impl_.classpath_.Get();
}
inline void UnrealObjectRef::_internal_set_classpath(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.classpath_.Set(value, GetArenaForAllocation());
}
inline std::string* UnrealObjectRef::_internal_mutable_classpath() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.classpath_.Mutable(GetArenaForAllocation());
}
inline std::string* UnrealObjectRef::release_classpath() {
  // @@protoc_insertion_point(field_release:unrealpb.UnrealObjectRef.classPath)
  if (!_internal_has_classpath()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.classpath_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.classpath_.IsDefault()) {
    _impl_.classpath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UnrealObjectRef::set_allocated_classpath(std::string* classpath) {
  if (classpath != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.classpath_.SetAllocated(classpath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.classpath_.IsDefault()) {
    _impl_.classpath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.UnrealObjectRef.classPath)
}

// optional uint32 owningConnId = 7;
inline bool UnrealObjectRef::_internal_has_owningconnid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UnrealObjectRef::has_owningconnid() const {
  return _internal_has_owningconnid();
}
inline void UnrealObjectRef::clear_owningconnid() {
  _impl_.owningconnid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t UnrealObjectRef::_internal_owningconnid() const {
  return _impl_.owningconnid_;
}
inline uint32_t UnrealObjectRef::owningconnid() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.owningConnId)
  return _internal_owningconnid();
}
inline void UnrealObjectRef::_internal_set_owningconnid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.owningconnid_ = value;
}
inline void UnrealObjectRef::set_owningconnid(uint32_t value) {
  _internal_set_owningconnid(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.owningConnId)
}

// -------------------------------------------------------------------

// ActorComponentRef

// optional .unrealpb.UnrealObjectRef owner = 1;
inline bool ActorComponentRef::_internal_has_owner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.owner_ != nullptr);
  return value;
}
inline bool ActorComponentRef::has_owner() const {
  return _internal_has_owner();
}
inline void ActorComponentRef::clear_owner() {
  if (_impl_.owner_ != nullptr) _impl_.owner_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::UnrealObjectRef& ActorComponentRef::_internal_owner() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& ActorComponentRef::owner() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorComponentRef.owner)
  return _internal_owner();
}
inline void ActorComponentRef::unsafe_arena_set_allocated_owner(
    ::unrealpb::UnrealObjectRef* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.ActorComponentRef.owner)
}
inline ::unrealpb::UnrealObjectRef* ActorComponentRef::release_owner() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ActorComponentRef::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:unrealpb.ActorComponentRef.owner)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ActorComponentRef::_internal_mutable_owner() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::unrealpb::UnrealObjectRef* ActorComponentRef::mutable_owner() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:unrealpb.ActorComponentRef.owner)
  return _msg;
}
inline void ActorComponentRef::set_allocated_owner(::unrealpb::UnrealObjectRef* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ActorComponentRef.owner)
}

// optional string compName = 2;
inline bool ActorComponentRef::_internal_has_compname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActorComponentRef::has_compname() const {
  return _internal_has_compname();
}
inline void ActorComponentRef::clear_compname() {
  _impl_.compname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActorComponentRef::compname() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorComponentRef.compName)
  return _internal_compname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActorComponentRef::set_compname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.compname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.ActorComponentRef.compName)
}
inline std::string* ActorComponentRef::mutable_compname() {
  std::string* _s = _internal_mutable_compname();
  // @@protoc_insertion_point(field_mutable:unrealpb.ActorComponentRef.compName)
  return _s;
}
inline const std::string& ActorComponentRef::_internal_compname() const {
  return _impl_.compname_.Get();
}
inline void ActorComponentRef::_internal_set_compname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.compname_.Set(value, GetArenaForAllocation());
}
inline std::string* ActorComponentRef::_internal_mutable_compname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.compname_.Mutable(GetArenaForAllocation());
}
inline std::string* ActorComponentRef::release_compname() {
  // @@protoc_insertion_point(field_release:unrealpb.ActorComponentRef.compName)
  if (!_internal_has_compname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.compname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compname_.IsDefault()) {
    _impl_.compname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ActorComponentRef::set_allocated_compname(std::string* compname) {
  if (compname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.compname_.SetAllocated(compname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compname_.IsDefault()) {
    _impl_.compname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ActorComponentRef.compName)
}

// -------------------------------------------------------------------

// RemoteFunctionMessage

// .unrealpb.UnrealObjectRef targetObj = 1;
inline bool RemoteFunctionMessage::_internal_has_targetobj() const {
  return this != internal_default_instance() && _impl_.targetobj_ != nullptr;
}
inline bool RemoteFunctionMessage::has_targetobj() const {
  return _internal_has_targetobj();
}
inline void RemoteFunctionMessage::clear_targetobj() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetobj_ != nullptr) {
    delete _impl_.targetobj_;
  }
  _impl_.targetobj_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& RemoteFunctionMessage::_internal_targetobj() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.targetobj_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& RemoteFunctionMessage::targetobj() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.targetObj)
  return _internal_targetobj();
}
inline void RemoteFunctionMessage::unsafe_arena_set_allocated_targetobj(
    ::unrealpb::UnrealObjectRef* targetobj) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetobj_);
  }
  _impl_.targetobj_ = targetobj;
  if (targetobj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.RemoteFunctionMessage.targetObj)
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::release_targetobj() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.targetobj_;
  _impl_.targetobj_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::unsafe_arena_release_targetobj() {
  // @@protoc_insertion_point(field_release:unrealpb.RemoteFunctionMessage.targetObj)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.targetobj_;
  _impl_.targetobj_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::_internal_mutable_targetobj() {
  
  if (_impl_.targetobj_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.targetobj_ = p;
  }
  return _impl_.targetobj_;
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::mutable_targetobj() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_targetobj();
  // @@protoc_insertion_point(field_mutable:unrealpb.RemoteFunctionMessage.targetObj)
  return _msg;
}
inline void RemoteFunctionMessage::set_allocated_targetobj(::unrealpb::UnrealObjectRef* targetobj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.targetobj_;
  }
  if (targetobj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(targetobj);
    if (message_arena != submessage_arena) {
      targetobj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetobj, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.targetobj_ = targetobj;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.RemoteFunctionMessage.targetObj)
}

// string functionName = 2;
inline void RemoteFunctionMessage::clear_functionname() {
  _impl_.functionname_.ClearToEmpty();
}
inline const std::string& RemoteFunctionMessage::functionname() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.functionName)
  return _internal_functionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteFunctionMessage::set_functionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.functionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.RemoteFunctionMessage.functionName)
}
inline std::string* RemoteFunctionMessage::mutable_functionname() {
  std::string* _s = _internal_mutable_functionname();
  // @@protoc_insertion_point(field_mutable:unrealpb.RemoteFunctionMessage.functionName)
  return _s;
}
inline const std::string& RemoteFunctionMessage::_internal_functionname() const {
  return _impl_.functionname_.Get();
}
inline void RemoteFunctionMessage::_internal_set_functionname(const std::string& value) {
  
  _impl_.functionname_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::_internal_mutable_functionname() {
  
  return _impl_.functionname_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::release_functionname() {
  // @@protoc_insertion_point(field_release:unrealpb.RemoteFunctionMessage.functionName)
  return _impl_.functionname_.Release();
}
inline void RemoteFunctionMessage::set_allocated_functionname(std::string* functionname) {
  if (functionname != nullptr) {
    
  } else {
    
  }
  _impl_.functionname_.SetAllocated(functionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.functionname_.IsDefault()) {
    _impl_.functionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.RemoteFunctionMessage.functionName)
}

// bytes paramsPayload = 3;
inline void RemoteFunctionMessage::clear_paramspayload() {
  _impl_.paramspayload_.ClearToEmpty();
}
inline const std::string& RemoteFunctionMessage::paramspayload() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.paramsPayload)
  return _internal_paramspayload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteFunctionMessage::set_paramspayload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.paramspayload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.RemoteFunctionMessage.paramsPayload)
}
inline std::string* RemoteFunctionMessage::mutable_paramspayload() {
  std::string* _s = _internal_mutable_paramspayload();
  // @@protoc_insertion_point(field_mutable:unrealpb.RemoteFunctionMessage.paramsPayload)
  return _s;
}
inline const std::string& RemoteFunctionMessage::_internal_paramspayload() const {
  return _impl_.paramspayload_.Get();
}
inline void RemoteFunctionMessage::_internal_set_paramspayload(const std::string& value) {
  
  _impl_.paramspayload_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::_internal_mutable_paramspayload() {
  
  return _impl_.paramspayload_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::release_paramspayload() {
  // @@protoc_insertion_point(field_release:unrealpb.RemoteFunctionMessage.paramsPayload)
  return _impl_.paramspayload_.Release();
}
inline void RemoteFunctionMessage::set_allocated_paramspayload(std::string* paramspayload) {
  if (paramspayload != nullptr) {
    
  } else {
    
  }
  _impl_.paramspayload_.SetAllocated(paramspayload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paramspayload_.IsDefault()) {
    _impl_.paramspayload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.RemoteFunctionMessage.paramsPayload)
}

// int32 redirectionCounter = 4;
inline void RemoteFunctionMessage::clear_redirectioncounter() {
  _impl_.redirectioncounter_ = 0;
}
inline int32_t RemoteFunctionMessage::_internal_redirectioncounter() const {
  return _impl_.redirectioncounter_;
}
inline int32_t RemoteFunctionMessage::redirectioncounter() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.redirectionCounter)
  return _internal_redirectioncounter();
}
inline void RemoteFunctionMessage::_internal_set_redirectioncounter(int32_t value) {
  
  _impl_.redirectioncounter_ = value;
}
inline void RemoteFunctionMessage::set_redirectioncounter(int32_t value) {
  _internal_set_redirectioncounter(value);
  // @@protoc_insertion_point(field_set:unrealpb.RemoteFunctionMessage.redirectionCounter)
}

// -------------------------------------------------------------------

// SpawnObjectMessage

// .unrealpb.UnrealObjectRef obj = 1;
inline bool SpawnObjectMessage::_internal_has_obj() const {
  return this != internal_default_instance() && _impl_.obj_ != nullptr;
}
inline bool SpawnObjectMessage::has_obj() const {
  return _internal_has_obj();
}
inline void SpawnObjectMessage::clear_obj() {
  if (GetArenaForAllocation() == nullptr && _impl_.obj_ != nullptr) {
    delete _impl_.obj_;
  }
  _impl_.obj_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& SpawnObjectMessage::_internal_obj() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.obj_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& SpawnObjectMessage::obj() const {
  // @@protoc_insertion_point(field_get:unrealpb.SpawnObjectMessage.obj)
  return _internal_obj();
}
inline void SpawnObjectMessage::unsafe_arena_set_allocated_obj(
    ::unrealpb::UnrealObjectRef* obj) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_);
  }
  _impl_.obj_ = obj;
  if (obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SpawnObjectMessage.obj)
}
inline ::unrealpb::UnrealObjectRef* SpawnObjectMessage::release_obj() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.obj_;
  _impl_.obj_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* SpawnObjectMessage::unsafe_arena_release_obj() {
  // @@protoc_insertion_point(field_release:unrealpb.SpawnObjectMessage.obj)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.obj_;
  _impl_.obj_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* SpawnObjectMessage::_internal_mutable_obj() {
  
  if (_impl_.obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.obj_ = p;
  }
  return _impl_.obj_;
}
inline ::unrealpb::UnrealObjectRef* SpawnObjectMessage::mutable_obj() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_obj();
  // @@protoc_insertion_point(field_mutable:unrealpb.SpawnObjectMessage.obj)
  return _msg;
}
inline void SpawnObjectMessage::set_allocated_obj(::unrealpb::UnrealObjectRef* obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.obj_;
  }
  if (obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obj);
    if (message_arena != submessage_arena) {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obj_ = obj;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SpawnObjectMessage.obj)
}

// optional uint32 channelId = 2;
inline bool SpawnObjectMessage::_internal_has_channelid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpawnObjectMessage::has_channelid() const {
  return _internal_has_channelid();
}
inline void SpawnObjectMessage::clear_channelid() {
  _impl_.channelid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t SpawnObjectMessage::_internal_channelid() const {
  return _impl_.channelid_;
}
inline uint32_t SpawnObjectMessage::channelid() const {
  // @@protoc_insertion_point(field_get:unrealpb.SpawnObjectMessage.channelId)
  return _internal_channelid();
}
inline void SpawnObjectMessage::_internal_set_channelid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channelid_ = value;
}
inline void SpawnObjectMessage::set_channelid(uint32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:unrealpb.SpawnObjectMessage.channelId)
}

// optional uint32 localRole = 3;
inline bool SpawnObjectMessage::_internal_has_localrole() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpawnObjectMessage::has_localrole() const {
  return _internal_has_localrole();
}
inline void SpawnObjectMessage::clear_localrole() {
  _impl_.localrole_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SpawnObjectMessage::_internal_localrole() const {
  return _impl_.localrole_;
}
inline uint32_t SpawnObjectMessage::localrole() const {
  // @@protoc_insertion_point(field_get:unrealpb.SpawnObjectMessage.localRole)
  return _internal_localrole();
}
inline void SpawnObjectMessage::_internal_set_localrole(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.localrole_ = value;
}
inline void SpawnObjectMessage::set_localrole(uint32_t value) {
  _internal_set_localrole(value);
  // @@protoc_insertion_point(field_set:unrealpb.SpawnObjectMessage.localRole)
}

// optional .unrealpb.FVector location = 5;
inline bool SpawnObjectMessage::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool SpawnObjectMessage::has_location() const {
  return _internal_has_location();
}
inline void SpawnObjectMessage::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::unrealpb::FVector& SpawnObjectMessage::_internal_location() const {
  const ::unrealpb::FVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SpawnObjectMessage::location() const {
  // @@protoc_insertion_point(field_get:unrealpb.SpawnObjectMessage.location)
  return _internal_location();
}
inline void SpawnObjectMessage::unsafe_arena_set_allocated_location(
    ::unrealpb::FVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SpawnObjectMessage.location)
}
inline ::unrealpb::FVector* SpawnObjectMessage::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SpawnObjectMessage::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:unrealpb.SpawnObjectMessage.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SpawnObjectMessage::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::unrealpb::FVector* SpawnObjectMessage::mutable_location() {
  ::unrealpb::FVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:unrealpb.SpawnObjectMessage.location)
  return _msg;
}
inline void SpawnObjectMessage::set_allocated_location(::unrealpb::FVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SpawnObjectMessage.location)
}

// -------------------------------------------------------------------

// DestroyObjectMessage

// uint32 netId = 1;
inline void DestroyObjectMessage::clear_netid() {
  _impl_.netid_ = 0u;
}
inline uint32_t DestroyObjectMessage::_internal_netid() const {
  return _impl_.netid_;
}
inline uint32_t DestroyObjectMessage::netid() const {
  // @@protoc_insertion_point(field_get:unrealpb.DestroyObjectMessage.netId)
  return _internal_netid();
}
inline void DestroyObjectMessage::_internal_set_netid(uint32_t value) {
  
  _impl_.netid_ = value;
}
inline void DestroyObjectMessage::set_netid(uint32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:unrealpb.DestroyObjectMessage.netId)
}

// uint32 reason = 2;
inline void DestroyObjectMessage::clear_reason() {
  _impl_.reason_ = 0u;
}
inline uint32_t DestroyObjectMessage::_internal_reason() const {
  return _impl_.reason_;
}
inline uint32_t DestroyObjectMessage::reason() const {
  // @@protoc_insertion_point(field_get:unrealpb.DestroyObjectMessage.reason)
  return _internal_reason();
}
inline void DestroyObjectMessage::_internal_set_reason(uint32_t value) {
  
  _impl_.reason_ = value;
}
inline void DestroyObjectMessage::set_reason(uint32_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:unrealpb.DestroyObjectMessage.reason)
}

// -------------------------------------------------------------------

// HandoverContext

// .unrealpb.UnrealObjectRef obj = 1;
inline bool HandoverContext::_internal_has_obj() const {
  return this != internal_default_instance() && _impl_.obj_ != nullptr;
}
inline bool HandoverContext::has_obj() const {
  return _internal_has_obj();
}
inline void HandoverContext::clear_obj() {
  if (GetArenaForAllocation() == nullptr && _impl_.obj_ != nullptr) {
    delete _impl_.obj_;
  }
  _impl_.obj_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& HandoverContext::_internal_obj() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.obj_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& HandoverContext::obj() const {
  // @@protoc_insertion_point(field_get:unrealpb.HandoverContext.obj)
  return _internal_obj();
}
inline void HandoverContext::unsafe_arena_set_allocated_obj(
    ::unrealpb::UnrealObjectRef* obj) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_);
  }
  _impl_.obj_ = obj;
  if (obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.HandoverContext.obj)
}
inline ::unrealpb::UnrealObjectRef* HandoverContext::release_obj() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.obj_;
  _impl_.obj_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* HandoverContext::unsafe_arena_release_obj() {
  // @@protoc_insertion_point(field_release:unrealpb.HandoverContext.obj)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.obj_;
  _impl_.obj_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* HandoverContext::_internal_mutable_obj() {
  
  if (_impl_.obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.obj_ = p;
  }
  return _impl_.obj_;
}
inline ::unrealpb::UnrealObjectRef* HandoverContext::mutable_obj() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_obj();
  // @@protoc_insertion_point(field_mutable:unrealpb.HandoverContext.obj)
  return _msg;
}
inline void HandoverContext::set_allocated_obj(::unrealpb::UnrealObjectRef* obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.obj_;
  }
  if (obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obj);
    if (message_arena != submessage_arena) {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obj_ = obj;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.HandoverContext.obj)
}

// optional uint32 clientConnId = 2;
inline bool HandoverContext::_internal_has_clientconnid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HandoverContext::has_clientconnid() const {
  return _internal_has_clientconnid();
}
inline void HandoverContext::clear_clientconnid() {
  _impl_.clientconnid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t HandoverContext::_internal_clientconnid() const {
  return _impl_.clientconnid_;
}
inline uint32_t HandoverContext::clientconnid() const {
  // @@protoc_insertion_point(field_get:unrealpb.HandoverContext.clientConnId)
  return _internal_clientconnid();
}
inline void HandoverContext::_internal_set_clientconnid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.clientconnid_ = value;
}
inline void HandoverContext::set_clientconnid(uint32_t value) {
  _internal_set_clientconnid(value);
  // @@protoc_insertion_point(field_set:unrealpb.HandoverContext.clientConnId)
}

// -------------------------------------------------------------------

// GetHandoverContextMessage

// uint32 netId = 1;
inline void GetHandoverContextMessage::clear_netid() {
  _impl_.netid_ = 0u;
}
inline uint32_t GetHandoverContextMessage::_internal_netid() const {
  return _impl_.netid_;
}
inline uint32_t GetHandoverContextMessage::netid() const {
  // @@protoc_insertion_point(field_get:unrealpb.GetHandoverContextMessage.netId)
  return _internal_netid();
}
inline void GetHandoverContextMessage::_internal_set_netid(uint32_t value) {
  
  _impl_.netid_ = value;
}
inline void GetHandoverContextMessage::set_netid(uint32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:unrealpb.GetHandoverContextMessage.netId)
}

// uint32 srcChannelId = 2;
inline void GetHandoverContextMessage::clear_srcchannelid() {
  _impl_.srcchannelid_ = 0u;
}
inline uint32_t GetHandoverContextMessage::_internal_srcchannelid() const {
  return _impl_.srcchannelid_;
}
inline uint32_t GetHandoverContextMessage::srcchannelid() const {
  // @@protoc_insertion_point(field_get:unrealpb.GetHandoverContextMessage.srcChannelId)
  return _internal_srcchannelid();
}
inline void GetHandoverContextMessage::_internal_set_srcchannelid(uint32_t value) {
  
  _impl_.srcchannelid_ = value;
}
inline void GetHandoverContextMessage::set_srcchannelid(uint32_t value) {
  _internal_set_srcchannelid(value);
  // @@protoc_insertion_point(field_set:unrealpb.GetHandoverContextMessage.srcChannelId)
}

// uint32 dstChannelId = 3;
inline void GetHandoverContextMessage::clear_dstchannelid() {
  _impl_.dstchannelid_ = 0u;
}
inline uint32_t GetHandoverContextMessage::_internal_dstchannelid() const {
  return _impl_.dstchannelid_;
}
inline uint32_t GetHandoverContextMessage::dstchannelid() const {
  // @@protoc_insertion_point(field_get:unrealpb.GetHandoverContextMessage.dstChannelId)
  return _internal_dstchannelid();
}
inline void GetHandoverContextMessage::_internal_set_dstchannelid(uint32_t value) {
  
  _impl_.dstchannelid_ = value;
}
inline void GetHandoverContextMessage::set_dstchannelid(uint32_t value) {
  _internal_set_dstchannelid(value);
  // @@protoc_insertion_point(field_set:unrealpb.GetHandoverContextMessage.dstChannelId)
}

// -------------------------------------------------------------------

// GetHandoverContextResultMessage

// uint32 netId = 1;
inline void GetHandoverContextResultMessage::clear_netid() {
  _impl_.netid_ = 0u;
}
inline uint32_t GetHandoverContextResultMessage::_internal_netid() const {
  return _impl_.netid_;
}
inline uint32_t GetHandoverContextResultMessage::netid() const {
  // @@protoc_insertion_point(field_get:unrealpb.GetHandoverContextResultMessage.netId)
  return _internal_netid();
}
inline void GetHandoverContextResultMessage::_internal_set_netid(uint32_t value) {
  
  _impl_.netid_ = value;
}
inline void GetHandoverContextResultMessage::set_netid(uint32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:unrealpb.GetHandoverContextResultMessage.netId)
}

// uint32 srcChannelId = 2;
inline void GetHandoverContextResultMessage::clear_srcchannelid() {
  _impl_.srcchannelid_ = 0u;
}
inline uint32_t GetHandoverContextResultMessage::_internal_srcchannelid() const {
  return _impl_.srcchannelid_;
}
inline uint32_t GetHandoverContextResultMessage::srcchannelid() const {
  // @@protoc_insertion_point(field_get:unrealpb.GetHandoverContextResultMessage.srcChannelId)
  return _internal_srcchannelid();
}
inline void GetHandoverContextResultMessage::_internal_set_srcchannelid(uint32_t value) {
  
  _impl_.srcchannelid_ = value;
}
inline void GetHandoverContextResultMessage::set_srcchannelid(uint32_t value) {
  _internal_set_srcchannelid(value);
  // @@protoc_insertion_point(field_set:unrealpb.GetHandoverContextResultMessage.srcChannelId)
}

// uint32 dstChannelId = 3;
inline void GetHandoverContextResultMessage::clear_dstchannelid() {
  _impl_.dstchannelid_ = 0u;
}
inline uint32_t GetHandoverContextResultMessage::_internal_dstchannelid() const {
  return _impl_.dstchannelid_;
}
inline uint32_t GetHandoverContextResultMessage::dstchannelid() const {
  // @@protoc_insertion_point(field_get:unrealpb.GetHandoverContextResultMessage.dstChannelId)
  return _internal_dstchannelid();
}
inline void GetHandoverContextResultMessage::_internal_set_dstchannelid(uint32_t value) {
  
  _impl_.dstchannelid_ = value;
}
inline void GetHandoverContextResultMessage::set_dstchannelid(uint32_t value) {
  _internal_set_dstchannelid(value);
  // @@protoc_insertion_point(field_set:unrealpb.GetHandoverContextResultMessage.dstChannelId)
}

// repeated .unrealpb.HandoverContext context = 4;
inline int GetHandoverContextResultMessage::_internal_context_size() const {
  return _impl_.context_.size();
}
inline int GetHandoverContextResultMessage::context_size() const {
  return _internal_context_size();
}
inline void GetHandoverContextResultMessage::clear_context() {
  _impl_.context_.Clear();
}
inline ::unrealpb::HandoverContext* GetHandoverContextResultMessage::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.GetHandoverContextResultMessage.context)
  return _impl_.context_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext >*
GetHandoverContextResultMessage::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.GetHandoverContextResultMessage.context)
  return &_impl_.context_;
}
inline const ::unrealpb::HandoverContext& GetHandoverContextResultMessage::_internal_context(int index) const {
  return _impl_.context_.Get(index);
}
inline const ::unrealpb::HandoverContext& GetHandoverContextResultMessage::context(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.GetHandoverContextResultMessage.context)
  return _internal_context(index);
}
inline ::unrealpb::HandoverContext* GetHandoverContextResultMessage::_internal_add_context() {
  return _impl_.context_.Add();
}
inline ::unrealpb::HandoverContext* GetHandoverContextResultMessage::add_context() {
  ::unrealpb::HandoverContext* _add = _internal_add_context();
  // @@protoc_insertion_point(field_add:unrealpb.GetHandoverContextResultMessage.context)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext >&
GetHandoverContextResultMessage::context() const {
  // @@protoc_insertion_point(field_list:unrealpb.GetHandoverContextResultMessage.context)
  return _impl_.context_;
}

// -------------------------------------------------------------------

// HandoverData

// repeated .unrealpb.HandoverContext context = 1;
inline int HandoverData::_internal_context_size() const {
  return _impl_.context_.size();
}
inline int HandoverData::context_size() const {
  return _internal_context_size();
}
inline void HandoverData::clear_context() {
  _impl_.context_.Clear();
}
inline ::unrealpb::HandoverContext* HandoverData::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.HandoverData.context)
  return _impl_.context_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext >*
HandoverData::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.HandoverData.context)
  return &_impl_.context_;
}
inline const ::unrealpb::HandoverContext& HandoverData::_internal_context(int index) const {
  return _impl_.context_.Get(index);
}
inline const ::unrealpb::HandoverContext& HandoverData::context(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.HandoverData.context)
  return _internal_context(index);
}
inline ::unrealpb::HandoverContext* HandoverData::_internal_add_context() {
  return _impl_.context_.Add();
}
inline ::unrealpb::HandoverContext* HandoverData::add_context() {
  ::unrealpb::HandoverContext* _add = _internal_add_context();
  // @@protoc_insertion_point(field_add:unrealpb.HandoverData.context)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::HandoverContext >&
HandoverData::context() const {
  // @@protoc_insertion_point(field_list:unrealpb.HandoverData.context)
  return _impl_.context_;
}

// optional .google.protobuf.Any channelData = 2;
inline bool HandoverData::_internal_has_channeldata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.channeldata_ != nullptr);
  return value;
}
inline bool HandoverData::has_channeldata() const {
  return _internal_has_channeldata();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& HandoverData::_internal_channeldata() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.channeldata_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& HandoverData::channeldata() const {
  // @@protoc_insertion_point(field_get:unrealpb.HandoverData.channelData)
  return _internal_channeldata();
}
inline void HandoverData::unsafe_arena_set_allocated_channeldata(
    ::PROTOBUF_NAMESPACE_ID::Any* channeldata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.channeldata_);
  }
  _impl_.channeldata_ = channeldata;
  if (channeldata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.HandoverData.channelData)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* HandoverData::release_channeldata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.channeldata_;
  _impl_.channeldata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* HandoverData::unsafe_arena_release_channeldata() {
  // @@protoc_insertion_point(field_release:unrealpb.HandoverData.channelData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.channeldata_;
  _impl_.channeldata_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* HandoverData::_internal_mutable_channeldata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.channeldata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.channeldata_ = p;
  }
  return _impl_.channeldata_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* HandoverData::mutable_channeldata() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_channeldata();
  // @@protoc_insertion_point(field_mutable:unrealpb.HandoverData.channelData)
  return _msg;
}
inline void HandoverData::set_allocated_channeldata(::PROTOBUF_NAMESPACE_ID::Any* channeldata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.channeldata_);
  }
  if (channeldata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channeldata));
    if (message_arena != submessage_arena) {
      channeldata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channeldata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.channeldata_ = channeldata;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.HandoverData.channelData)
}

// -------------------------------------------------------------------

// GetUnrealObjectRefMessage

// repeated uint32 netGUID = 1;
inline int GetUnrealObjectRefMessage::_internal_netguid_size() const {
  return _impl_.netguid_.size();
}
inline int GetUnrealObjectRefMessage::netguid_size() const {
  return _internal_netguid_size();
}
inline void GetUnrealObjectRefMessage::clear_netguid() {
  _impl_.netguid_.Clear();
}
inline uint32_t GetUnrealObjectRefMessage::_internal_netguid(int index) const {
  return _impl_.netguid_.Get(index);
}
inline uint32_t GetUnrealObjectRefMessage::netguid(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.GetUnrealObjectRefMessage.netGUID)
  return _internal_netguid(index);
}
inline void GetUnrealObjectRefMessage::set_netguid(int index, uint32_t value) {
  _impl_.netguid_.Set(index, value);
  // @@protoc_insertion_point(field_set:unrealpb.GetUnrealObjectRefMessage.netGUID)
}
inline void GetUnrealObjectRefMessage::_internal_add_netguid(uint32_t value) {
  _impl_.netguid_.Add(value);
}
inline void GetUnrealObjectRefMessage::add_netguid(uint32_t value) {
  _internal_add_netguid(value);
  // @@protoc_insertion_point(field_add:unrealpb.GetUnrealObjectRefMessage.netGUID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GetUnrealObjectRefMessage::_internal_netguid() const {
  return _impl_.netguid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GetUnrealObjectRefMessage::netguid() const {
  // @@protoc_insertion_point(field_list:unrealpb.GetUnrealObjectRefMessage.netGUID)
  return _internal_netguid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GetUnrealObjectRefMessage::_internal_mutable_netguid() {
  return &_impl_.netguid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GetUnrealObjectRefMessage::mutable_netguid() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.GetUnrealObjectRefMessage.netGUID)
  return _internal_mutable_netguid();
}

// -------------------------------------------------------------------

// GetUnrealObjectRefResultMessage

// repeated .unrealpb.UnrealObjectRef objRef = 1;
inline int GetUnrealObjectRefResultMessage::_internal_objref_size() const {
  return _impl_.objref_.size();
}
inline int GetUnrealObjectRefResultMessage::objref_size() const {
  return _internal_objref_size();
}
inline void GetUnrealObjectRefResultMessage::clear_objref() {
  _impl_.objref_.Clear();
}
inline ::unrealpb::UnrealObjectRef* GetUnrealObjectRefResultMessage::mutable_objref(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.GetUnrealObjectRefResultMessage.objRef)
  return _impl_.objref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >*
GetUnrealObjectRefResultMessage::mutable_objref() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.GetUnrealObjectRefResultMessage.objRef)
  return &_impl_.objref_;
}
inline const ::unrealpb::UnrealObjectRef& GetUnrealObjectRefResultMessage::_internal_objref(int index) const {
  return _impl_.objref_.Get(index);
}
inline const ::unrealpb::UnrealObjectRef& GetUnrealObjectRefResultMessage::objref(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.GetUnrealObjectRefResultMessage.objRef)
  return _internal_objref(index);
}
inline ::unrealpb::UnrealObjectRef* GetUnrealObjectRefResultMessage::_internal_add_objref() {
  return _impl_.objref_.Add();
}
inline ::unrealpb::UnrealObjectRef* GetUnrealObjectRefResultMessage::add_objref() {
  ::unrealpb::UnrealObjectRef* _add = _internal_add_objref();
  // @@protoc_insertion_point(field_add:unrealpb.GetUnrealObjectRefResultMessage.objRef)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >&
GetUnrealObjectRefResultMessage::objref() const {
  // @@protoc_insertion_point(field_list:unrealpb.GetUnrealObjectRefResultMessage.objRef)
  return _impl_.objref_;
}

// -------------------------------------------------------------------

// SyncNetIdMessage_NetIdPath

// uint32 netId = 1;
inline void SyncNetIdMessage_NetIdPath::clear_netid() {
  _impl_.netid_ = 0u;
}
inline uint32_t SyncNetIdMessage_NetIdPath::_internal_netid() const {
  return _impl_.netid_;
}
inline uint32_t SyncNetIdMessage_NetIdPath::netid() const {
  // @@protoc_insertion_point(field_get:unrealpb.SyncNetIdMessage.NetIdPath.netId)
  return _internal_netid();
}
inline void SyncNetIdMessage_NetIdPath::_internal_set_netid(uint32_t value) {
  
  _impl_.netid_ = value;
}
inline void SyncNetIdMessage_NetIdPath::set_netid(uint32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:unrealpb.SyncNetIdMessage.NetIdPath.netId)
}

// string path = 2;
inline void SyncNetIdMessage_NetIdPath::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& SyncNetIdMessage_NetIdPath::path() const {
  // @@protoc_insertion_point(field_get:unrealpb.SyncNetIdMessage.NetIdPath.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncNetIdMessage_NetIdPath::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.SyncNetIdMessage.NetIdPath.path)
}
inline std::string* SyncNetIdMessage_NetIdPath::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:unrealpb.SyncNetIdMessage.NetIdPath.path)
  return _s;
}
inline const std::string& SyncNetIdMessage_NetIdPath::_internal_path() const {
  return _impl_.path_.Get();
}
inline void SyncNetIdMessage_NetIdPath::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncNetIdMessage_NetIdPath::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncNetIdMessage_NetIdPath::release_path() {
  // @@protoc_insertion_point(field_release:unrealpb.SyncNetIdMessage.NetIdPath.path)
  return _impl_.path_.Release();
}
inline void SyncNetIdMessage_NetIdPath::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SyncNetIdMessage.NetIdPath.path)
}

// -------------------------------------------------------------------

// SyncNetIdMessage

// repeated .unrealpb.SyncNetIdMessage.NetIdPath netIdPaths = 1;
inline int SyncNetIdMessage::_internal_netidpaths_size() const {
  return _impl_.netidpaths_.size();
}
inline int SyncNetIdMessage::netidpaths_size() const {
  return _internal_netidpaths_size();
}
inline void SyncNetIdMessage::clear_netidpaths() {
  _impl_.netidpaths_.Clear();
}
inline ::unrealpb::SyncNetIdMessage_NetIdPath* SyncNetIdMessage::mutable_netidpaths(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.SyncNetIdMessage.netIdPaths)
  return _impl_.netidpaths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::SyncNetIdMessage_NetIdPath >*
SyncNetIdMessage::mutable_netidpaths() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.SyncNetIdMessage.netIdPaths)
  return &_impl_.netidpaths_;
}
inline const ::unrealpb::SyncNetIdMessage_NetIdPath& SyncNetIdMessage::_internal_netidpaths(int index) const {
  return _impl_.netidpaths_.Get(index);
}
inline const ::unrealpb::SyncNetIdMessage_NetIdPath& SyncNetIdMessage::netidpaths(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.SyncNetIdMessage.netIdPaths)
  return _internal_netidpaths(index);
}
inline ::unrealpb::SyncNetIdMessage_NetIdPath* SyncNetIdMessage::_internal_add_netidpaths() {
  return _impl_.netidpaths_.Add();
}
inline ::unrealpb::SyncNetIdMessage_NetIdPath* SyncNetIdMessage::add_netidpaths() {
  ::unrealpb::SyncNetIdMessage_NetIdPath* _add = _internal_add_netidpaths();
  // @@protoc_insertion_point(field_add:unrealpb.SyncNetIdMessage.netIdPaths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::SyncNetIdMessage_NetIdPath >&
SyncNetIdMessage::netidpaths() const {
  // @@protoc_insertion_point(field_list:unrealpb.SyncNetIdMessage.netIdPaths)
  return _impl_.netidpaths_;
}

// -------------------------------------------------------------------

// SpatialEntityState

// .unrealpb.UnrealObjectRef objRef = 1;
inline bool SpatialEntityState::_internal_has_objref() const {
  return this != internal_default_instance() && _impl_.objref_ != nullptr;
}
inline bool SpatialEntityState::has_objref() const {
  return _internal_has_objref();
}
inline void SpatialEntityState::clear_objref() {
  if (GetArenaForAllocation() == nullptr && _impl_.objref_ != nullptr) {
    delete _impl_.objref_;
  }
  _impl_.objref_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& SpatialEntityState::_internal_objref() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.objref_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& SpatialEntityState::objref() const {
  // @@protoc_insertion_point(field_get:unrealpb.SpatialEntityState.objRef)
  return _internal_objref();
}
inline void SpatialEntityState::unsafe_arena_set_allocated_objref(
    ::unrealpb::UnrealObjectRef* objref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objref_);
  }
  _impl_.objref_ = objref;
  if (objref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SpatialEntityState.objRef)
}
inline ::unrealpb::UnrealObjectRef* SpatialEntityState::release_objref() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.objref_;
  _impl_.objref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* SpatialEntityState::unsafe_arena_release_objref() {
  // @@protoc_insertion_point(field_release:unrealpb.SpatialEntityState.objRef)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.objref_;
  _impl_.objref_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* SpatialEntityState::_internal_mutable_objref() {
  
  if (_impl_.objref_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.objref_ = p;
  }
  return _impl_.objref_;
}
inline ::unrealpb::UnrealObjectRef* SpatialEntityState::mutable_objref() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_objref();
  // @@protoc_insertion_point(field_mutable:unrealpb.SpatialEntityState.objRef)
  return _msg;
}
inline void SpatialEntityState::set_allocated_objref(::unrealpb::UnrealObjectRef* objref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.objref_;
  }
  if (objref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(objref);
    if (message_arena != submessage_arena) {
      objref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objref, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objref_ = objref;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SpatialEntityState.objRef)
}

// bool removed = 2;
inline void SpatialEntityState::clear_removed() {
  _impl_.removed_ = false;
}
inline bool SpatialEntityState::_internal_removed() const {
  return _impl_.removed_;
}
inline bool SpatialEntityState::removed() const {
  // @@protoc_insertion_point(field_get:unrealpb.SpatialEntityState.removed)
  return _internal_removed();
}
inline void SpatialEntityState::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void SpatialEntityState::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:unrealpb.SpatialEntityState.removed)
}

// optional .google.protobuf.Any entityData = 3;
inline bool SpatialEntityState::_internal_has_entitydata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.entitydata_ != nullptr);
  return value;
}
inline bool SpatialEntityState::has_entitydata() const {
  return _internal_has_entitydata();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SpatialEntityState::_internal_entitydata() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.entitydata_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SpatialEntityState::entitydata() const {
  // @@protoc_insertion_point(field_get:unrealpb.SpatialEntityState.entityData)
  return _internal_entitydata();
}
inline void SpatialEntityState::unsafe_arena_set_allocated_entitydata(
    ::PROTOBUF_NAMESPACE_ID::Any* entitydata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entitydata_);
  }
  _impl_.entitydata_ = entitydata;
  if (entitydata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SpatialEntityState.entityData)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SpatialEntityState::release_entitydata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.entitydata_;
  _impl_.entitydata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SpatialEntityState::unsafe_arena_release_entitydata() {
  // @@protoc_insertion_point(field_release:unrealpb.SpatialEntityState.entityData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.entitydata_;
  _impl_.entitydata_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SpatialEntityState::_internal_mutable_entitydata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.entitydata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.entitydata_ = p;
  }
  return _impl_.entitydata_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SpatialEntityState::mutable_entitydata() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_entitydata();
  // @@protoc_insertion_point(field_mutable:unrealpb.SpatialEntityState.entityData)
  return _msg;
}
inline void SpatialEntityState::set_allocated_entitydata(::PROTOBUF_NAMESPACE_ID::Any* entitydata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entitydata_);
  }
  if (entitydata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entitydata));
    if (message_arena != submessage_arena) {
      entitydata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entitydata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.entitydata_ = entitydata;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SpatialEntityState.entityData)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SpatialChannelData

// map<uint32, .unrealpb.SpatialEntityState> entities = 1;
inline int SpatialChannelData::_internal_entities_size() const {
  return _impl_.entities_.size();
}
inline int SpatialChannelData::entities_size() const {
  return _internal_entities_size();
}
inline void SpatialChannelData::clear_entities() {
  _impl_.entities_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SpatialEntityState >&
SpatialChannelData::_internal_entities() const {
  return _impl_.entities_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SpatialEntityState >&
SpatialChannelData::entities() const {
  // @@protoc_insertion_point(field_map:unrealpb.SpatialChannelData.entities)
  return _internal_entities();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SpatialEntityState >*
SpatialChannelData::_internal_mutable_entities() {
  return _impl_.entities_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SpatialEntityState >*
SpatialChannelData::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_map:unrealpb.SpatialChannelData.entities)
  return _internal_mutable_entities();
}

// -------------------------------------------------------------------

// FRepMovement

// optional .unrealpb.FVector linearVelocity = 1;
inline bool FRepMovement::_internal_has_linearvelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linearvelocity_ != nullptr);
  return value;
}
inline bool FRepMovement::has_linearvelocity() const {
  return _internal_has_linearvelocity();
}
inline void FRepMovement::clear_linearvelocity() {
  if (_impl_.linearvelocity_ != nullptr) _impl_.linearvelocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::unrealpb::FVector& FRepMovement::_internal_linearvelocity() const {
  const ::unrealpb::FVector* p = _impl_.linearvelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepMovement::linearvelocity() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepMovement.linearVelocity)
  return _internal_linearvelocity();
}
inline void FRepMovement::unsafe_arena_set_allocated_linearvelocity(
    ::unrealpb::FVector* linearvelocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linearvelocity_);
  }
  _impl_.linearvelocity_ = linearvelocity;
  if (linearvelocity) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepMovement.linearVelocity)
}
inline ::unrealpb::FVector* FRepMovement::release_linearvelocity() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.linearvelocity_;
  _impl_.linearvelocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepMovement::unsafe_arena_release_linearvelocity() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepMovement.linearVelocity)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.linearvelocity_;
  _impl_.linearvelocity_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepMovement::_internal_mutable_linearvelocity() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.linearvelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.linearvelocity_ = p;
  }
  return _impl_.linearvelocity_;
}
inline ::unrealpb::FVector* FRepMovement::mutable_linearvelocity() {
  ::unrealpb::FVector* _msg = _internal_mutable_linearvelocity();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepMovement.linearVelocity)
  return _msg;
}
inline void FRepMovement::set_allocated_linearvelocity(::unrealpb::FVector* linearvelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.linearvelocity_;
  }
  if (linearvelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(linearvelocity);
    if (message_arena != submessage_arena) {
      linearvelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linearvelocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.linearvelocity_ = linearvelocity;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepMovement.linearVelocity)
}

// optional .unrealpb.FVector angularVelocity = 2;
inline bool FRepMovement::_internal_has_angularvelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angularvelocity_ != nullptr);
  return value;
}
inline bool FRepMovement::has_angularvelocity() const {
  return _internal_has_angularvelocity();
}
inline void FRepMovement::clear_angularvelocity() {
  if (_impl_.angularvelocity_ != nullptr) _impl_.angularvelocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::FVector& FRepMovement::_internal_angularvelocity() const {
  const ::unrealpb::FVector* p = _impl_.angularvelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepMovement::angularvelocity() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepMovement.angularVelocity)
  return _internal_angularvelocity();
}
inline void FRepMovement::unsafe_arena_set_allocated_angularvelocity(
    ::unrealpb::FVector* angularvelocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelocity_);
  }
  _impl_.angularvelocity_ = angularvelocity;
  if (angularvelocity) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepMovement.angularVelocity)
}
inline ::unrealpb::FVector* FRepMovement::release_angularvelocity() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FVector* temp = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepMovement::unsafe_arena_release_angularvelocity() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepMovement.angularVelocity)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FVector* temp = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepMovement::_internal_mutable_angularvelocity() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.angularvelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.angularvelocity_ = p;
  }
  return _impl_.angularvelocity_;
}
inline ::unrealpb::FVector* FRepMovement::mutable_angularvelocity() {
  ::unrealpb::FVector* _msg = _internal_mutable_angularvelocity();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepMovement.angularVelocity)
  return _msg;
}
inline void FRepMovement::set_allocated_angularvelocity(::unrealpb::FVector* angularvelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.angularvelocity_;
  }
  if (angularvelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angularvelocity);
    if (message_arena != submessage_arena) {
      angularvelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularvelocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.angularvelocity_ = angularvelocity;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepMovement.angularVelocity)
}

// optional .unrealpb.FVector location = 3;
inline bool FRepMovement::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool FRepMovement::has_location() const {
  return _internal_has_location();
}
inline void FRepMovement::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::unrealpb::FVector& FRepMovement::_internal_location() const {
  const ::unrealpb::FVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepMovement::location() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepMovement.location)
  return _internal_location();
}
inline void FRepMovement::unsafe_arena_set_allocated_location(
    ::unrealpb::FVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepMovement.location)
}
inline ::unrealpb::FVector* FRepMovement::release_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepMovement::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepMovement.location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepMovement::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::unrealpb::FVector* FRepMovement::mutable_location() {
  ::unrealpb::FVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepMovement.location)
  return _msg;
}
inline void FRepMovement::set_allocated_location(::unrealpb::FVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepMovement.location)
}

// optional .unrealpb.FVector rotation = 4;
inline bool FRepMovement::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool FRepMovement::has_rotation() const {
  return _internal_has_rotation();
}
inline void FRepMovement::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::unrealpb::FVector& FRepMovement::_internal_rotation() const {
  const ::unrealpb::FVector* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepMovement::rotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepMovement.rotation)
  return _internal_rotation();
}
inline void FRepMovement::unsafe_arena_set_allocated_rotation(
    ::unrealpb::FVector* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepMovement.rotation)
}
inline ::unrealpb::FVector* FRepMovement::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepMovement::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepMovement.rotation)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepMovement::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::unrealpb::FVector* FRepMovement::mutable_rotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepMovement.rotation)
  return _msg;
}
inline void FRepMovement::set_allocated_rotation(::unrealpb::FVector* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepMovement.rotation)
}

// optional bool bSimulatedPhysicSleep = 5;
inline bool FRepMovement::_internal_has_bsimulatedphysicsleep() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FRepMovement::has_bsimulatedphysicsleep() const {
  return _internal_has_bsimulatedphysicsleep();
}
inline void FRepMovement::clear_bsimulatedphysicsleep() {
  _impl_.bsimulatedphysicsleep_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FRepMovement::_internal_bsimulatedphysicsleep() const {
  return _impl_.bsimulatedphysicsleep_;
}
inline bool FRepMovement::bsimulatedphysicsleep() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepMovement.bSimulatedPhysicSleep)
  return _internal_bsimulatedphysicsleep();
}
inline void FRepMovement::_internal_set_bsimulatedphysicsleep(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bsimulatedphysicsleep_ = value;
}
inline void FRepMovement::set_bsimulatedphysicsleep(bool value) {
  _internal_set_bsimulatedphysicsleep(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRepMovement.bSimulatedPhysicSleep)
}

// optional bool bRepPhysics = 6;
inline bool FRepMovement::_internal_has_brepphysics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FRepMovement::has_brepphysics() const {
  return _internal_has_brepphysics();
}
inline void FRepMovement::clear_brepphysics() {
  _impl_.brepphysics_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FRepMovement::_internal_brepphysics() const {
  return _impl_.brepphysics_;
}
inline bool FRepMovement::brepphysics() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepMovement.bRepPhysics)
  return _internal_brepphysics();
}
inline void FRepMovement::_internal_set_brepphysics(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.brepphysics_ = value;
}
inline void FRepMovement::set_brepphysics(bool value) {
  _internal_set_brepphysics(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRepMovement.bRepPhysics)
}

// -------------------------------------------------------------------

// FRepAttachment

// optional .unrealpb.UnrealObjectRef attachParent = 1;
inline bool FRepAttachment::_internal_has_attachparent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attachparent_ != nullptr);
  return value;
}
inline bool FRepAttachment::has_attachparent() const {
  return _internal_has_attachparent();
}
inline void FRepAttachment::clear_attachparent() {
  if (_impl_.attachparent_ != nullptr) _impl_.attachparent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::UnrealObjectRef& FRepAttachment::_internal_attachparent() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.attachparent_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& FRepAttachment::attachparent() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepAttachment.attachParent)
  return _internal_attachparent();
}
inline void FRepAttachment::unsafe_arena_set_allocated_attachparent(
    ::unrealpb::UnrealObjectRef* attachparent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attachparent_);
  }
  _impl_.attachparent_ = attachparent;
  if (attachparent) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepAttachment.attachParent)
}
inline ::unrealpb::UnrealObjectRef* FRepAttachment::release_attachparent() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.attachparent_;
  _impl_.attachparent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* FRepAttachment::unsafe_arena_release_attachparent() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepAttachment.attachParent)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.attachparent_;
  _impl_.attachparent_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* FRepAttachment::_internal_mutable_attachparent() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.attachparent_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.attachparent_ = p;
  }
  return _impl_.attachparent_;
}
inline ::unrealpb::UnrealObjectRef* FRepAttachment::mutable_attachparent() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_attachparent();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepAttachment.attachParent)
  return _msg;
}
inline void FRepAttachment::set_allocated_attachparent(::unrealpb::UnrealObjectRef* attachparent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attachparent_;
  }
  if (attachparent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attachparent);
    if (message_arena != submessage_arena) {
      attachparent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachparent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attachparent_ = attachparent;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepAttachment.attachParent)
}

// optional .unrealpb.FVector locationOffset = 2;
inline bool FRepAttachment::_internal_has_locationoffset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.locationoffset_ != nullptr);
  return value;
}
inline bool FRepAttachment::has_locationoffset() const {
  return _internal_has_locationoffset();
}
inline void FRepAttachment::clear_locationoffset() {
  if (_impl_.locationoffset_ != nullptr) _impl_.locationoffset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::unrealpb::FVector& FRepAttachment::_internal_locationoffset() const {
  const ::unrealpb::FVector* p = _impl_.locationoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepAttachment::locationoffset() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepAttachment.locationOffset)
  return _internal_locationoffset();
}
inline void FRepAttachment::unsafe_arena_set_allocated_locationoffset(
    ::unrealpb::FVector* locationoffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.locationoffset_);
  }
  _impl_.locationoffset_ = locationoffset;
  if (locationoffset) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepAttachment.locationOffset)
}
inline ::unrealpb::FVector* FRepAttachment::release_locationoffset() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.locationoffset_;
  _impl_.locationoffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepAttachment::unsafe_arena_release_locationoffset() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepAttachment.locationOffset)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.locationoffset_;
  _impl_.locationoffset_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepAttachment::_internal_mutable_locationoffset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.locationoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.locationoffset_ = p;
  }
  return _impl_.locationoffset_;
}
inline ::unrealpb::FVector* FRepAttachment::mutable_locationoffset() {
  ::unrealpb::FVector* _msg = _internal_mutable_locationoffset();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepAttachment.locationOffset)
  return _msg;
}
inline void FRepAttachment::set_allocated_locationoffset(::unrealpb::FVector* locationoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.locationoffset_;
  }
  if (locationoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locationoffset);
    if (message_arena != submessage_arena) {
      locationoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationoffset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.locationoffset_ = locationoffset;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepAttachment.locationOffset)
}

// optional .unrealpb.FVector relativeScale = 3;
inline bool FRepAttachment::_internal_has_relativescale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relativescale_ != nullptr);
  return value;
}
inline bool FRepAttachment::has_relativescale() const {
  return _internal_has_relativescale();
}
inline void FRepAttachment::clear_relativescale() {
  if (_impl_.relativescale_ != nullptr) _impl_.relativescale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::unrealpb::FVector& FRepAttachment::_internal_relativescale() const {
  const ::unrealpb::FVector* p = _impl_.relativescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepAttachment::relativescale() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepAttachment.relativeScale)
  return _internal_relativescale();
}
inline void FRepAttachment::unsafe_arena_set_allocated_relativescale(
    ::unrealpb::FVector* relativescale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativescale_);
  }
  _impl_.relativescale_ = relativescale;
  if (relativescale) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepAttachment.relativeScale)
}
inline ::unrealpb::FVector* FRepAttachment::release_relativescale() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepAttachment::unsafe_arena_release_relativescale() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepAttachment.relativeScale)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepAttachment::_internal_mutable_relativescale() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.relativescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativescale_ = p;
  }
  return _impl_.relativescale_;
}
inline ::unrealpb::FVector* FRepAttachment::mutable_relativescale() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativescale();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepAttachment.relativeScale)
  return _msg;
}
inline void FRepAttachment::set_allocated_relativescale(::unrealpb::FVector* relativescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativescale_;
  }
  if (relativescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativescale);
    if (message_arena != submessage_arena) {
      relativescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativescale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.relativescale_ = relativescale;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepAttachment.relativeScale)
}

// optional .unrealpb.FVector rotationOffset = 4;
inline bool FRepAttachment::_internal_has_rotationoffset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotationoffset_ != nullptr);
  return value;
}
inline bool FRepAttachment::has_rotationoffset() const {
  return _internal_has_rotationoffset();
}
inline void FRepAttachment::clear_rotationoffset() {
  if (_impl_.rotationoffset_ != nullptr) _impl_.rotationoffset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::unrealpb::FVector& FRepAttachment::_internal_rotationoffset() const {
  const ::unrealpb::FVector* p = _impl_.rotationoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepAttachment::rotationoffset() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepAttachment.rotationOffset)
  return _internal_rotationoffset();
}
inline void FRepAttachment::unsafe_arena_set_allocated_rotationoffset(
    ::unrealpb::FVector* rotationoffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotationoffset_);
  }
  _impl_.rotationoffset_ = rotationoffset;
  if (rotationoffset) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepAttachment.rotationOffset)
}
inline ::unrealpb::FVector* FRepAttachment::release_rotationoffset() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::FVector* temp = _impl_.rotationoffset_;
  _impl_.rotationoffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepAttachment::unsafe_arena_release_rotationoffset() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepAttachment.rotationOffset)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::FVector* temp = _impl_.rotationoffset_;
  _impl_.rotationoffset_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepAttachment::_internal_mutable_rotationoffset() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.rotationoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.rotationoffset_ = p;
  }
  return _impl_.rotationoffset_;
}
inline ::unrealpb::FVector* FRepAttachment::mutable_rotationoffset() {
  ::unrealpb::FVector* _msg = _internal_mutable_rotationoffset();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepAttachment.rotationOffset)
  return _msg;
}
inline void FRepAttachment::set_allocated_rotationoffset(::unrealpb::FVector* rotationoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotationoffset_;
  }
  if (rotationoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotationoffset);
    if (message_arena != submessage_arena) {
      rotationoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotationoffset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.rotationoffset_ = rotationoffset;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepAttachment.rotationOffset)
}

// optional string attachSocket = 5;
inline bool FRepAttachment::_internal_has_attachsocket() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FRepAttachment::has_attachsocket() const {
  return _internal_has_attachsocket();
}
inline void FRepAttachment::clear_attachsocket() {
  _impl_.attachsocket_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FRepAttachment::attachsocket() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepAttachment.attachSocket)
  return _internal_attachsocket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FRepAttachment::set_attachsocket(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attachsocket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.FRepAttachment.attachSocket)
}
inline std::string* FRepAttachment::mutable_attachsocket() {
  std::string* _s = _internal_mutable_attachsocket();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepAttachment.attachSocket)
  return _s;
}
inline const std::string& FRepAttachment::_internal_attachsocket() const {
  return _impl_.attachsocket_.Get();
}
inline void FRepAttachment::_internal_set_attachsocket(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attachsocket_.Set(value, GetArenaForAllocation());
}
inline std::string* FRepAttachment::_internal_mutable_attachsocket() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attachsocket_.Mutable(GetArenaForAllocation());
}
inline std::string* FRepAttachment::release_attachsocket() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepAttachment.attachSocket)
  if (!_internal_has_attachsocket()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attachsocket_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachsocket_.IsDefault()) {
    _impl_.attachsocket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FRepAttachment::set_allocated_attachsocket(std::string* attachsocket) {
  if (attachsocket != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attachsocket_.SetAllocated(attachsocket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachsocket_.IsDefault()) {
    _impl_.attachsocket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepAttachment.attachSocket)
}

// optional .unrealpb.ActorComponentRef attachComponent = 6;
inline bool FRepAttachment::_internal_has_attachcomponent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attachcomponent_ != nullptr);
  return value;
}
inline bool FRepAttachment::has_attachcomponent() const {
  return _internal_has_attachcomponent();
}
inline void FRepAttachment::clear_attachcomponent() {
  if (_impl_.attachcomponent_ != nullptr) _impl_.attachcomponent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::unrealpb::ActorComponentRef& FRepAttachment::_internal_attachcomponent() const {
  const ::unrealpb::ActorComponentRef* p = _impl_.attachcomponent_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::ActorComponentRef&>(
      ::unrealpb::_ActorComponentRef_default_instance_);
}
inline const ::unrealpb::ActorComponentRef& FRepAttachment::attachcomponent() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepAttachment.attachComponent)
  return _internal_attachcomponent();
}
inline void FRepAttachment::unsafe_arena_set_allocated_attachcomponent(
    ::unrealpb::ActorComponentRef* attachcomponent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attachcomponent_);
  }
  _impl_.attachcomponent_ = attachcomponent;
  if (attachcomponent) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepAttachment.attachComponent)
}
inline ::unrealpb::ActorComponentRef* FRepAttachment::release_attachcomponent() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::unrealpb::ActorComponentRef* temp = _impl_.attachcomponent_;
  _impl_.attachcomponent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::ActorComponentRef* FRepAttachment::unsafe_arena_release_attachcomponent() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepAttachment.attachComponent)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::unrealpb::ActorComponentRef* temp = _impl_.attachcomponent_;
  _impl_.attachcomponent_ = nullptr;
  return temp;
}
inline ::unrealpb::ActorComponentRef* FRepAttachment::_internal_mutable_attachcomponent() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.attachcomponent_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::ActorComponentRef>(GetArenaForAllocation());
    _impl_.attachcomponent_ = p;
  }
  return _impl_.attachcomponent_;
}
inline ::unrealpb::ActorComponentRef* FRepAttachment::mutable_attachcomponent() {
  ::unrealpb::ActorComponentRef* _msg = _internal_mutable_attachcomponent();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepAttachment.attachComponent)
  return _msg;
}
inline void FRepAttachment::set_allocated_attachcomponent(::unrealpb::ActorComponentRef* attachcomponent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attachcomponent_;
  }
  if (attachcomponent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attachcomponent);
    if (message_arena != submessage_arena) {
      attachcomponent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachcomponent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.attachcomponent_ = attachcomponent;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepAttachment.attachComponent)
}

// -------------------------------------------------------------------

// ActorState

// bool removed = 1;
inline void ActorState::clear_removed() {
  _impl_.removed_ = false;
}
inline bool ActorState::_internal_removed() const {
  return _impl_.removed_;
}
inline bool ActorState::removed() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.removed)
  return _internal_removed();
}
inline void ActorState::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void ActorState::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorState.removed)
}

// optional uint32 owningConnId = 2;
inline bool ActorState::_internal_has_owningconnid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ActorState::has_owningconnid() const {
  return _internal_has_owningconnid();
}
inline void ActorState::clear_owningconnid() {
  _impl_.owningconnid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ActorState::_internal_owningconnid() const {
  return _impl_.owningconnid_;
}
inline uint32_t ActorState::owningconnid() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.owningConnId)
  return _internal_owningconnid();
}
inline void ActorState::_internal_set_owningconnid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.owningconnid_ = value;
}
inline void ActorState::set_owningconnid(uint32_t value) {
  _internal_set_owningconnid(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorState.owningConnId)
}

// optional bool bReplicateMovement = 3;
inline bool ActorState::_internal_has_breplicatemovement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ActorState::has_breplicatemovement() const {
  return _internal_has_breplicatemovement();
}
inline void ActorState::clear_breplicatemovement() {
  _impl_.breplicatemovement_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ActorState::_internal_breplicatemovement() const {
  return _impl_.breplicatemovement_;
}
inline bool ActorState::breplicatemovement() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.bReplicateMovement)
  return _internal_breplicatemovement();
}
inline void ActorState::_internal_set_breplicatemovement(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.breplicatemovement_ = value;
}
inline void ActorState::set_breplicatemovement(bool value) {
  _internal_set_breplicatemovement(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorState.bReplicateMovement)
}

// optional uint32 localRole = 4;
inline bool ActorState::_internal_has_localrole() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ActorState::has_localrole() const {
  return _internal_has_localrole();
}
inline void ActorState::clear_localrole() {
  _impl_.localrole_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ActorState::_internal_localrole() const {
  return _impl_.localrole_;
}
inline uint32_t ActorState::localrole() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.localRole)
  return _internal_localrole();
}
inline void ActorState::_internal_set_localrole(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.localrole_ = value;
}
inline void ActorState::set_localrole(uint32_t value) {
  _internal_set_localrole(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorState.localRole)
}

// optional uint32 remoteRole = 5;
inline bool ActorState::_internal_has_remoterole() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ActorState::has_remoterole() const {
  return _internal_has_remoterole();
}
inline void ActorState::clear_remoterole() {
  _impl_.remoterole_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t ActorState::_internal_remoterole() const {
  return _impl_.remoterole_;
}
inline uint32_t ActorState::remoterole() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.remoteRole)
  return _internal_remoterole();
}
inline void ActorState::_internal_set_remoterole(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.remoterole_ = value;
}
inline void ActorState::set_remoterole(uint32_t value) {
  _internal_set_remoterole(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorState.remoteRole)
}

// optional .unrealpb.UnrealObjectRef owner = 6;
inline bool ActorState::_internal_has_owner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.owner_ != nullptr);
  return value;
}
inline bool ActorState::has_owner() const {
  return _internal_has_owner();
}
inline void ActorState::clear_owner() {
  if (_impl_.owner_ != nullptr) _impl_.owner_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::unrealpb::UnrealObjectRef& ActorState::_internal_owner() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& ActorState::owner() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.owner)
  return _internal_owner();
}
inline void ActorState::unsafe_arena_set_allocated_owner(
    ::unrealpb::UnrealObjectRef* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.ActorState.owner)
}
inline ::unrealpb::UnrealObjectRef* ActorState::release_owner() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ActorState::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:unrealpb.ActorState.owner)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ActorState::_internal_mutable_owner() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::unrealpb::UnrealObjectRef* ActorState::mutable_owner() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:unrealpb.ActorState.owner)
  return _msg;
}
inline void ActorState::set_allocated_owner(::unrealpb::UnrealObjectRef* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ActorState.owner)
}

// optional bool bHidden = 7;
inline bool ActorState::_internal_has_bhidden() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ActorState::has_bhidden() const {
  return _internal_has_bhidden();
}
inline void ActorState::clear_bhidden() {
  _impl_.bhidden_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ActorState::_internal_bhidden() const {
  return _impl_.bhidden_;
}
inline bool ActorState::bhidden() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.bHidden)
  return _internal_bhidden();
}
inline void ActorState::_internal_set_bhidden(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bhidden_ = value;
}
inline void ActorState::set_bhidden(bool value) {
  _internal_set_bhidden(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorState.bHidden)
}

// optional bool bTearOff = 8;
inline bool ActorState::_internal_has_btearoff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ActorState::has_btearoff() const {
  return _internal_has_btearoff();
}
inline void ActorState::clear_btearoff() {
  _impl_.btearoff_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool ActorState::_internal_btearoff() const {
  return _impl_.btearoff_;
}
inline bool ActorState::btearoff() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.bTearOff)
  return _internal_btearoff();
}
inline void ActorState::_internal_set_btearoff(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.btearoff_ = value;
}
inline void ActorState::set_btearoff(bool value) {
  _internal_set_btearoff(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorState.bTearOff)
}

// optional bool bCanBeDamaged = 9;
inline bool ActorState::_internal_has_bcanbedamaged() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ActorState::has_bcanbedamaged() const {
  return _internal_has_bcanbedamaged();
}
inline void ActorState::clear_bcanbedamaged() {
  _impl_.bcanbedamaged_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ActorState::_internal_bcanbedamaged() const {
  return _impl_.bcanbedamaged_;
}
inline bool ActorState::bcanbedamaged() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.bCanBeDamaged)
  return _internal_bcanbedamaged();
}
inline void ActorState::_internal_set_bcanbedamaged(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bcanbedamaged_ = value;
}
inline void ActorState::set_bcanbedamaged(bool value) {
  _internal_set_bcanbedamaged(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorState.bCanBeDamaged)
}

// optional .unrealpb.UnrealObjectRef instigator = 10;
inline bool ActorState::_internal_has_instigator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instigator_ != nullptr);
  return value;
}
inline bool ActorState::has_instigator() const {
  return _internal_has_instigator();
}
inline void ActorState::clear_instigator() {
  if (_impl_.instigator_ != nullptr) _impl_.instigator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::UnrealObjectRef& ActorState::_internal_instigator() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.instigator_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& ActorState::instigator() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.instigator)
  return _internal_instigator();
}
inline void ActorState::unsafe_arena_set_allocated_instigator(
    ::unrealpb::UnrealObjectRef* instigator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instigator_);
  }
  _impl_.instigator_ = instigator;
  if (instigator) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.ActorState.instigator)
}
inline ::unrealpb::UnrealObjectRef* ActorState::release_instigator() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.instigator_;
  _impl_.instigator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ActorState::unsafe_arena_release_instigator() {
  // @@protoc_insertion_point(field_release:unrealpb.ActorState.instigator)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.instigator_;
  _impl_.instigator_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ActorState::_internal_mutable_instigator() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.instigator_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.instigator_ = p;
  }
  return _impl_.instigator_;
}
inline ::unrealpb::UnrealObjectRef* ActorState::mutable_instigator() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_instigator();
  // @@protoc_insertion_point(field_mutable:unrealpb.ActorState.instigator)
  return _msg;
}
inline void ActorState::set_allocated_instigator(::unrealpb::UnrealObjectRef* instigator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.instigator_;
  }
  if (instigator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(instigator);
    if (message_arena != submessage_arena) {
      instigator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instigator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.instigator_ = instigator;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ActorState.instigator)
}

// optional .unrealpb.FRepMovement replicatedMovement = 11;
inline bool ActorState::_internal_has_replicatedmovement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replicatedmovement_ != nullptr);
  return value;
}
inline bool ActorState::has_replicatedmovement() const {
  return _internal_has_replicatedmovement();
}
inline void ActorState::clear_replicatedmovement() {
  if (_impl_.replicatedmovement_ != nullptr) _impl_.replicatedmovement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::unrealpb::FRepMovement& ActorState::_internal_replicatedmovement() const {
  const ::unrealpb::FRepMovement* p = _impl_.replicatedmovement_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FRepMovement&>(
      ::unrealpb::_FRepMovement_default_instance_);
}
inline const ::unrealpb::FRepMovement& ActorState::replicatedmovement() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.replicatedMovement)
  return _internal_replicatedmovement();
}
inline void ActorState::unsafe_arena_set_allocated_replicatedmovement(
    ::unrealpb::FRepMovement* replicatedmovement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replicatedmovement_);
  }
  _impl_.replicatedmovement_ = replicatedmovement;
  if (replicatedmovement) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.ActorState.replicatedMovement)
}
inline ::unrealpb::FRepMovement* ActorState::release_replicatedmovement() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FRepMovement* temp = _impl_.replicatedmovement_;
  _impl_.replicatedmovement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FRepMovement* ActorState::unsafe_arena_release_replicatedmovement() {
  // @@protoc_insertion_point(field_release:unrealpb.ActorState.replicatedMovement)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FRepMovement* temp = _impl_.replicatedmovement_;
  _impl_.replicatedmovement_ = nullptr;
  return temp;
}
inline ::unrealpb::FRepMovement* ActorState::_internal_mutable_replicatedmovement() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.replicatedmovement_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FRepMovement>(GetArenaForAllocation());
    _impl_.replicatedmovement_ = p;
  }
  return _impl_.replicatedmovement_;
}
inline ::unrealpb::FRepMovement* ActorState::mutable_replicatedmovement() {
  ::unrealpb::FRepMovement* _msg = _internal_mutable_replicatedmovement();
  // @@protoc_insertion_point(field_mutable:unrealpb.ActorState.replicatedMovement)
  return _msg;
}
inline void ActorState::set_allocated_replicatedmovement(::unrealpb::FRepMovement* replicatedmovement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.replicatedmovement_;
  }
  if (replicatedmovement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(replicatedmovement);
    if (message_arena != submessage_arena) {
      replicatedmovement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replicatedmovement, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.replicatedmovement_ = replicatedmovement;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ActorState.replicatedMovement)
}

// optional .unrealpb.FRepAttachment attachmentReplication = 12;
inline bool ActorState::_internal_has_attachmentreplication() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attachmentreplication_ != nullptr);
  return value;
}
inline bool ActorState::has_attachmentreplication() const {
  return _internal_has_attachmentreplication();
}
inline void ActorState::clear_attachmentreplication() {
  if (_impl_.attachmentreplication_ != nullptr) _impl_.attachmentreplication_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::unrealpb::FRepAttachment& ActorState::_internal_attachmentreplication() const {
  const ::unrealpb::FRepAttachment* p = _impl_.attachmentreplication_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FRepAttachment&>(
      ::unrealpb::_FRepAttachment_default_instance_);
}
inline const ::unrealpb::FRepAttachment& ActorState::attachmentreplication() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorState.attachmentReplication)
  return _internal_attachmentreplication();
}
inline void ActorState::unsafe_arena_set_allocated_attachmentreplication(
    ::unrealpb::FRepAttachment* attachmentreplication) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attachmentreplication_);
  }
  _impl_.attachmentreplication_ = attachmentreplication;
  if (attachmentreplication) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.ActorState.attachmentReplication)
}
inline ::unrealpb::FRepAttachment* ActorState::release_attachmentreplication() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FRepAttachment* temp = _impl_.attachmentreplication_;
  _impl_.attachmentreplication_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FRepAttachment* ActorState::unsafe_arena_release_attachmentreplication() {
  // @@protoc_insertion_point(field_release:unrealpb.ActorState.attachmentReplication)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FRepAttachment* temp = _impl_.attachmentreplication_;
  _impl_.attachmentreplication_ = nullptr;
  return temp;
}
inline ::unrealpb::FRepAttachment* ActorState::_internal_mutable_attachmentreplication() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.attachmentreplication_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FRepAttachment>(GetArenaForAllocation());
    _impl_.attachmentreplication_ = p;
  }
  return _impl_.attachmentreplication_;
}
inline ::unrealpb::FRepAttachment* ActorState::mutable_attachmentreplication() {
  ::unrealpb::FRepAttachment* _msg = _internal_mutable_attachmentreplication();
  // @@protoc_insertion_point(field_mutable:unrealpb.ActorState.attachmentReplication)
  return _msg;
}
inline void ActorState::set_allocated_attachmentreplication(::unrealpb::FRepAttachment* attachmentreplication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attachmentreplication_;
  }
  if (attachmentreplication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attachmentreplication);
    if (message_arena != submessage_arena) {
      attachmentreplication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachmentreplication, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.attachmentreplication_ = attachmentreplication;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ActorState.attachmentReplication)
}

// -------------------------------------------------------------------

// ActorComponentState

// bool removed = 1;
inline void ActorComponentState::clear_removed() {
  _impl_.removed_ = false;
}
inline bool ActorComponentState::_internal_removed() const {
  return _impl_.removed_;
}
inline bool ActorComponentState::removed() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorComponentState.removed)
  return _internal_removed();
}
inline void ActorComponentState::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void ActorComponentState::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorComponentState.removed)
}

// optional bool bIsActive = 2;
inline bool ActorComponentState::_internal_has_bisactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActorComponentState::has_bisactive() const {
  return _internal_has_bisactive();
}
inline void ActorComponentState::clear_bisactive() {
  _impl_.bisactive_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ActorComponentState::_internal_bisactive() const {
  return _impl_.bisactive_;
}
inline bool ActorComponentState::bisactive() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorComponentState.bIsActive)
  return _internal_bisactive();
}
inline void ActorComponentState::_internal_set_bisactive(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bisactive_ = value;
}
inline void ActorComponentState::set_bisactive(bool value) {
  _internal_set_bisactive(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorComponentState.bIsActive)
}

// optional bool bReplicated = 3;
inline bool ActorComponentState::_internal_has_breplicated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ActorComponentState::has_breplicated() const {
  return _internal_has_breplicated();
}
inline void ActorComponentState::clear_breplicated() {
  _impl_.breplicated_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ActorComponentState::_internal_breplicated() const {
  return _impl_.breplicated_;
}
inline bool ActorComponentState::breplicated() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorComponentState.bReplicated)
  return _internal_breplicated();
}
inline void ActorComponentState::_internal_set_breplicated(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.breplicated_ = value;
}
inline void ActorComponentState::set_breplicated(bool value) {
  _internal_set_breplicated(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorComponentState.bReplicated)
}

// -------------------------------------------------------------------

// SceneComponentState

// bool removed = 1;
inline void SceneComponentState::clear_removed() {
  _impl_.removed_ = false;
}
inline bool SceneComponentState::_internal_removed() const {
  return _impl_.removed_;
}
inline bool SceneComponentState::removed() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.removed)
  return _internal_removed();
}
inline void SceneComponentState::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void SceneComponentState::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.removed)
}

// optional bool bAbsoluteLocation = 2;
inline bool SceneComponentState::_internal_has_babsolutelocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SceneComponentState::has_babsolutelocation() const {
  return _internal_has_babsolutelocation();
}
inline void SceneComponentState::clear_babsolutelocation() {
  _impl_.babsolutelocation_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool SceneComponentState::_internal_babsolutelocation() const {
  return _impl_.babsolutelocation_;
}
inline bool SceneComponentState::babsolutelocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bAbsoluteLocation)
  return _internal_babsolutelocation();
}
inline void SceneComponentState::_internal_set_babsolutelocation(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.babsolutelocation_ = value;
}
inline void SceneComponentState::set_babsolutelocation(bool value) {
  _internal_set_babsolutelocation(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bAbsoluteLocation)
}

// optional bool bAbsoluteRotation = 3;
inline bool SceneComponentState::_internal_has_babsoluterotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SceneComponentState::has_babsoluterotation() const {
  return _internal_has_babsoluterotation();
}
inline void SceneComponentState::clear_babsoluterotation() {
  _impl_.babsoluterotation_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool SceneComponentState::_internal_babsoluterotation() const {
  return _impl_.babsoluterotation_;
}
inline bool SceneComponentState::babsoluterotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bAbsoluteRotation)
  return _internal_babsoluterotation();
}
inline void SceneComponentState::_internal_set_babsoluterotation(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.babsoluterotation_ = value;
}
inline void SceneComponentState::set_babsoluterotation(bool value) {
  _internal_set_babsoluterotation(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bAbsoluteRotation)
}

// optional bool bAbsoluteScale = 4;
inline bool SceneComponentState::_internal_has_babsolutescale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SceneComponentState::has_babsolutescale() const {
  return _internal_has_babsolutescale();
}
inline void SceneComponentState::clear_babsolutescale() {
  _impl_.babsolutescale_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool SceneComponentState::_internal_babsolutescale() const {
  return _impl_.babsolutescale_;
}
inline bool SceneComponentState::babsolutescale() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bAbsoluteScale)
  return _internal_babsolutescale();
}
inline void SceneComponentState::_internal_set_babsolutescale(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.babsolutescale_ = value;
}
inline void SceneComponentState::set_babsolutescale(bool value) {
  _internal_set_babsolutescale(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bAbsoluteScale)
}

// optional bool bVisible = 5;
inline bool SceneComponentState::_internal_has_bvisible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SceneComponentState::has_bvisible() const {
  return _internal_has_bvisible();
}
inline void SceneComponentState::clear_bvisible() {
  _impl_.bvisible_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool SceneComponentState::_internal_bvisible() const {
  return _impl_.bvisible_;
}
inline bool SceneComponentState::bvisible() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bVisible)
  return _internal_bvisible();
}
inline void SceneComponentState::_internal_set_bvisible(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bvisible_ = value;
}
inline void SceneComponentState::set_bvisible(bool value) {
  _internal_set_bvisible(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bVisible)
}

// optional bool bShouldBeAttached = 6;
inline bool SceneComponentState::_internal_has_bshouldbeattached() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SceneComponentState::has_bshouldbeattached() const {
  return _internal_has_bshouldbeattached();
}
inline void SceneComponentState::clear_bshouldbeattached() {
  _impl_.bshouldbeattached_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool SceneComponentState::_internal_bshouldbeattached() const {
  return _impl_.bshouldbeattached_;
}
inline bool SceneComponentState::bshouldbeattached() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bShouldBeAttached)
  return _internal_bshouldbeattached();
}
inline void SceneComponentState::_internal_set_bshouldbeattached(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bshouldbeattached_ = value;
}
inline void SceneComponentState::set_bshouldbeattached(bool value) {
  _internal_set_bshouldbeattached(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bShouldBeAttached)
}

// optional bool bShouldSnapLocationWhenAttached = 7;
inline bool SceneComponentState::_internal_has_bshouldsnaplocationwhenattached() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SceneComponentState::has_bshouldsnaplocationwhenattached() const {
  return _internal_has_bshouldsnaplocationwhenattached();
}
inline void SceneComponentState::clear_bshouldsnaplocationwhenattached() {
  _impl_.bshouldsnaplocationwhenattached_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool SceneComponentState::_internal_bshouldsnaplocationwhenattached() const {
  return _impl_.bshouldsnaplocationwhenattached_;
}
inline bool SceneComponentState::bshouldsnaplocationwhenattached() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bShouldSnapLocationWhenAttached)
  return _internal_bshouldsnaplocationwhenattached();
}
inline void SceneComponentState::_internal_set_bshouldsnaplocationwhenattached(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bshouldsnaplocationwhenattached_ = value;
}
inline void SceneComponentState::set_bshouldsnaplocationwhenattached(bool value) {
  _internal_set_bshouldsnaplocationwhenattached(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bShouldSnapLocationWhenAttached)
}

// optional bool bShouldSnapRotationWhenAttached = 8;
inline bool SceneComponentState::_internal_has_bshouldsnaprotationwhenattached() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SceneComponentState::has_bshouldsnaprotationwhenattached() const {
  return _internal_has_bshouldsnaprotationwhenattached();
}
inline void SceneComponentState::clear_bshouldsnaprotationwhenattached() {
  _impl_.bshouldsnaprotationwhenattached_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool SceneComponentState::_internal_bshouldsnaprotationwhenattached() const {
  return _impl_.bshouldsnaprotationwhenattached_;
}
inline bool SceneComponentState::bshouldsnaprotationwhenattached() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bShouldSnapRotationWhenAttached)
  return _internal_bshouldsnaprotationwhenattached();
}
inline void SceneComponentState::_internal_set_bshouldsnaprotationwhenattached(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bshouldsnaprotationwhenattached_ = value;
}
inline void SceneComponentState::set_bshouldsnaprotationwhenattached(bool value) {
  _internal_set_bshouldsnaprotationwhenattached(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bShouldSnapRotationWhenAttached)
}

// optional .unrealpb.ActorComponentRef attachParent = 9;
inline bool SceneComponentState::_internal_has_attachparent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attachparent_ != nullptr);
  return value;
}
inline bool SceneComponentState::has_attachparent() const {
  return _internal_has_attachparent();
}
inline void SceneComponentState::clear_attachparent() {
  if (_impl_.attachparent_ != nullptr) _impl_.attachparent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::ActorComponentRef& SceneComponentState::_internal_attachparent() const {
  const ::unrealpb::ActorComponentRef* p = _impl_.attachparent_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::ActorComponentRef&>(
      ::unrealpb::_ActorComponentRef_default_instance_);
}
inline const ::unrealpb::ActorComponentRef& SceneComponentState::attachparent() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.attachParent)
  return _internal_attachparent();
}
inline void SceneComponentState::unsafe_arena_set_allocated_attachparent(
    ::unrealpb::ActorComponentRef* attachparent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attachparent_);
  }
  _impl_.attachparent_ = attachparent;
  if (attachparent) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.attachParent)
}
inline ::unrealpb::ActorComponentRef* SceneComponentState::release_attachparent() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::ActorComponentRef* temp = _impl_.attachparent_;
  _impl_.attachparent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::ActorComponentRef* SceneComponentState::unsafe_arena_release_attachparent() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.attachParent)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::ActorComponentRef* temp = _impl_.attachparent_;
  _impl_.attachparent_ = nullptr;
  return temp;
}
inline ::unrealpb::ActorComponentRef* SceneComponentState::_internal_mutable_attachparent() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.attachparent_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::ActorComponentRef>(GetArenaForAllocation());
    _impl_.attachparent_ = p;
  }
  return _impl_.attachparent_;
}
inline ::unrealpb::ActorComponentRef* SceneComponentState::mutable_attachparent() {
  ::unrealpb::ActorComponentRef* _msg = _internal_mutable_attachparent();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.attachParent)
  return _msg;
}
inline void SceneComponentState::set_allocated_attachparent(::unrealpb::ActorComponentRef* attachparent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attachparent_;
  }
  if (attachparent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attachparent);
    if (message_arena != submessage_arena) {
      attachparent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachparent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attachparent_ = attachparent;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.attachParent)
}

// repeated .unrealpb.ActorComponentRef attachChildren = 10;
inline int SceneComponentState::_internal_attachchildren_size() const {
  return _impl_.attachchildren_.size();
}
inline int SceneComponentState::attachchildren_size() const {
  return _internal_attachchildren_size();
}
inline void SceneComponentState::clear_attachchildren() {
  _impl_.attachchildren_.Clear();
}
inline ::unrealpb::ActorComponentRef* SceneComponentState::mutable_attachchildren(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.attachChildren)
  return _impl_.attachchildren_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::ActorComponentRef >*
SceneComponentState::mutable_attachchildren() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.SceneComponentState.attachChildren)
  return &_impl_.attachchildren_;
}
inline const ::unrealpb::ActorComponentRef& SceneComponentState::_internal_attachchildren(int index) const {
  return _impl_.attachchildren_.Get(index);
}
inline const ::unrealpb::ActorComponentRef& SceneComponentState::attachchildren(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.attachChildren)
  return _internal_attachchildren(index);
}
inline ::unrealpb::ActorComponentRef* SceneComponentState::_internal_add_attachchildren() {
  return _impl_.attachchildren_.Add();
}
inline ::unrealpb::ActorComponentRef* SceneComponentState::add_attachchildren() {
  ::unrealpb::ActorComponentRef* _add = _internal_add_attachchildren();
  // @@protoc_insertion_point(field_add:unrealpb.SceneComponentState.attachChildren)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::ActorComponentRef >&
SceneComponentState::attachchildren() const {
  // @@protoc_insertion_point(field_list:unrealpb.SceneComponentState.attachChildren)
  return _impl_.attachchildren_;
}

// optional string attachSocketName = 11;
inline bool SceneComponentState::_internal_has_attachsocketname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SceneComponentState::has_attachsocketname() const {
  return _internal_has_attachsocketname();
}
inline void SceneComponentState::clear_attachsocketname() {
  _impl_.attachsocketname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SceneComponentState::attachsocketname() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.attachSocketName)
  return _internal_attachsocketname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneComponentState::set_attachsocketname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attachsocketname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.attachSocketName)
}
inline std::string* SceneComponentState::mutable_attachsocketname() {
  std::string* _s = _internal_mutable_attachsocketname();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.attachSocketName)
  return _s;
}
inline const std::string& SceneComponentState::_internal_attachsocketname() const {
  return _impl_.attachsocketname_.Get();
}
inline void SceneComponentState::_internal_set_attachsocketname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attachsocketname_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneComponentState::_internal_mutable_attachsocketname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attachsocketname_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneComponentState::release_attachsocketname() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.attachSocketName)
  if (!_internal_has_attachsocketname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attachsocketname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachsocketname_.IsDefault()) {
    _impl_.attachsocketname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SceneComponentState::set_allocated_attachsocketname(std::string* attachsocketname) {
  if (attachsocketname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attachsocketname_.SetAllocated(attachsocketname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachsocketname_.IsDefault()) {
    _impl_.attachsocketname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.attachSocketName)
}

// optional .unrealpb.FVector relativeLocation = 12;
inline bool SceneComponentState::_internal_has_relativelocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relativelocation_ != nullptr);
  return value;
}
inline bool SceneComponentState::has_relativelocation() const {
  return _internal_has_relativelocation();
}
inline void SceneComponentState::clear_relativelocation() {
  if (_impl_.relativelocation_ != nullptr) _impl_.relativelocation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::unrealpb::FVector& SceneComponentState::_internal_relativelocation() const {
  const ::unrealpb::FVector* p = _impl_.relativelocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SceneComponentState::relativelocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.relativeLocation)
  return _internal_relativelocation();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativelocation(
    ::unrealpb::FVector* relativelocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativelocation_);
  }
  _impl_.relativelocation_ = relativelocation;
  if (relativelocation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.relativeLocation)
}
inline ::unrealpb::FVector* SceneComponentState::release_relativelocation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::unsafe_arena_release_relativelocation() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.relativeLocation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::_internal_mutable_relativelocation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.relativelocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativelocation_ = p;
  }
  return _impl_.relativelocation_;
}
inline ::unrealpb::FVector* SceneComponentState::mutable_relativelocation() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativelocation();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.relativeLocation)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativelocation(::unrealpb::FVector* relativelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativelocation_;
  }
  if (relativelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativelocation);
    if (message_arena != submessage_arena) {
      relativelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativelocation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.relativelocation_ = relativelocation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.relativeLocation)
}

// optional .unrealpb.FVector relativeRotation = 13;
inline bool SceneComponentState::_internal_has_relativerotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relativerotation_ != nullptr);
  return value;
}
inline bool SceneComponentState::has_relativerotation() const {
  return _internal_has_relativerotation();
}
inline void SceneComponentState::clear_relativerotation() {
  if (_impl_.relativerotation_ != nullptr) _impl_.relativerotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::unrealpb::FVector& SceneComponentState::_internal_relativerotation() const {
  const ::unrealpb::FVector* p = _impl_.relativerotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SceneComponentState::relativerotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.relativeRotation)
  return _internal_relativerotation();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativerotation(
    ::unrealpb::FVector* relativerotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativerotation_);
  }
  _impl_.relativerotation_ = relativerotation;
  if (relativerotation) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.relativeRotation)
}
inline ::unrealpb::FVector* SceneComponentState::release_relativerotation() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::unsafe_arena_release_relativerotation() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.relativeRotation)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::_internal_mutable_relativerotation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.relativerotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativerotation_ = p;
  }
  return _impl_.relativerotation_;
}
inline ::unrealpb::FVector* SceneComponentState::mutable_relativerotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativerotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.relativeRotation)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativerotation(::unrealpb::FVector* relativerotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativerotation_;
  }
  if (relativerotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativerotation);
    if (message_arena != submessage_arena) {
      relativerotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativerotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.relativerotation_ = relativerotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.relativeRotation)
}

// optional .unrealpb.FVector relativeScale = 14;
inline bool SceneComponentState::_internal_has_relativescale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relativescale_ != nullptr);
  return value;
}
inline bool SceneComponentState::has_relativescale() const {
  return _internal_has_relativescale();
}
inline void SceneComponentState::clear_relativescale() {
  if (_impl_.relativescale_ != nullptr) _impl_.relativescale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::unrealpb::FVector& SceneComponentState::_internal_relativescale() const {
  const ::unrealpb::FVector* p = _impl_.relativescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SceneComponentState::relativescale() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.relativeScale)
  return _internal_relativescale();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativescale(
    ::unrealpb::FVector* relativescale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativescale_);
  }
  _impl_.relativescale_ = relativescale;
  if (relativescale) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.relativeScale)
}
inline ::unrealpb::FVector* SceneComponentState::release_relativescale() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::unsafe_arena_release_relativescale() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.relativeScale)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::_internal_mutable_relativescale() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.relativescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativescale_ = p;
  }
  return _impl_.relativescale_;
}
inline ::unrealpb::FVector* SceneComponentState::mutable_relativescale() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativescale();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.relativeScale)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativescale(::unrealpb::FVector* relativescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativescale_;
  }
  if (relativescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativescale);
    if (message_arena != submessage_arena) {
      relativescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativescale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.relativescale_ = relativescale;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.relativeScale)
}

// -------------------------------------------------------------------

// FBasedMovementInfo

// optional .unrealpb.ActorComponentRef movementBase = 1;
inline bool FBasedMovementInfo::_internal_has_movementbase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movementbase_ != nullptr);
  return value;
}
inline bool FBasedMovementInfo::has_movementbase() const {
  return _internal_has_movementbase();
}
inline void FBasedMovementInfo::clear_movementbase() {
  if (_impl_.movementbase_ != nullptr) _impl_.movementbase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::ActorComponentRef& FBasedMovementInfo::_internal_movementbase() const {
  const ::unrealpb::ActorComponentRef* p = _impl_.movementbase_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::ActorComponentRef&>(
      ::unrealpb::_ActorComponentRef_default_instance_);
}
inline const ::unrealpb::ActorComponentRef& FBasedMovementInfo::movementbase() const {
  // @@protoc_insertion_point(field_get:unrealpb.FBasedMovementInfo.movementBase)
  return _internal_movementbase();
}
inline void FBasedMovementInfo::unsafe_arena_set_allocated_movementbase(
    ::unrealpb::ActorComponentRef* movementbase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movementbase_);
  }
  _impl_.movementbase_ = movementbase;
  if (movementbase) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FBasedMovementInfo.movementBase)
}
inline ::unrealpb::ActorComponentRef* FBasedMovementInfo::release_movementbase() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::ActorComponentRef* temp = _impl_.movementbase_;
  _impl_.movementbase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::ActorComponentRef* FBasedMovementInfo::unsafe_arena_release_movementbase() {
  // @@protoc_insertion_point(field_release:unrealpb.FBasedMovementInfo.movementBase)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::ActorComponentRef* temp = _impl_.movementbase_;
  _impl_.movementbase_ = nullptr;
  return temp;
}
inline ::unrealpb::ActorComponentRef* FBasedMovementInfo::_internal_mutable_movementbase() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.movementbase_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::ActorComponentRef>(GetArenaForAllocation());
    _impl_.movementbase_ = p;
  }
  return _impl_.movementbase_;
}
inline ::unrealpb::ActorComponentRef* FBasedMovementInfo::mutable_movementbase() {
  ::unrealpb::ActorComponentRef* _msg = _internal_mutable_movementbase();
  // @@protoc_insertion_point(field_mutable:unrealpb.FBasedMovementInfo.movementBase)
  return _msg;
}
inline void FBasedMovementInfo::set_allocated_movementbase(::unrealpb::ActorComponentRef* movementbase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.movementbase_;
  }
  if (movementbase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(movementbase);
    if (message_arena != submessage_arena) {
      movementbase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movementbase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.movementbase_ = movementbase;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FBasedMovementInfo.movementBase)
}

// optional string boneName = 2;
inline bool FBasedMovementInfo::_internal_has_bonename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FBasedMovementInfo::has_bonename() const {
  return _internal_has_bonename();
}
inline void FBasedMovementInfo::clear_bonename() {
  _impl_.bonename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FBasedMovementInfo::bonename() const {
  // @@protoc_insertion_point(field_get:unrealpb.FBasedMovementInfo.boneName)
  return _internal_bonename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FBasedMovementInfo::set_bonename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.bonename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.FBasedMovementInfo.boneName)
}
inline std::string* FBasedMovementInfo::mutable_bonename() {
  std::string* _s = _internal_mutable_bonename();
  // @@protoc_insertion_point(field_mutable:unrealpb.FBasedMovementInfo.boneName)
  return _s;
}
inline const std::string& FBasedMovementInfo::_internal_bonename() const {
  return _impl_.bonename_.Get();
}
inline void FBasedMovementInfo::_internal_set_bonename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bonename_.Set(value, GetArenaForAllocation());
}
inline std::string* FBasedMovementInfo::_internal_mutable_bonename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.bonename_.Mutable(GetArenaForAllocation());
}
inline std::string* FBasedMovementInfo::release_bonename() {
  // @@protoc_insertion_point(field_release:unrealpb.FBasedMovementInfo.boneName)
  if (!_internal_has_bonename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.bonename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bonename_.IsDefault()) {
    _impl_.bonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FBasedMovementInfo::set_allocated_bonename(std::string* bonename) {
  if (bonename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bonename_.SetAllocated(bonename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bonename_.IsDefault()) {
    _impl_.bonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FBasedMovementInfo.boneName)
}

// optional .unrealpb.FVector location = 3;
inline bool FBasedMovementInfo::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool FBasedMovementInfo::has_location() const {
  return _internal_has_location();
}
inline void FBasedMovementInfo::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::unrealpb::FVector& FBasedMovementInfo::_internal_location() const {
  const ::unrealpb::FVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FBasedMovementInfo::location() const {
  // @@protoc_insertion_point(field_get:unrealpb.FBasedMovementInfo.location)
  return _internal_location();
}
inline void FBasedMovementInfo::unsafe_arena_set_allocated_location(
    ::unrealpb::FVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FBasedMovementInfo.location)
}
inline ::unrealpb::FVector* FBasedMovementInfo::release_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FBasedMovementInfo::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:unrealpb.FBasedMovementInfo.location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FBasedMovementInfo::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::unrealpb::FVector* FBasedMovementInfo::mutable_location() {
  ::unrealpb::FVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:unrealpb.FBasedMovementInfo.location)
  return _msg;
}
inline void FBasedMovementInfo::set_allocated_location(::unrealpb::FVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FBasedMovementInfo.location)
}

// optional .unrealpb.FVector rotation = 4;
inline bool FBasedMovementInfo::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool FBasedMovementInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void FBasedMovementInfo::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::unrealpb::FVector& FBasedMovementInfo::_internal_rotation() const {
  const ::unrealpb::FVector* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FBasedMovementInfo::rotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.FBasedMovementInfo.rotation)
  return _internal_rotation();
}
inline void FBasedMovementInfo::unsafe_arena_set_allocated_rotation(
    ::unrealpb::FVector* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FBasedMovementInfo.rotation)
}
inline ::unrealpb::FVector* FBasedMovementInfo::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FBasedMovementInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:unrealpb.FBasedMovementInfo.rotation)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FBasedMovementInfo::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::unrealpb::FVector* FBasedMovementInfo::mutable_rotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.FBasedMovementInfo.rotation)
  return _msg;
}
inline void FBasedMovementInfo::set_allocated_rotation(::unrealpb::FVector* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FBasedMovementInfo.rotation)
}

// optional bool bServerHasBaseComponent = 5;
inline bool FBasedMovementInfo::_internal_has_bserverhasbasecomponent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FBasedMovementInfo::has_bserverhasbasecomponent() const {
  return _internal_has_bserverhasbasecomponent();
}
inline void FBasedMovementInfo::clear_bserverhasbasecomponent() {
  _impl_.bserverhasbasecomponent_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FBasedMovementInfo::_internal_bserverhasbasecomponent() const {
  return _impl_.bserverhasbasecomponent_;
}
inline bool FBasedMovementInfo::bserverhasbasecomponent() const {
  // @@protoc_insertion_point(field_get:unrealpb.FBasedMovementInfo.bServerHasBaseComponent)
  return _internal_bserverhasbasecomponent();
}
inline void FBasedMovementInfo::_internal_set_bserverhasbasecomponent(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bserverhasbasecomponent_ = value;
}
inline void FBasedMovementInfo::set_bserverhasbasecomponent(bool value) {
  _internal_set_bserverhasbasecomponent(value);
  // @@protoc_insertion_point(field_set:unrealpb.FBasedMovementInfo.bServerHasBaseComponent)
}

// optional bool bRelativeRotation = 6;
inline bool FBasedMovementInfo::_internal_has_brelativerotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FBasedMovementInfo::has_brelativerotation() const {
  return _internal_has_brelativerotation();
}
inline void FBasedMovementInfo::clear_brelativerotation() {
  _impl_.brelativerotation_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FBasedMovementInfo::_internal_brelativerotation() const {
  return _impl_.brelativerotation_;
}
inline bool FBasedMovementInfo::brelativerotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.FBasedMovementInfo.bRelativeRotation)
  return _internal_brelativerotation();
}
inline void FBasedMovementInfo::_internal_set_brelativerotation(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.brelativerotation_ = value;
}
inline void FBasedMovementInfo::set_brelativerotation(bool value) {
  _internal_set_brelativerotation(value);
  // @@protoc_insertion_point(field_set:unrealpb.FBasedMovementInfo.bRelativeRotation)
}

// optional bool bServerHasVelocity = 7;
inline bool FBasedMovementInfo::_internal_has_bserverhasvelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FBasedMovementInfo::has_bserverhasvelocity() const {
  return _internal_has_bserverhasvelocity();
}
inline void FBasedMovementInfo::clear_bserverhasvelocity() {
  _impl_.bserverhasvelocity_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool FBasedMovementInfo::_internal_bserverhasvelocity() const {
  return _impl_.bserverhasvelocity_;
}
inline bool FBasedMovementInfo::bserverhasvelocity() const {
  // @@protoc_insertion_point(field_get:unrealpb.FBasedMovementInfo.bServerHasVelocity)
  return _internal_bserverhasvelocity();
}
inline void FBasedMovementInfo::_internal_set_bserverhasvelocity(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bserverhasvelocity_ = value;
}
inline void FBasedMovementInfo::set_bserverhasvelocity(bool value) {
  _internal_set_bserverhasvelocity(value);
  // @@protoc_insertion_point(field_set:unrealpb.FBasedMovementInfo.bServerHasVelocity)
}

// -------------------------------------------------------------------

// FRootMotionSource_FRootMotionFinishVelocitySettings

// optional uint32 mode = 1;
inline bool FRootMotionSource_FRootMotionFinishVelocitySettings::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FRootMotionSource_FRootMotionFinishVelocitySettings::has_mode() const {
  return _internal_has_mode();
}
inline void FRootMotionSource_FRootMotionFinishVelocitySettings::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FRootMotionSource_FRootMotionFinishVelocitySettings::_internal_mode() const {
  return _impl_.mode_;
}
inline uint32_t FRootMotionSource_FRootMotionFinishVelocitySettings::mode() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings.mode)
  return _internal_mode();
}
inline void FRootMotionSource_FRootMotionFinishVelocitySettings::_internal_set_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mode_ = value;
}
inline void FRootMotionSource_FRootMotionFinishVelocitySettings::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings.mode)
}

// optional .unrealpb.FVector setVelocity = 2;
inline bool FRootMotionSource_FRootMotionFinishVelocitySettings::_internal_has_setvelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.setvelocity_ != nullptr);
  return value;
}
inline bool FRootMotionSource_FRootMotionFinishVelocitySettings::has_setvelocity() const {
  return _internal_has_setvelocity();
}
inline void FRootMotionSource_FRootMotionFinishVelocitySettings::clear_setvelocity() {
  if (_impl_.setvelocity_ != nullptr) _impl_.setvelocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::unrealpb::FVector& FRootMotionSource_FRootMotionFinishVelocitySettings::_internal_setvelocity() const {
  const ::unrealpb::FVector* p = _impl_.setvelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRootMotionSource_FRootMotionFinishVelocitySettings::setvelocity() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings.setVelocity)
  return _internal_setvelocity();
}
inline void FRootMotionSource_FRootMotionFinishVelocitySettings::unsafe_arena_set_allocated_setvelocity(
    ::unrealpb::FVector* setvelocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setvelocity_);
  }
  _impl_.setvelocity_ = setvelocity;
  if (setvelocity) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings.setVelocity)
}
inline ::unrealpb::FVector* FRootMotionSource_FRootMotionFinishVelocitySettings::release_setvelocity() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.setvelocity_;
  _impl_.setvelocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRootMotionSource_FRootMotionFinishVelocitySettings::unsafe_arena_release_setvelocity() {
  // @@protoc_insertion_point(field_release:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings.setVelocity)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.setvelocity_;
  _impl_.setvelocity_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRootMotionSource_FRootMotionFinishVelocitySettings::_internal_mutable_setvelocity() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.setvelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.setvelocity_ = p;
  }
  return _impl_.setvelocity_;
}
inline ::unrealpb::FVector* FRootMotionSource_FRootMotionFinishVelocitySettings::mutable_setvelocity() {
  ::unrealpb::FVector* _msg = _internal_mutable_setvelocity();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings.setVelocity)
  return _msg;
}
inline void FRootMotionSource_FRootMotionFinishVelocitySettings::set_allocated_setvelocity(::unrealpb::FVector* setvelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.setvelocity_;
  }
  if (setvelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(setvelocity);
    if (message_arena != submessage_arena) {
      setvelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setvelocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.setvelocity_ = setvelocity;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings.setVelocity)
}

// optional float clampVelocity = 3;
inline bool FRootMotionSource_FRootMotionFinishVelocitySettings::_internal_has_clampvelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FRootMotionSource_FRootMotionFinishVelocitySettings::has_clampvelocity() const {
  return _internal_has_clampvelocity();
}
inline void FRootMotionSource_FRootMotionFinishVelocitySettings::clear_clampvelocity() {
  _impl_.clampvelocity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FRootMotionSource_FRootMotionFinishVelocitySettings::_internal_clampvelocity() const {
  return _impl_.clampvelocity_;
}
inline float FRootMotionSource_FRootMotionFinishVelocitySettings::clampvelocity() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings.clampVelocity)
  return _internal_clampvelocity();
}
inline void FRootMotionSource_FRootMotionFinishVelocitySettings::_internal_set_clampvelocity(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.clampvelocity_ = value;
}
inline void FRootMotionSource_FRootMotionFinishVelocitySettings::set_clampvelocity(float value) {
  _internal_set_clampvelocity(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings.clampVelocity)
}

// -------------------------------------------------------------------

// FRootMotionSource

// optional uint32 priority = 1;
inline bool FRootMotionSource::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FRootMotionSource::has_priority() const {
  return _internal_has_priority();
}
inline void FRootMotionSource::clear_priority() {
  _impl_.priority_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FRootMotionSource::_internal_priority() const {
  return _impl_.priority_;
}
inline uint32_t FRootMotionSource::priority() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.priority)
  return _internal_priority();
}
inline void FRootMotionSource::_internal_set_priority(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.priority_ = value;
}
inline void FRootMotionSource::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.priority)
}

// optional uint32 localId = 2;
inline bool FRootMotionSource::_internal_has_localid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FRootMotionSource::has_localid() const {
  return _internal_has_localid();
}
inline void FRootMotionSource::clear_localid() {
  _impl_.localid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FRootMotionSource::_internal_localid() const {
  return _impl_.localid_;
}
inline uint32_t FRootMotionSource::localid() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.localId)
  return _internal_localid();
}
inline void FRootMotionSource::_internal_set_localid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.localid_ = value;
}
inline void FRootMotionSource::set_localid(uint32_t value) {
  _internal_set_localid(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.localId)
}

// optional uint32 accumulatedMode = 3;
inline bool FRootMotionSource::_internal_has_accumulatedmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FRootMotionSource::has_accumulatedmode() const {
  return _internal_has_accumulatedmode();
}
inline void FRootMotionSource::clear_accumulatedmode() {
  _impl_.accumulatedmode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FRootMotionSource::_internal_accumulatedmode() const {
  return _impl_.accumulatedmode_;
}
inline uint32_t FRootMotionSource::accumulatedmode() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.accumulatedMode)
  return _internal_accumulatedmode();
}
inline void FRootMotionSource::_internal_set_accumulatedmode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.accumulatedmode_ = value;
}
inline void FRootMotionSource::set_accumulatedmode(uint32_t value) {
  _internal_set_accumulatedmode(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.accumulatedMode)
}

// optional string instanceName = 4;
inline bool FRootMotionSource::_internal_has_instancename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FRootMotionSource::has_instancename() const {
  return _internal_has_instancename();
}
inline void FRootMotionSource::clear_instancename() {
  _impl_.instancename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FRootMotionSource::instancename() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.instanceName)
  return _internal_instancename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FRootMotionSource::set_instancename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.instancename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.instanceName)
}
inline std::string* FRootMotionSource::mutable_instancename() {
  std::string* _s = _internal_mutable_instancename();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRootMotionSource.instanceName)
  return _s;
}
inline const std::string& FRootMotionSource::_internal_instancename() const {
  return _impl_.instancename_.Get();
}
inline void FRootMotionSource::_internal_set_instancename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instancename_.Set(value, GetArenaForAllocation());
}
inline std::string* FRootMotionSource::_internal_mutable_instancename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.instancename_.Mutable(GetArenaForAllocation());
}
inline std::string* FRootMotionSource::release_instancename() {
  // @@protoc_insertion_point(field_release:unrealpb.FRootMotionSource.instanceName)
  if (!_internal_has_instancename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.instancename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instancename_.IsDefault()) {
    _impl_.instancename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FRootMotionSource::set_allocated_instancename(std::string* instancename) {
  if (instancename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instancename_.SetAllocated(instancename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instancename_.IsDefault()) {
    _impl_.instancename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRootMotionSource.instanceName)
}

// optional float startTime = 5;
inline bool FRootMotionSource::_internal_has_starttime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FRootMotionSource::has_starttime() const {
  return _internal_has_starttime();
}
inline void FRootMotionSource::clear_starttime() {
  _impl_.starttime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float FRootMotionSource::_internal_starttime() const {
  return _impl_.starttime_;
}
inline float FRootMotionSource::starttime() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.startTime)
  return _internal_starttime();
}
inline void FRootMotionSource::_internal_set_starttime(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.starttime_ = value;
}
inline void FRootMotionSource::set_starttime(float value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.startTime)
}

// optional float currentTime = 6;
inline bool FRootMotionSource::_internal_has_currenttime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FRootMotionSource::has_currenttime() const {
  return _internal_has_currenttime();
}
inline void FRootMotionSource::clear_currenttime() {
  _impl_.currenttime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float FRootMotionSource::_internal_currenttime() const {
  return _impl_.currenttime_;
}
inline float FRootMotionSource::currenttime() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.currentTime)
  return _internal_currenttime();
}
inline void FRootMotionSource::_internal_set_currenttime(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.currenttime_ = value;
}
inline void FRootMotionSource::set_currenttime(float value) {
  _internal_set_currenttime(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.currentTime)
}

// optional float previousTime = 7;
inline bool FRootMotionSource::_internal_has_previoustime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FRootMotionSource::has_previoustime() const {
  return _internal_has_previoustime();
}
inline void FRootMotionSource::clear_previoustime() {
  _impl_.previoustime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float FRootMotionSource::_internal_previoustime() const {
  return _impl_.previoustime_;
}
inline float FRootMotionSource::previoustime() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.previousTime)
  return _internal_previoustime();
}
inline void FRootMotionSource::_internal_set_previoustime(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.previoustime_ = value;
}
inline void FRootMotionSource::set_previoustime(float value) {
  _internal_set_previoustime(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.previousTime)
}

// optional float duration = 8;
inline bool FRootMotionSource::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FRootMotionSource::has_duration() const {
  return _internal_has_duration();
}
inline void FRootMotionSource::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float FRootMotionSource::_internal_duration() const {
  return _impl_.duration_;
}
inline float FRootMotionSource::duration() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.duration)
  return _internal_duration();
}
inline void FRootMotionSource::_internal_set_duration(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.duration_ = value;
}
inline void FRootMotionSource::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.duration)
}

// optional uint32 status = 9;
inline bool FRootMotionSource::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FRootMotionSource::has_status() const {
  return _internal_has_status();
}
inline void FRootMotionSource::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t FRootMotionSource::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t FRootMotionSource::status() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.status)
  return _internal_status();
}
inline void FRootMotionSource::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.status_ = value;
}
inline void FRootMotionSource::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.status)
}

// optional uint32 settings = 10;
inline bool FRootMotionSource::_internal_has_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FRootMotionSource::has_settings() const {
  return _internal_has_settings();
}
inline void FRootMotionSource::clear_settings() {
  _impl_.settings_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t FRootMotionSource::_internal_settings() const {
  return _impl_.settings_;
}
inline uint32_t FRootMotionSource::settings() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.settings)
  return _internal_settings();
}
inline void FRootMotionSource::_internal_set_settings(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.settings_ = value;
}
inline void FRootMotionSource::set_settings(uint32_t value) {
  _internal_set_settings(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.settings)
}

// optional bool bInLocalSpace = 11;
inline bool FRootMotionSource::_internal_has_binlocalspace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FRootMotionSource::has_binlocalspace() const {
  return _internal_has_binlocalspace();
}
inline void FRootMotionSource::clear_binlocalspace() {
  _impl_.binlocalspace_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool FRootMotionSource::_internal_binlocalspace() const {
  return _impl_.binlocalspace_;
}
inline bool FRootMotionSource::binlocalspace() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.bInLocalSpace)
  return _internal_binlocalspace();
}
inline void FRootMotionSource::_internal_set_binlocalspace(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.binlocalspace_ = value;
}
inline void FRootMotionSource::set_binlocalspace(bool value) {
  _internal_set_binlocalspace(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.bInLocalSpace)
}

// optional bool bNeedsSimulatedCatchup = 12;
inline bool FRootMotionSource::_internal_has_bneedssimulatedcatchup() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FRootMotionSource::has_bneedssimulatedcatchup() const {
  return _internal_has_bneedssimulatedcatchup();
}
inline void FRootMotionSource::clear_bneedssimulatedcatchup() {
  _impl_.bneedssimulatedcatchup_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool FRootMotionSource::_internal_bneedssimulatedcatchup() const {
  return _impl_.bneedssimulatedcatchup_;
}
inline bool FRootMotionSource::bneedssimulatedcatchup() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.bNeedsSimulatedCatchup)
  return _internal_bneedssimulatedcatchup();
}
inline void FRootMotionSource::_internal_set_bneedssimulatedcatchup(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.bneedssimulatedcatchup_ = value;
}
inline void FRootMotionSource::set_bneedssimulatedcatchup(bool value) {
  _internal_set_bneedssimulatedcatchup(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.bNeedsSimulatedCatchup)
}

// optional bool bSimulatedNeedsSmoothing = 13;
inline bool FRootMotionSource::_internal_has_bsimulatedneedssmoothing() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FRootMotionSource::has_bsimulatedneedssmoothing() const {
  return _internal_has_bsimulatedneedssmoothing();
}
inline void FRootMotionSource::clear_bsimulatedneedssmoothing() {
  _impl_.bsimulatedneedssmoothing_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool FRootMotionSource::_internal_bsimulatedneedssmoothing() const {
  return _impl_.bsimulatedneedssmoothing_;
}
inline bool FRootMotionSource::bsimulatedneedssmoothing() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.bSimulatedNeedsSmoothing)
  return _internal_bsimulatedneedssmoothing();
}
inline void FRootMotionSource::_internal_set_bsimulatedneedssmoothing(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.bsimulatedneedssmoothing_ = value;
}
inline void FRootMotionSource::set_bsimulatedneedssmoothing(bool value) {
  _internal_set_bsimulatedneedssmoothing(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.bSimulatedNeedsSmoothing)
}

// optional bool bHasRootMotion = 14;
inline bool FRootMotionSource::_internal_has_bhasrootmotion() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FRootMotionSource::has_bhasrootmotion() const {
  return _internal_has_bhasrootmotion();
}
inline void FRootMotionSource::clear_bhasrootmotion() {
  _impl_.bhasrootmotion_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool FRootMotionSource::_internal_bhasrootmotion() const {
  return _impl_.bhasrootmotion_;
}
inline bool FRootMotionSource::bhasrootmotion() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.bHasRootMotion)
  return _internal_bhasrootmotion();
}
inline void FRootMotionSource::_internal_set_bhasrootmotion(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.bhasrootmotion_ = value;
}
inline void FRootMotionSource::set_bhasrootmotion(bool value) {
  _internal_set_bhasrootmotion(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.bHasRootMotion)
}

// optional float blendWeight = 15;
inline bool FRootMotionSource::_internal_has_blendweight() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FRootMotionSource::has_blendweight() const {
  return _internal_has_blendweight();
}
inline void FRootMotionSource::clear_blendweight() {
  _impl_.blendweight_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float FRootMotionSource::_internal_blendweight() const {
  return _impl_.blendweight_;
}
inline float FRootMotionSource::blendweight() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.blendWeight)
  return _internal_blendweight();
}
inline void FRootMotionSource::_internal_set_blendweight(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.blendweight_ = value;
}
inline void FRootMotionSource::set_blendweight(float value) {
  _internal_set_blendweight(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSource.blendWeight)
}

// optional .unrealpb.FRootMotionSource.FRootMotionFinishVelocitySettings finishVelocityParams = 16;
inline bool FRootMotionSource::_internal_has_finishvelocityparams() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.finishvelocityparams_ != nullptr);
  return value;
}
inline bool FRootMotionSource::has_finishvelocityparams() const {
  return _internal_has_finishvelocityparams();
}
inline void FRootMotionSource::clear_finishvelocityparams() {
  if (_impl_.finishvelocityparams_ != nullptr) _impl_.finishvelocityparams_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings& FRootMotionSource::_internal_finishvelocityparams() const {
  const ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* p = _impl_.finishvelocityparams_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings&>(
      ::unrealpb::_FRootMotionSource_FRootMotionFinishVelocitySettings_default_instance_);
}
inline const ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings& FRootMotionSource::finishvelocityparams() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSource.finishVelocityParams)
  return _internal_finishvelocityparams();
}
inline void FRootMotionSource::unsafe_arena_set_allocated_finishvelocityparams(
    ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* finishvelocityparams) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finishvelocityparams_);
  }
  _impl_.finishvelocityparams_ = finishvelocityparams;
  if (finishvelocityparams) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRootMotionSource.finishVelocityParams)
}
inline ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* FRootMotionSource::release_finishvelocityparams() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* temp = _impl_.finishvelocityparams_;
  _impl_.finishvelocityparams_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* FRootMotionSource::unsafe_arena_release_finishvelocityparams() {
  // @@protoc_insertion_point(field_release:unrealpb.FRootMotionSource.finishVelocityParams)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* temp = _impl_.finishvelocityparams_;
  _impl_.finishvelocityparams_ = nullptr;
  return temp;
}
inline ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* FRootMotionSource::_internal_mutable_finishvelocityparams() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.finishvelocityparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings>(GetArenaForAllocation());
    _impl_.finishvelocityparams_ = p;
  }
  return _impl_.finishvelocityparams_;
}
inline ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* FRootMotionSource::mutable_finishvelocityparams() {
  ::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* _msg = _internal_mutable_finishvelocityparams();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRootMotionSource.finishVelocityParams)
  return _msg;
}
inline void FRootMotionSource::set_allocated_finishvelocityparams(::unrealpb::FRootMotionSource_FRootMotionFinishVelocitySettings* finishvelocityparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.finishvelocityparams_;
  }
  if (finishvelocityparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(finishvelocityparams);
    if (message_arena != submessage_arena) {
      finishvelocityparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finishvelocityparams, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.finishvelocityparams_ = finishvelocityparams;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRootMotionSource.finishVelocityParams)
}

// -------------------------------------------------------------------

// FRootMotionSourceGroup

// repeated .unrealpb.FRootMotionSource rootMotionSources = 1;
inline int FRootMotionSourceGroup::_internal_rootmotionsources_size() const {
  return _impl_.rootmotionsources_.size();
}
inline int FRootMotionSourceGroup::rootmotionsources_size() const {
  return _internal_rootmotionsources_size();
}
inline void FRootMotionSourceGroup::clear_rootmotionsources() {
  _impl_.rootmotionsources_.Clear();
}
inline ::unrealpb::FRootMotionSource* FRootMotionSourceGroup::mutable_rootmotionsources(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.FRootMotionSourceGroup.rootMotionSources)
  return _impl_.rootmotionsources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource >*
FRootMotionSourceGroup::mutable_rootmotionsources() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.FRootMotionSourceGroup.rootMotionSources)
  return &_impl_.rootmotionsources_;
}
inline const ::unrealpb::FRootMotionSource& FRootMotionSourceGroup::_internal_rootmotionsources(int index) const {
  return _impl_.rootmotionsources_.Get(index);
}
inline const ::unrealpb::FRootMotionSource& FRootMotionSourceGroup::rootmotionsources(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSourceGroup.rootMotionSources)
  return _internal_rootmotionsources(index);
}
inline ::unrealpb::FRootMotionSource* FRootMotionSourceGroup::_internal_add_rootmotionsources() {
  return _impl_.rootmotionsources_.Add();
}
inline ::unrealpb::FRootMotionSource* FRootMotionSourceGroup::add_rootmotionsources() {
  ::unrealpb::FRootMotionSource* _add = _internal_add_rootmotionsources();
  // @@protoc_insertion_point(field_add:unrealpb.FRootMotionSourceGroup.rootMotionSources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource >&
FRootMotionSourceGroup::rootmotionsources() const {
  // @@protoc_insertion_point(field_list:unrealpb.FRootMotionSourceGroup.rootMotionSources)
  return _impl_.rootmotionsources_;
}

// repeated .unrealpb.FRootMotionSource pendingAddRootMotionSources = 2;
inline int FRootMotionSourceGroup::_internal_pendingaddrootmotionsources_size() const {
  return _impl_.pendingaddrootmotionsources_.size();
}
inline int FRootMotionSourceGroup::pendingaddrootmotionsources_size() const {
  return _internal_pendingaddrootmotionsources_size();
}
inline void FRootMotionSourceGroup::clear_pendingaddrootmotionsources() {
  _impl_.pendingaddrootmotionsources_.Clear();
}
inline ::unrealpb::FRootMotionSource* FRootMotionSourceGroup::mutable_pendingaddrootmotionsources(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.FRootMotionSourceGroup.pendingAddRootMotionSources)
  return _impl_.pendingaddrootmotionsources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource >*
FRootMotionSourceGroup::mutable_pendingaddrootmotionsources() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.FRootMotionSourceGroup.pendingAddRootMotionSources)
  return &_impl_.pendingaddrootmotionsources_;
}
inline const ::unrealpb::FRootMotionSource& FRootMotionSourceGroup::_internal_pendingaddrootmotionsources(int index) const {
  return _impl_.pendingaddrootmotionsources_.Get(index);
}
inline const ::unrealpb::FRootMotionSource& FRootMotionSourceGroup::pendingaddrootmotionsources(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSourceGroup.pendingAddRootMotionSources)
  return _internal_pendingaddrootmotionsources(index);
}
inline ::unrealpb::FRootMotionSource* FRootMotionSourceGroup::_internal_add_pendingaddrootmotionsources() {
  return _impl_.pendingaddrootmotionsources_.Add();
}
inline ::unrealpb::FRootMotionSource* FRootMotionSourceGroup::add_pendingaddrootmotionsources() {
  ::unrealpb::FRootMotionSource* _add = _internal_add_pendingaddrootmotionsources();
  // @@protoc_insertion_point(field_add:unrealpb.FRootMotionSourceGroup.pendingAddRootMotionSources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::FRootMotionSource >&
FRootMotionSourceGroup::pendingaddrootmotionsources() const {
  // @@protoc_insertion_point(field_list:unrealpb.FRootMotionSourceGroup.pendingAddRootMotionSources)
  return _impl_.pendingaddrootmotionsources_;
}

// optional bool bHasAdditiveSources = 3;
inline bool FRootMotionSourceGroup::_internal_has_bhasadditivesources() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FRootMotionSourceGroup::has_bhasadditivesources() const {
  return _internal_has_bhasadditivesources();
}
inline void FRootMotionSourceGroup::clear_bhasadditivesources() {
  _impl_.bhasadditivesources_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool FRootMotionSourceGroup::_internal_bhasadditivesources() const {
  return _impl_.bhasadditivesources_;
}
inline bool FRootMotionSourceGroup::bhasadditivesources() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSourceGroup.bHasAdditiveSources)
  return _internal_bhasadditivesources();
}
inline void FRootMotionSourceGroup::_internal_set_bhasadditivesources(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bhasadditivesources_ = value;
}
inline void FRootMotionSourceGroup::set_bhasadditivesources(bool value) {
  _internal_set_bhasadditivesources(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSourceGroup.bHasAdditiveSources)
}

// optional bool bHasOverrideSources = 4;
inline bool FRootMotionSourceGroup::_internal_has_bhasoverridesources() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FRootMotionSourceGroup::has_bhasoverridesources() const {
  return _internal_has_bhasoverridesources();
}
inline void FRootMotionSourceGroup::clear_bhasoverridesources() {
  _impl_.bhasoverridesources_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FRootMotionSourceGroup::_internal_bhasoverridesources() const {
  return _impl_.bhasoverridesources_;
}
inline bool FRootMotionSourceGroup::bhasoverridesources() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSourceGroup.bHasOverrideSources)
  return _internal_bhasoverridesources();
}
inline void FRootMotionSourceGroup::_internal_set_bhasoverridesources(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bhasoverridesources_ = value;
}
inline void FRootMotionSourceGroup::set_bhasoverridesources(bool value) {
  _internal_set_bhasoverridesources(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSourceGroup.bHasOverrideSources)
}

// optional bool bHasOverrideSourcesWithIgnoreZAccumulate = 5;
inline bool FRootMotionSourceGroup::_internal_has_bhasoverridesourceswithignorezaccumulate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FRootMotionSourceGroup::has_bhasoverridesourceswithignorezaccumulate() const {
  return _internal_has_bhasoverridesourceswithignorezaccumulate();
}
inline void FRootMotionSourceGroup::clear_bhasoverridesourceswithignorezaccumulate() {
  _impl_.bhasoverridesourceswithignorezaccumulate_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FRootMotionSourceGroup::_internal_bhasoverridesourceswithignorezaccumulate() const {
  return _impl_.bhasoverridesourceswithignorezaccumulate_;
}
inline bool FRootMotionSourceGroup::bhasoverridesourceswithignorezaccumulate() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSourceGroup.bHasOverrideSourcesWithIgnoreZAccumulate)
  return _internal_bhasoverridesourceswithignorezaccumulate();
}
inline void FRootMotionSourceGroup::_internal_set_bhasoverridesourceswithignorezaccumulate(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bhasoverridesourceswithignorezaccumulate_ = value;
}
inline void FRootMotionSourceGroup::set_bhasoverridesourceswithignorezaccumulate(bool value) {
  _internal_set_bhasoverridesourceswithignorezaccumulate(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSourceGroup.bHasOverrideSourcesWithIgnoreZAccumulate)
}

// optional bool bIsAdditiveVelocityApplied = 6;
inline bool FRootMotionSourceGroup::_internal_has_bisadditivevelocityapplied() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FRootMotionSourceGroup::has_bisadditivevelocityapplied() const {
  return _internal_has_bisadditivevelocityapplied();
}
inline void FRootMotionSourceGroup::clear_bisadditivevelocityapplied() {
  _impl_.bisadditivevelocityapplied_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FRootMotionSourceGroup::_internal_bisadditivevelocityapplied() const {
  return _impl_.bisadditivevelocityapplied_;
}
inline bool FRootMotionSourceGroup::bisadditivevelocityapplied() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSourceGroup.bIsAdditiveVelocityApplied)
  return _internal_bisadditivevelocityapplied();
}
inline void FRootMotionSourceGroup::_internal_set_bisadditivevelocityapplied(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bisadditivevelocityapplied_ = value;
}
inline void FRootMotionSourceGroup::set_bisadditivevelocityapplied(bool value) {
  _internal_set_bisadditivevelocityapplied(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSourceGroup.bIsAdditiveVelocityApplied)
}

// optional uint32 lastAccumulatedSettings = 7;
inline bool FRootMotionSourceGroup::_internal_has_lastaccumulatedsettings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FRootMotionSourceGroup::has_lastaccumulatedsettings() const {
  return _internal_has_lastaccumulatedsettings();
}
inline void FRootMotionSourceGroup::clear_lastaccumulatedsettings() {
  _impl_.lastaccumulatedsettings_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t FRootMotionSourceGroup::_internal_lastaccumulatedsettings() const {
  return _impl_.lastaccumulatedsettings_;
}
inline uint32_t FRootMotionSourceGroup::lastaccumulatedsettings() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSourceGroup.lastAccumulatedSettings)
  return _internal_lastaccumulatedsettings();
}
inline void FRootMotionSourceGroup::_internal_set_lastaccumulatedsettings(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lastaccumulatedsettings_ = value;
}
inline void FRootMotionSourceGroup::set_lastaccumulatedsettings(uint32_t value) {
  _internal_set_lastaccumulatedsettings(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRootMotionSourceGroup.lastAccumulatedSettings)
}

// optional .unrealpb.FVector lastPreAdditiveVelocity = 8;
inline bool FRootMotionSourceGroup::_internal_has_lastpreadditivevelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lastpreadditivevelocity_ != nullptr);
  return value;
}
inline bool FRootMotionSourceGroup::has_lastpreadditivevelocity() const {
  return _internal_has_lastpreadditivevelocity();
}
inline void FRootMotionSourceGroup::clear_lastpreadditivevelocity() {
  if (_impl_.lastpreadditivevelocity_ != nullptr) _impl_.lastpreadditivevelocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::unrealpb::FVector& FRootMotionSourceGroup::_internal_lastpreadditivevelocity() const {
  const ::unrealpb::FVector* p = _impl_.lastpreadditivevelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRootMotionSourceGroup::lastpreadditivevelocity() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRootMotionSourceGroup.lastPreAdditiveVelocity)
  return _internal_lastpreadditivevelocity();
}
inline void FRootMotionSourceGroup::unsafe_arena_set_allocated_lastpreadditivevelocity(
    ::unrealpb::FVector* lastpreadditivevelocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastpreadditivevelocity_);
  }
  _impl_.lastpreadditivevelocity_ = lastpreadditivevelocity;
  if (lastpreadditivevelocity) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRootMotionSourceGroup.lastPreAdditiveVelocity)
}
inline ::unrealpb::FVector* FRootMotionSourceGroup::release_lastpreadditivevelocity() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.lastpreadditivevelocity_;
  _impl_.lastpreadditivevelocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRootMotionSourceGroup::unsafe_arena_release_lastpreadditivevelocity() {
  // @@protoc_insertion_point(field_release:unrealpb.FRootMotionSourceGroup.lastPreAdditiveVelocity)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.lastpreadditivevelocity_;
  _impl_.lastpreadditivevelocity_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRootMotionSourceGroup::_internal_mutable_lastpreadditivevelocity() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lastpreadditivevelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.lastpreadditivevelocity_ = p;
  }
  return _impl_.lastpreadditivevelocity_;
}
inline ::unrealpb::FVector* FRootMotionSourceGroup::mutable_lastpreadditivevelocity() {
  ::unrealpb::FVector* _msg = _internal_mutable_lastpreadditivevelocity();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRootMotionSourceGroup.lastPreAdditiveVelocity)
  return _msg;
}
inline void FRootMotionSourceGroup::set_allocated_lastpreadditivevelocity(::unrealpb::FVector* lastpreadditivevelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lastpreadditivevelocity_;
  }
  if (lastpreadditivevelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lastpreadditivevelocity);
    if (message_arena != submessage_arena) {
      lastpreadditivevelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastpreadditivevelocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lastpreadditivevelocity_ = lastpreadditivevelocity;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRootMotionSourceGroup.lastPreAdditiveVelocity)
}

// -------------------------------------------------------------------

// FRepRootMotionMontage

// optional bool bIsActive = 1;
inline bool FRepRootMotionMontage::_internal_has_bisactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FRepRootMotionMontage::has_bisactive() const {
  return _internal_has_bisactive();
}
inline void FRepRootMotionMontage::clear_bisactive() {
  _impl_.bisactive_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool FRepRootMotionMontage::_internal_bisactive() const {
  return _impl_.bisactive_;
}
inline bool FRepRootMotionMontage::bisactive() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.bIsActive)
  return _internal_bisactive();
}
inline void FRepRootMotionMontage::_internal_set_bisactive(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bisactive_ = value;
}
inline void FRepRootMotionMontage::set_bisactive(bool value) {
  _internal_set_bisactive(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRepRootMotionMontage.bIsActive)
}

// optional .unrealpb.UnrealObjectRef animMontage = 2;
inline bool FRepRootMotionMontage::_internal_has_animmontage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.animmontage_ != nullptr);
  return value;
}
inline bool FRepRootMotionMontage::has_animmontage() const {
  return _internal_has_animmontage();
}
inline void FRepRootMotionMontage::clear_animmontage() {
  if (_impl_.animmontage_ != nullptr) _impl_.animmontage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::UnrealObjectRef& FRepRootMotionMontage::_internal_animmontage() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.animmontage_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& FRepRootMotionMontage::animmontage() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.animMontage)
  return _internal_animmontage();
}
inline void FRepRootMotionMontage::unsafe_arena_set_allocated_animmontage(
    ::unrealpb::UnrealObjectRef* animmontage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.animmontage_);
  }
  _impl_.animmontage_ = animmontage;
  if (animmontage) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepRootMotionMontage.animMontage)
}
inline ::unrealpb::UnrealObjectRef* FRepRootMotionMontage::release_animmontage() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.animmontage_;
  _impl_.animmontage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* FRepRootMotionMontage::unsafe_arena_release_animmontage() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepRootMotionMontage.animMontage)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.animmontage_;
  _impl_.animmontage_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* FRepRootMotionMontage::_internal_mutable_animmontage() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.animmontage_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.animmontage_ = p;
  }
  return _impl_.animmontage_;
}
inline ::unrealpb::UnrealObjectRef* FRepRootMotionMontage::mutable_animmontage() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_animmontage();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepRootMotionMontage.animMontage)
  return _msg;
}
inline void FRepRootMotionMontage::set_allocated_animmontage(::unrealpb::UnrealObjectRef* animmontage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.animmontage_;
  }
  if (animmontage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(animmontage);
    if (message_arena != submessage_arena) {
      animmontage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animmontage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.animmontage_ = animmontage;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepRootMotionMontage.animMontage)
}

// optional float position = 3;
inline bool FRepRootMotionMontage::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FRepRootMotionMontage::has_position() const {
  return _internal_has_position();
}
inline void FRepRootMotionMontage::clear_position() {
  _impl_.position_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float FRepRootMotionMontage::_internal_position() const {
  return _impl_.position_;
}
inline float FRepRootMotionMontage::position() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.position)
  return _internal_position();
}
inline void FRepRootMotionMontage::_internal_set_position(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.position_ = value;
}
inline void FRepRootMotionMontage::set_position(float value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRepRootMotionMontage.position)
}

// optional .unrealpb.FVector location = 4;
inline bool FRepRootMotionMontage::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool FRepRootMotionMontage::has_location() const {
  return _internal_has_location();
}
inline void FRepRootMotionMontage::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::unrealpb::FVector& FRepRootMotionMontage::_internal_location() const {
  const ::unrealpb::FVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepRootMotionMontage::location() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.location)
  return _internal_location();
}
inline void FRepRootMotionMontage::unsafe_arena_set_allocated_location(
    ::unrealpb::FVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepRootMotionMontage.location)
}
inline ::unrealpb::FVector* FRepRootMotionMontage::release_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepRootMotionMontage.location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::mutable_location() {
  ::unrealpb::FVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepRootMotionMontage.location)
  return _msg;
}
inline void FRepRootMotionMontage::set_allocated_location(::unrealpb::FVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepRootMotionMontage.location)
}

// optional .unrealpb.FVector rotation = 5;
inline bool FRepRootMotionMontage::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool FRepRootMotionMontage::has_rotation() const {
  return _internal_has_rotation();
}
inline void FRepRootMotionMontage::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::unrealpb::FVector& FRepRootMotionMontage::_internal_rotation() const {
  const ::unrealpb::FVector* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepRootMotionMontage::rotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.rotation)
  return _internal_rotation();
}
inline void FRepRootMotionMontage::unsafe_arena_set_allocated_rotation(
    ::unrealpb::FVector* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepRootMotionMontage.rotation)
}
inline ::unrealpb::FVector* FRepRootMotionMontage::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepRootMotionMontage.rotation)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::mutable_rotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepRootMotionMontage.rotation)
  return _msg;
}
inline void FRepRootMotionMontage::set_allocated_rotation(::unrealpb::FVector* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepRootMotionMontage.rotation)
}

// optional .unrealpb.ActorComponentRef movementBase = 6;
inline bool FRepRootMotionMontage::_internal_has_movementbase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movementbase_ != nullptr);
  return value;
}
inline bool FRepRootMotionMontage::has_movementbase() const {
  return _internal_has_movementbase();
}
inline void FRepRootMotionMontage::clear_movementbase() {
  if (_impl_.movementbase_ != nullptr) _impl_.movementbase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::unrealpb::ActorComponentRef& FRepRootMotionMontage::_internal_movementbase() const {
  const ::unrealpb::ActorComponentRef* p = _impl_.movementbase_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::ActorComponentRef&>(
      ::unrealpb::_ActorComponentRef_default_instance_);
}
inline const ::unrealpb::ActorComponentRef& FRepRootMotionMontage::movementbase() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.movementBase)
  return _internal_movementbase();
}
inline void FRepRootMotionMontage::unsafe_arena_set_allocated_movementbase(
    ::unrealpb::ActorComponentRef* movementbase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movementbase_);
  }
  _impl_.movementbase_ = movementbase;
  if (movementbase) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepRootMotionMontage.movementBase)
}
inline ::unrealpb::ActorComponentRef* FRepRootMotionMontage::release_movementbase() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::ActorComponentRef* temp = _impl_.movementbase_;
  _impl_.movementbase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::ActorComponentRef* FRepRootMotionMontage::unsafe_arena_release_movementbase() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepRootMotionMontage.movementBase)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::ActorComponentRef* temp = _impl_.movementbase_;
  _impl_.movementbase_ = nullptr;
  return temp;
}
inline ::unrealpb::ActorComponentRef* FRepRootMotionMontage::_internal_mutable_movementbase() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.movementbase_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::ActorComponentRef>(GetArenaForAllocation());
    _impl_.movementbase_ = p;
  }
  return _impl_.movementbase_;
}
inline ::unrealpb::ActorComponentRef* FRepRootMotionMontage::mutable_movementbase() {
  ::unrealpb::ActorComponentRef* _msg = _internal_mutable_movementbase();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepRootMotionMontage.movementBase)
  return _msg;
}
inline void FRepRootMotionMontage::set_allocated_movementbase(::unrealpb::ActorComponentRef* movementbase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.movementbase_;
  }
  if (movementbase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(movementbase);
    if (message_arena != submessage_arena) {
      movementbase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movementbase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.movementbase_ = movementbase;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepRootMotionMontage.movementBase)
}

// optional string movementBaseBoneName = 7;
inline bool FRepRootMotionMontage::_internal_has_movementbasebonename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FRepRootMotionMontage::has_movementbasebonename() const {
  return _internal_has_movementbasebonename();
}
inline void FRepRootMotionMontage::clear_movementbasebonename() {
  _impl_.movementbasebonename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FRepRootMotionMontage::movementbasebonename() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.movementBaseBoneName)
  return _internal_movementbasebonename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FRepRootMotionMontage::set_movementbasebonename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.movementbasebonename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.FRepRootMotionMontage.movementBaseBoneName)
}
inline std::string* FRepRootMotionMontage::mutable_movementbasebonename() {
  std::string* _s = _internal_mutable_movementbasebonename();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepRootMotionMontage.movementBaseBoneName)
  return _s;
}
inline const std::string& FRepRootMotionMontage::_internal_movementbasebonename() const {
  return _impl_.movementbasebonename_.Get();
}
inline void FRepRootMotionMontage::_internal_set_movementbasebonename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.movementbasebonename_.Set(value, GetArenaForAllocation());
}
inline std::string* FRepRootMotionMontage::_internal_mutable_movementbasebonename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.movementbasebonename_.Mutable(GetArenaForAllocation());
}
inline std::string* FRepRootMotionMontage::release_movementbasebonename() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepRootMotionMontage.movementBaseBoneName)
  if (!_internal_has_movementbasebonename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.movementbasebonename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.movementbasebonename_.IsDefault()) {
    _impl_.movementbasebonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FRepRootMotionMontage::set_allocated_movementbasebonename(std::string* movementbasebonename) {
  if (movementbasebonename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.movementbasebonename_.SetAllocated(movementbasebonename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.movementbasebonename_.IsDefault()) {
    _impl_.movementbasebonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepRootMotionMontage.movementBaseBoneName)
}

// optional bool bRelativePosition = 8;
inline bool FRepRootMotionMontage::_internal_has_brelativeposition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FRepRootMotionMontage::has_brelativeposition() const {
  return _internal_has_brelativeposition();
}
inline void FRepRootMotionMontage::clear_brelativeposition() {
  _impl_.brelativeposition_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool FRepRootMotionMontage::_internal_brelativeposition() const {
  return _impl_.brelativeposition_;
}
inline bool FRepRootMotionMontage::brelativeposition() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.bRelativePosition)
  return _internal_brelativeposition();
}
inline void FRepRootMotionMontage::_internal_set_brelativeposition(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.brelativeposition_ = value;
}
inline void FRepRootMotionMontage::set_brelativeposition(bool value) {
  _internal_set_brelativeposition(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRepRootMotionMontage.bRelativePosition)
}

// optional bool bRelativeRotation = 9;
inline bool FRepRootMotionMontage::_internal_has_brelativerotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FRepRootMotionMontage::has_brelativerotation() const {
  return _internal_has_brelativerotation();
}
inline void FRepRootMotionMontage::clear_brelativerotation() {
  _impl_.brelativerotation_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool FRepRootMotionMontage::_internal_brelativerotation() const {
  return _impl_.brelativerotation_;
}
inline bool FRepRootMotionMontage::brelativerotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.bRelativeRotation)
  return _internal_brelativerotation();
}
inline void FRepRootMotionMontage::_internal_set_brelativerotation(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.brelativerotation_ = value;
}
inline void FRepRootMotionMontage::set_brelativerotation(bool value) {
  _internal_set_brelativerotation(value);
  // @@protoc_insertion_point(field_set:unrealpb.FRepRootMotionMontage.bRelativeRotation)
}

// optional .unrealpb.FRootMotionSourceGroup authoritativeRootMotion = 10;
inline bool FRepRootMotionMontage::_internal_has_authoritativerootmotion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.authoritativerootmotion_ != nullptr);
  return value;
}
inline bool FRepRootMotionMontage::has_authoritativerootmotion() const {
  return _internal_has_authoritativerootmotion();
}
inline void FRepRootMotionMontage::clear_authoritativerootmotion() {
  if (_impl_.authoritativerootmotion_ != nullptr) _impl_.authoritativerootmotion_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::unrealpb::FRootMotionSourceGroup& FRepRootMotionMontage::_internal_authoritativerootmotion() const {
  const ::unrealpb::FRootMotionSourceGroup* p = _impl_.authoritativerootmotion_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FRootMotionSourceGroup&>(
      ::unrealpb::_FRootMotionSourceGroup_default_instance_);
}
inline const ::unrealpb::FRootMotionSourceGroup& FRepRootMotionMontage::authoritativerootmotion() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.authoritativeRootMotion)
  return _internal_authoritativerootmotion();
}
inline void FRepRootMotionMontage::unsafe_arena_set_allocated_authoritativerootmotion(
    ::unrealpb::FRootMotionSourceGroup* authoritativerootmotion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authoritativerootmotion_);
  }
  _impl_.authoritativerootmotion_ = authoritativerootmotion;
  if (authoritativerootmotion) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepRootMotionMontage.authoritativeRootMotion)
}
inline ::unrealpb::FRootMotionSourceGroup* FRepRootMotionMontage::release_authoritativerootmotion() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::unrealpb::FRootMotionSourceGroup* temp = _impl_.authoritativerootmotion_;
  _impl_.authoritativerootmotion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FRootMotionSourceGroup* FRepRootMotionMontage::unsafe_arena_release_authoritativerootmotion() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepRootMotionMontage.authoritativeRootMotion)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::unrealpb::FRootMotionSourceGroup* temp = _impl_.authoritativerootmotion_;
  _impl_.authoritativerootmotion_ = nullptr;
  return temp;
}
inline ::unrealpb::FRootMotionSourceGroup* FRepRootMotionMontage::_internal_mutable_authoritativerootmotion() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.authoritativerootmotion_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FRootMotionSourceGroup>(GetArenaForAllocation());
    _impl_.authoritativerootmotion_ = p;
  }
  return _impl_.authoritativerootmotion_;
}
inline ::unrealpb::FRootMotionSourceGroup* FRepRootMotionMontage::mutable_authoritativerootmotion() {
  ::unrealpb::FRootMotionSourceGroup* _msg = _internal_mutable_authoritativerootmotion();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepRootMotionMontage.authoritativeRootMotion)
  return _msg;
}
inline void FRepRootMotionMontage::set_allocated_authoritativerootmotion(::unrealpb::FRootMotionSourceGroup* authoritativerootmotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.authoritativerootmotion_;
  }
  if (authoritativerootmotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(authoritativerootmotion);
    if (message_arena != submessage_arena) {
      authoritativerootmotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authoritativerootmotion, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.authoritativerootmotion_ = authoritativerootmotion;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepRootMotionMontage.authoritativeRootMotion)
}

// optional .unrealpb.FVector acceleration = 11;
inline bool FRepRootMotionMontage::_internal_has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline bool FRepRootMotionMontage::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void FRepRootMotionMontage::clear_acceleration() {
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::unrealpb::FVector& FRepRootMotionMontage::_internal_acceleration() const {
  const ::unrealpb::FVector* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepRootMotionMontage::acceleration() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.acceleration)
  return _internal_acceleration();
}
inline void FRepRootMotionMontage::unsafe_arena_set_allocated_acceleration(
    ::unrealpb::FVector* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  if (acceleration) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepRootMotionMontage.acceleration)
}
inline ::unrealpb::FVector* FRepRootMotionMontage::release_acceleration() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::unrealpb::FVector* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepRootMotionMontage.acceleration)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::unrealpb::FVector* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::_internal_mutable_acceleration() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::mutable_acceleration() {
  ::unrealpb::FVector* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepRootMotionMontage.acceleration)
  return _msg;
}
inline void FRepRootMotionMontage::set_allocated_acceleration(::unrealpb::FVector* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acceleration);
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepRootMotionMontage.acceleration)
}

// optional .unrealpb.FVector linearVelocity = 12;
inline bool FRepRootMotionMontage::_internal_has_linearvelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linearvelocity_ != nullptr);
  return value;
}
inline bool FRepRootMotionMontage::has_linearvelocity() const {
  return _internal_has_linearvelocity();
}
inline void FRepRootMotionMontage::clear_linearvelocity() {
  if (_impl_.linearvelocity_ != nullptr) _impl_.linearvelocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::unrealpb::FVector& FRepRootMotionMontage::_internal_linearvelocity() const {
  const ::unrealpb::FVector* p = _impl_.linearvelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FRepRootMotionMontage::linearvelocity() const {
  // @@protoc_insertion_point(field_get:unrealpb.FRepRootMotionMontage.linearVelocity)
  return _internal_linearvelocity();
}
inline void FRepRootMotionMontage::unsafe_arena_set_allocated_linearvelocity(
    ::unrealpb::FVector* linearvelocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linearvelocity_);
  }
  _impl_.linearvelocity_ = linearvelocity;
  if (linearvelocity) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FRepRootMotionMontage.linearVelocity)
}
inline ::unrealpb::FVector* FRepRootMotionMontage::release_linearvelocity() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::unrealpb::FVector* temp = _impl_.linearvelocity_;
  _impl_.linearvelocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::unsafe_arena_release_linearvelocity() {
  // @@protoc_insertion_point(field_release:unrealpb.FRepRootMotionMontage.linearVelocity)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::unrealpb::FVector* temp = _impl_.linearvelocity_;
  _impl_.linearvelocity_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::_internal_mutable_linearvelocity() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.linearvelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.linearvelocity_ = p;
  }
  return _impl_.linearvelocity_;
}
inline ::unrealpb::FVector* FRepRootMotionMontage::mutable_linearvelocity() {
  ::unrealpb::FVector* _msg = _internal_mutable_linearvelocity();
  // @@protoc_insertion_point(field_mutable:unrealpb.FRepRootMotionMontage.linearVelocity)
  return _msg;
}
inline void FRepRootMotionMontage::set_allocated_linearvelocity(::unrealpb::FVector* linearvelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.linearvelocity_;
  }
  if (linearvelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(linearvelocity);
    if (message_arena != submessage_arena) {
      linearvelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linearvelocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.linearvelocity_ = linearvelocity;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FRepRootMotionMontage.linearVelocity)
}

// -------------------------------------------------------------------

// CharacterState

// optional .unrealpb.FRepRootMotionMontage rootMotion = 2;
inline bool CharacterState::_internal_has_rootmotion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rootmotion_ != nullptr);
  return value;
}
inline bool CharacterState::has_rootmotion() const {
  return _internal_has_rootmotion();
}
inline void CharacterState::clear_rootmotion() {
  if (_impl_.rootmotion_ != nullptr) _impl_.rootmotion_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::unrealpb::FRepRootMotionMontage& CharacterState::_internal_rootmotion() const {
  const ::unrealpb::FRepRootMotionMontage* p = _impl_.rootmotion_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FRepRootMotionMontage&>(
      ::unrealpb::_FRepRootMotionMontage_default_instance_);
}
inline const ::unrealpb::FRepRootMotionMontage& CharacterState::rootmotion() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.rootMotion)
  return _internal_rootmotion();
}
inline void CharacterState::unsafe_arena_set_allocated_rootmotion(
    ::unrealpb::FRepRootMotionMontage* rootmotion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootmotion_);
  }
  _impl_.rootmotion_ = rootmotion;
  if (rootmotion) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.CharacterState.rootMotion)
}
inline ::unrealpb::FRepRootMotionMontage* CharacterState::release_rootmotion() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FRepRootMotionMontage* temp = _impl_.rootmotion_;
  _impl_.rootmotion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FRepRootMotionMontage* CharacterState::unsafe_arena_release_rootmotion() {
  // @@protoc_insertion_point(field_release:unrealpb.CharacterState.rootMotion)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FRepRootMotionMontage* temp = _impl_.rootmotion_;
  _impl_.rootmotion_ = nullptr;
  return temp;
}
inline ::unrealpb::FRepRootMotionMontage* CharacterState::_internal_mutable_rootmotion() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rootmotion_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FRepRootMotionMontage>(GetArenaForAllocation());
    _impl_.rootmotion_ = p;
  }
  return _impl_.rootmotion_;
}
inline ::unrealpb::FRepRootMotionMontage* CharacterState::mutable_rootmotion() {
  ::unrealpb::FRepRootMotionMontage* _msg = _internal_mutable_rootmotion();
  // @@protoc_insertion_point(field_mutable:unrealpb.CharacterState.rootMotion)
  return _msg;
}
inline void CharacterState::set_allocated_rootmotion(::unrealpb::FRepRootMotionMontage* rootmotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rootmotion_;
  }
  if (rootmotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rootmotion);
    if (message_arena != submessage_arena) {
      rootmotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rootmotion, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rootmotion_ = rootmotion;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.CharacterState.rootMotion)
}

// optional .unrealpb.FBasedMovementInfo basedMovement = 3;
inline bool CharacterState::_internal_has_basedmovement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.basedmovement_ != nullptr);
  return value;
}
inline bool CharacterState::has_basedmovement() const {
  return _internal_has_basedmovement();
}
inline void CharacterState::clear_basedmovement() {
  if (_impl_.basedmovement_ != nullptr) _impl_.basedmovement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::FBasedMovementInfo& CharacterState::_internal_basedmovement() const {
  const ::unrealpb::FBasedMovementInfo* p = _impl_.basedmovement_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FBasedMovementInfo&>(
      ::unrealpb::_FBasedMovementInfo_default_instance_);
}
inline const ::unrealpb::FBasedMovementInfo& CharacterState::basedmovement() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.basedMovement)
  return _internal_basedmovement();
}
inline void CharacterState::unsafe_arena_set_allocated_basedmovement(
    ::unrealpb::FBasedMovementInfo* basedmovement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basedmovement_);
  }
  _impl_.basedmovement_ = basedmovement;
  if (basedmovement) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.CharacterState.basedMovement)
}
inline ::unrealpb::FBasedMovementInfo* CharacterState::release_basedmovement() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FBasedMovementInfo* temp = _impl_.basedmovement_;
  _impl_.basedmovement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FBasedMovementInfo* CharacterState::unsafe_arena_release_basedmovement() {
  // @@protoc_insertion_point(field_release:unrealpb.CharacterState.basedMovement)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FBasedMovementInfo* temp = _impl_.basedmovement_;
  _impl_.basedmovement_ = nullptr;
  return temp;
}
inline ::unrealpb::FBasedMovementInfo* CharacterState::_internal_mutable_basedmovement() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.basedmovement_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FBasedMovementInfo>(GetArenaForAllocation());
    _impl_.basedmovement_ = p;
  }
  return _impl_.basedmovement_;
}
inline ::unrealpb::FBasedMovementInfo* CharacterState::mutable_basedmovement() {
  ::unrealpb::FBasedMovementInfo* _msg = _internal_mutable_basedmovement();
  // @@protoc_insertion_point(field_mutable:unrealpb.CharacterState.basedMovement)
  return _msg;
}
inline void CharacterState::set_allocated_basedmovement(::unrealpb::FBasedMovementInfo* basedmovement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basedmovement_;
  }
  if (basedmovement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basedmovement);
    if (message_arena != submessage_arena) {
      basedmovement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basedmovement, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.basedmovement_ = basedmovement;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.CharacterState.basedMovement)
}

// optional float serverLastTransformUpdateTimeStamp = 4;
inline bool CharacterState::_internal_has_serverlasttransformupdatetimestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CharacterState::has_serverlasttransformupdatetimestamp() const {
  return _internal_has_serverlasttransformupdatetimestamp();
}
inline void CharacterState::clear_serverlasttransformupdatetimestamp() {
  _impl_.serverlasttransformupdatetimestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CharacterState::_internal_serverlasttransformupdatetimestamp() const {
  return _impl_.serverlasttransformupdatetimestamp_;
}
inline float CharacterState::serverlasttransformupdatetimestamp() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.serverLastTransformUpdateTimeStamp)
  return _internal_serverlasttransformupdatetimestamp();
}
inline void CharacterState::_internal_set_serverlasttransformupdatetimestamp(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.serverlasttransformupdatetimestamp_ = value;
}
inline void CharacterState::set_serverlasttransformupdatetimestamp(float value) {
  _internal_set_serverlasttransformupdatetimestamp(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.serverLastTransformUpdateTimeStamp)
}

// optional uint32 movementMode = 5;
inline bool CharacterState::_internal_has_movementmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CharacterState::has_movementmode() const {
  return _internal_has_movementmode();
}
inline void CharacterState::clear_movementmode() {
  _impl_.movementmode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CharacterState::_internal_movementmode() const {
  return _impl_.movementmode_;
}
inline uint32_t CharacterState::movementmode() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.movementMode)
  return _internal_movementmode();
}
inline void CharacterState::_internal_set_movementmode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.movementmode_ = value;
}
inline void CharacterState::set_movementmode(uint32_t value) {
  _internal_set_movementmode(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.movementMode)
}

// optional bool bIsCrouched = 6;
inline bool CharacterState::_internal_has_biscrouched() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CharacterState::has_biscrouched() const {
  return _internal_has_biscrouched();
}
inline void CharacterState::clear_biscrouched() {
  _impl_.biscrouched_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CharacterState::_internal_biscrouched() const {
  return _impl_.biscrouched_;
}
inline bool CharacterState::biscrouched() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.bIsCrouched)
  return _internal_biscrouched();
}
inline void CharacterState::_internal_set_biscrouched(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.biscrouched_ = value;
}
inline void CharacterState::set_biscrouched(bool value) {
  _internal_set_biscrouched(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.bIsCrouched)
}

// optional bool bProxyIsJumpForceApplied = 7;
inline bool CharacterState::_internal_has_bproxyisjumpforceapplied() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CharacterState::has_bproxyisjumpforceapplied() const {
  return _internal_has_bproxyisjumpforceapplied();
}
inline void CharacterState::clear_bproxyisjumpforceapplied() {
  _impl_.bproxyisjumpforceapplied_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CharacterState::_internal_bproxyisjumpforceapplied() const {
  return _impl_.bproxyisjumpforceapplied_;
}
inline bool CharacterState::bproxyisjumpforceapplied() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.bProxyIsJumpForceApplied)
  return _internal_bproxyisjumpforceapplied();
}
inline void CharacterState::_internal_set_bproxyisjumpforceapplied(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.bproxyisjumpforceapplied_ = value;
}
inline void CharacterState::set_bproxyisjumpforceapplied(bool value) {
  _internal_set_bproxyisjumpforceapplied(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.bProxyIsJumpForceApplied)
}

// optional float animRootMotionTranslationScale = 8;
inline bool CharacterState::_internal_has_animrootmotiontranslationscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CharacterState::has_animrootmotiontranslationscale() const {
  return _internal_has_animrootmotiontranslationscale();
}
inline void CharacterState::clear_animrootmotiontranslationscale() {
  _impl_.animrootmotiontranslationscale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CharacterState::_internal_animrootmotiontranslationscale() const {
  return _impl_.animrootmotiontranslationscale_;
}
inline float CharacterState::animrootmotiontranslationscale() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.animRootMotionTranslationScale)
  return _internal_animrootmotiontranslationscale();
}
inline void CharacterState::_internal_set_animrootmotiontranslationscale(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.animrootmotiontranslationscale_ = value;
}
inline void CharacterState::set_animrootmotiontranslationscale(float value) {
  _internal_set_animrootmotiontranslationscale(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.animRootMotionTranslationScale)
}

// optional float replayLastTransformUpdateTimeStamp = 9;
inline bool CharacterState::_internal_has_replaylasttransformupdatetimestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CharacterState::has_replaylasttransformupdatetimestamp() const {
  return _internal_has_replaylasttransformupdatetimestamp();
}
inline void CharacterState::clear_replaylasttransformupdatetimestamp() {
  _impl_.replaylasttransformupdatetimestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CharacterState::_internal_replaylasttransformupdatetimestamp() const {
  return _impl_.replaylasttransformupdatetimestamp_;
}
inline float CharacterState::replaylasttransformupdatetimestamp() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.replayLastTransformUpdateTimeStamp)
  return _internal_replaylasttransformupdatetimestamp();
}
inline void CharacterState::_internal_set_replaylasttransformupdatetimestamp(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.replaylasttransformupdatetimestamp_ = value;
}
inline void CharacterState::set_replaylasttransformupdatetimestamp(float value) {
  _internal_set_replaylasttransformupdatetimestamp(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.replayLastTransformUpdateTimeStamp)
}

// -------------------------------------------------------------------

// Character_ServerMovePacked_Params

// uint32 bitsNum = 1;
inline void Character_ServerMovePacked_Params::clear_bitsnum() {
  _impl_.bitsnum_ = 0u;
}
inline uint32_t Character_ServerMovePacked_Params::_internal_bitsnum() const {
  return _impl_.bitsnum_;
}
inline uint32_t Character_ServerMovePacked_Params::bitsnum() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ServerMovePacked_Params.bitsNum)
  return _internal_bitsnum();
}
inline void Character_ServerMovePacked_Params::_internal_set_bitsnum(uint32_t value) {
  
  _impl_.bitsnum_ = value;
}
inline void Character_ServerMovePacked_Params::set_bitsnum(uint32_t value) {
  _internal_set_bitsnum(value);
  // @@protoc_insertion_point(field_set:unrealpb.Character_ServerMovePacked_Params.bitsNum)
}

// bytes packedBits = 2;
inline void Character_ServerMovePacked_Params::clear_packedbits() {
  _impl_.packedbits_.ClearToEmpty();
}
inline const std::string& Character_ServerMovePacked_Params::packedbits() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ServerMovePacked_Params.packedBits)
  return _internal_packedbits();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character_ServerMovePacked_Params::set_packedbits(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packedbits_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.Character_ServerMovePacked_Params.packedBits)
}
inline std::string* Character_ServerMovePacked_Params::mutable_packedbits() {
  std::string* _s = _internal_mutable_packedbits();
  // @@protoc_insertion_point(field_mutable:unrealpb.Character_ServerMovePacked_Params.packedBits)
  return _s;
}
inline const std::string& Character_ServerMovePacked_Params::_internal_packedbits() const {
  return _impl_.packedbits_.Get();
}
inline void Character_ServerMovePacked_Params::_internal_set_packedbits(const std::string& value) {
  
  _impl_.packedbits_.Set(value, GetArenaForAllocation());
}
inline std::string* Character_ServerMovePacked_Params::_internal_mutable_packedbits() {
  
  return _impl_.packedbits_.Mutable(GetArenaForAllocation());
}
inline std::string* Character_ServerMovePacked_Params::release_packedbits() {
  // @@protoc_insertion_point(field_release:unrealpb.Character_ServerMovePacked_Params.packedBits)
  return _impl_.packedbits_.Release();
}
inline void Character_ServerMovePacked_Params::set_allocated_packedbits(std::string* packedbits) {
  if (packedbits != nullptr) {
    
  } else {
    
  }
  _impl_.packedbits_.SetAllocated(packedbits, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packedbits_.IsDefault()) {
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Character_ServerMovePacked_Params.packedBits)
}

// -------------------------------------------------------------------

// Character_ClientMoveResponsePacked_Params

// uint32 bitsNum = 1;
inline void Character_ClientMoveResponsePacked_Params::clear_bitsnum() {
  _impl_.bitsnum_ = 0u;
}
inline uint32_t Character_ClientMoveResponsePacked_Params::_internal_bitsnum() const {
  return _impl_.bitsnum_;
}
inline uint32_t Character_ClientMoveResponsePacked_Params::bitsnum() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ClientMoveResponsePacked_Params.bitsNum)
  return _internal_bitsnum();
}
inline void Character_ClientMoveResponsePacked_Params::_internal_set_bitsnum(uint32_t value) {
  
  _impl_.bitsnum_ = value;
}
inline void Character_ClientMoveResponsePacked_Params::set_bitsnum(uint32_t value) {
  _internal_set_bitsnum(value);
  // @@protoc_insertion_point(field_set:unrealpb.Character_ClientMoveResponsePacked_Params.bitsNum)
}

// bytes packedBits = 2;
inline void Character_ClientMoveResponsePacked_Params::clear_packedbits() {
  _impl_.packedbits_.ClearToEmpty();
}
inline const std::string& Character_ClientMoveResponsePacked_Params::packedbits() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
  return _internal_packedbits();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character_ClientMoveResponsePacked_Params::set_packedbits(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packedbits_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
}
inline std::string* Character_ClientMoveResponsePacked_Params::mutable_packedbits() {
  std::string* _s = _internal_mutable_packedbits();
  // @@protoc_insertion_point(field_mutable:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
  return _s;
}
inline const std::string& Character_ClientMoveResponsePacked_Params::_internal_packedbits() const {
  return _impl_.packedbits_.Get();
}
inline void Character_ClientMoveResponsePacked_Params::_internal_set_packedbits(const std::string& value) {
  
  _impl_.packedbits_.Set(value, GetArenaForAllocation());
}
inline std::string* Character_ClientMoveResponsePacked_Params::_internal_mutable_packedbits() {
  
  return _impl_.packedbits_.Mutable(GetArenaForAllocation());
}
inline std::string* Character_ClientMoveResponsePacked_Params::release_packedbits() {
  // @@protoc_insertion_point(field_release:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
  return _impl_.packedbits_.Release();
}
inline void Character_ClientMoveResponsePacked_Params::set_allocated_packedbits(std::string* packedbits) {
  if (packedbits != nullptr) {
    
  } else {
    
  }
  _impl_.packedbits_.SetAllocated(packedbits, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packedbits_.IsDefault()) {
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
}

// -------------------------------------------------------------------

// PlayerState

// optional float score = 2;
inline bool PlayerState::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerState::has_score() const {
  return _internal_has_score();
}
inline void PlayerState::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PlayerState::_internal_score() const {
  return _impl_.score_;
}
inline float PlayerState::score() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerState.score)
  return _internal_score();
}
inline void PlayerState::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.score_ = value;
}
inline void PlayerState::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerState.score)
}

// optional int32 playerId = 3;
inline bool PlayerState::_internal_has_playerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerState::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerState::clear_playerid() {
  _impl_.playerid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t PlayerState::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t PlayerState::playerid() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerState.playerId)
  return _internal_playerid();
}
inline void PlayerState::_internal_set_playerid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.playerid_ = value;
}
inline void PlayerState::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerState.playerId)
}

// optional uint32 ping = 4;
inline bool PlayerState::_internal_has_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerState::has_ping() const {
  return _internal_has_ping();
}
inline void PlayerState::clear_ping() {
  _impl_.ping_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PlayerState::_internal_ping() const {
  return _impl_.ping_;
}
inline uint32_t PlayerState::ping() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerState.ping)
  return _internal_ping();
}
inline void PlayerState::_internal_set_ping(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ping_ = value;
}
inline void PlayerState::set_ping(uint32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerState.ping)
}

// optional string playerName = 5;
inline bool PlayerState::_internal_has_playername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerState::has_playername() const {
  return _internal_has_playername();
}
inline void PlayerState::clear_playername() {
  _impl_.playername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerState::playername() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerState.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerState::set_playername(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.playername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.PlayerState.playerName)
}
inline std::string* PlayerState::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerState.playerName)
  return _s;
}
inline const std::string& PlayerState::_internal_playername() const {
  return _impl_.playername_.Get();
}
inline void PlayerState::_internal_set_playername(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.playername_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerState::_internal_mutable_playername() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.playername_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerState::release_playername() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerState.playerName)
  if (!_internal_has_playername()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.playername_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerState::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.playername_.SetAllocated(playername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerState.playerName)
}

// -------------------------------------------------------------------

// ControllerState

// .unrealpb.UnrealObjectRef playerState = 2;
inline bool ControllerState::_internal_has_playerstate() const {
  return this != internal_default_instance() && _impl_.playerstate_ != nullptr;
}
inline bool ControllerState::has_playerstate() const {
  return _internal_has_playerstate();
}
inline void ControllerState::clear_playerstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerstate_ != nullptr) {
    delete _impl_.playerstate_;
  }
  _impl_.playerstate_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& ControllerState::_internal_playerstate() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.playerstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& ControllerState::playerstate() const {
  // @@protoc_insertion_point(field_get:unrealpb.ControllerState.playerState)
  return _internal_playerstate();
}
inline void ControllerState::unsafe_arena_set_allocated_playerstate(
    ::unrealpb::UnrealObjectRef* playerstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerstate_);
  }
  _impl_.playerstate_ = playerstate;
  if (playerstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.ControllerState.playerState)
}
inline ::unrealpb::UnrealObjectRef* ControllerState::release_playerstate() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.playerstate_;
  _impl_.playerstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::unsafe_arena_release_playerstate() {
  // @@protoc_insertion_point(field_release:unrealpb.ControllerState.playerState)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.playerstate_;
  _impl_.playerstate_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::_internal_mutable_playerstate() {
  
  if (_impl_.playerstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.playerstate_ = p;
  }
  return _impl_.playerstate_;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::mutable_playerstate() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_playerstate();
  // @@protoc_insertion_point(field_mutable:unrealpb.ControllerState.playerState)
  return _msg;
}
inline void ControllerState::set_allocated_playerstate(::unrealpb::UnrealObjectRef* playerstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerstate_;
  }
  if (playerstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerstate);
    if (message_arena != submessage_arena) {
      playerstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerstate_ = playerstate;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ControllerState.playerState)
}

// .unrealpb.UnrealObjectRef pawn = 3;
inline bool ControllerState::_internal_has_pawn() const {
  return this != internal_default_instance() && _impl_.pawn_ != nullptr;
}
inline bool ControllerState::has_pawn() const {
  return _internal_has_pawn();
}
inline void ControllerState::clear_pawn() {
  if (GetArenaForAllocation() == nullptr && _impl_.pawn_ != nullptr) {
    delete _impl_.pawn_;
  }
  _impl_.pawn_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& ControllerState::_internal_pawn() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.pawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& ControllerState::pawn() const {
  // @@protoc_insertion_point(field_get:unrealpb.ControllerState.pawn)
  return _internal_pawn();
}
inline void ControllerState::unsafe_arena_set_allocated_pawn(
    ::unrealpb::UnrealObjectRef* pawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawn_);
  }
  _impl_.pawn_ = pawn;
  if (pawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.ControllerState.pawn)
}
inline ::unrealpb::UnrealObjectRef* ControllerState::release_pawn() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::unsafe_arena_release_pawn() {
  // @@protoc_insertion_point(field_release:unrealpb.ControllerState.pawn)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::_internal_mutable_pawn() {
  
  if (_impl_.pawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.pawn_ = p;
  }
  return _impl_.pawn_;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::mutable_pawn() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_pawn();
  // @@protoc_insertion_point(field_mutable:unrealpb.ControllerState.pawn)
  return _msg;
}
inline void ControllerState::set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawn_;
  }
  if (pawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawn);
    if (message_arena != submessage_arena) {
      pawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawn, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pawn_ = pawn;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ControllerState.pawn)
}

// -------------------------------------------------------------------

// Controller_ClientSetLocation_Params

// .unrealpb.FVector newLocation = 1;
inline bool Controller_ClientSetLocation_Params::_internal_has_newlocation() const {
  return this != internal_default_instance() && _impl_.newlocation_ != nullptr;
}
inline bool Controller_ClientSetLocation_Params::has_newlocation() const {
  return _internal_has_newlocation();
}
inline void Controller_ClientSetLocation_Params::clear_newlocation() {
  if (GetArenaForAllocation() == nullptr && _impl_.newlocation_ != nullptr) {
    delete _impl_.newlocation_;
  }
  _impl_.newlocation_ = nullptr;
}
inline const ::unrealpb::FVector& Controller_ClientSetLocation_Params::_internal_newlocation() const {
  const ::unrealpb::FVector* p = _impl_.newlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& Controller_ClientSetLocation_Params::newlocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.Controller_ClientSetLocation_Params.newLocation)
  return _internal_newlocation();
}
inline void Controller_ClientSetLocation_Params::unsafe_arena_set_allocated_newlocation(
    ::unrealpb::FVector* newlocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newlocation_);
  }
  _impl_.newlocation_ = newlocation;
  if (newlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.Controller_ClientSetLocation_Params.newLocation)
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::release_newlocation() {
  
  ::unrealpb::FVector* temp = _impl_.newlocation_;
  _impl_.newlocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::unsafe_arena_release_newlocation() {
  // @@protoc_insertion_point(field_release:unrealpb.Controller_ClientSetLocation_Params.newLocation)
  
  ::unrealpb::FVector* temp = _impl_.newlocation_;
  _impl_.newlocation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::_internal_mutable_newlocation() {
  
  if (_impl_.newlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newlocation_ = p;
  }
  return _impl_.newlocation_;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::mutable_newlocation() {
  ::unrealpb::FVector* _msg = _internal_mutable_newlocation();
  // @@protoc_insertion_point(field_mutable:unrealpb.Controller_ClientSetLocation_Params.newLocation)
  return _msg;
}
inline void Controller_ClientSetLocation_Params::set_allocated_newlocation(::unrealpb::FVector* newlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newlocation_;
  }
  if (newlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newlocation);
    if (message_arena != submessage_arena) {
      newlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newlocation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newlocation_ = newlocation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Controller_ClientSetLocation_Params.newLocation)
}

// .unrealpb.FVector newRotation = 2;
inline bool Controller_ClientSetLocation_Params::_internal_has_newrotation() const {
  return this != internal_default_instance() && _impl_.newrotation_ != nullptr;
}
inline bool Controller_ClientSetLocation_Params::has_newrotation() const {
  return _internal_has_newrotation();
}
inline void Controller_ClientSetLocation_Params::clear_newrotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.newrotation_ != nullptr) {
    delete _impl_.newrotation_;
  }
  _impl_.newrotation_ = nullptr;
}
inline const ::unrealpb::FVector& Controller_ClientSetLocation_Params::_internal_newrotation() const {
  const ::unrealpb::FVector* p = _impl_.newrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& Controller_ClientSetLocation_Params::newrotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.Controller_ClientSetLocation_Params.newRotation)
  return _internal_newrotation();
}
inline void Controller_ClientSetLocation_Params::unsafe_arena_set_allocated_newrotation(
    ::unrealpb::FVector* newrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrotation_);
  }
  _impl_.newrotation_ = newrotation;
  if (newrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.Controller_ClientSetLocation_Params.newRotation)
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::release_newrotation() {
  
  ::unrealpb::FVector* temp = _impl_.newrotation_;
  _impl_.newrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::unsafe_arena_release_newrotation() {
  // @@protoc_insertion_point(field_release:unrealpb.Controller_ClientSetLocation_Params.newRotation)
  
  ::unrealpb::FVector* temp = _impl_.newrotation_;
  _impl_.newrotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::_internal_mutable_newrotation() {
  
  if (_impl_.newrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newrotation_ = p;
  }
  return _impl_.newrotation_;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::mutable_newrotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_newrotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.Controller_ClientSetLocation_Params.newRotation)
  return _msg;
}
inline void Controller_ClientSetLocation_Params::set_allocated_newrotation(::unrealpb::FVector* newrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newrotation_;
  }
  if (newrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newrotation);
    if (message_arena != submessage_arena) {
      newrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newrotation_ = newrotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Controller_ClientSetLocation_Params.newRotation)
}

// -------------------------------------------------------------------

// Controller_ClientSetRotation_Params

// .unrealpb.FVector newRotation = 1;
inline bool Controller_ClientSetRotation_Params::_internal_has_newrotation() const {
  return this != internal_default_instance() && _impl_.newrotation_ != nullptr;
}
inline bool Controller_ClientSetRotation_Params::has_newrotation() const {
  return _internal_has_newrotation();
}
inline void Controller_ClientSetRotation_Params::clear_newrotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.newrotation_ != nullptr) {
    delete _impl_.newrotation_;
  }
  _impl_.newrotation_ = nullptr;
}
inline const ::unrealpb::FVector& Controller_ClientSetRotation_Params::_internal_newrotation() const {
  const ::unrealpb::FVector* p = _impl_.newrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& Controller_ClientSetRotation_Params::newrotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.Controller_ClientSetRotation_Params.newRotation)
  return _internal_newrotation();
}
inline void Controller_ClientSetRotation_Params::unsafe_arena_set_allocated_newrotation(
    ::unrealpb::FVector* newrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrotation_);
  }
  _impl_.newrotation_ = newrotation;
  if (newrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.Controller_ClientSetRotation_Params.newRotation)
}
inline ::unrealpb::FVector* Controller_ClientSetRotation_Params::release_newrotation() {
  
  ::unrealpb::FVector* temp = _impl_.newrotation_;
  _impl_.newrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetRotation_Params::unsafe_arena_release_newrotation() {
  // @@protoc_insertion_point(field_release:unrealpb.Controller_ClientSetRotation_Params.newRotation)
  
  ::unrealpb::FVector* temp = _impl_.newrotation_;
  _impl_.newrotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetRotation_Params::_internal_mutable_newrotation() {
  
  if (_impl_.newrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newrotation_ = p;
  }
  return _impl_.newrotation_;
}
inline ::unrealpb::FVector* Controller_ClientSetRotation_Params::mutable_newrotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_newrotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.Controller_ClientSetRotation_Params.newRotation)
  return _msg;
}
inline void Controller_ClientSetRotation_Params::set_allocated_newrotation(::unrealpb::FVector* newrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newrotation_;
  }
  if (newrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newrotation);
    if (message_arena != submessage_arena) {
      newrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newrotation_ = newrotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Controller_ClientSetRotation_Params.newRotation)
}

// bool bResetCamera = 2;
inline void Controller_ClientSetRotation_Params::clear_bresetcamera() {
  _impl_.bresetcamera_ = false;
}
inline bool Controller_ClientSetRotation_Params::_internal_bresetcamera() const {
  return _impl_.bresetcamera_;
}
inline bool Controller_ClientSetRotation_Params::bresetcamera() const {
  // @@protoc_insertion_point(field_get:unrealpb.Controller_ClientSetRotation_Params.bResetCamera)
  return _internal_bresetcamera();
}
inline void Controller_ClientSetRotation_Params::_internal_set_bresetcamera(bool value) {
  
  _impl_.bresetcamera_ = value;
}
inline void Controller_ClientSetRotation_Params::set_bresetcamera(bool value) {
  _internal_set_bresetcamera(value);
  // @@protoc_insertion_point(field_set:unrealpb.Controller_ClientSetRotation_Params.bResetCamera)
}

// -------------------------------------------------------------------

// PlayerControllerState

// optional .unrealpb.FVector targetViewRotation = 2;
inline bool PlayerControllerState::_internal_has_targetviewrotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.targetviewrotation_ != nullptr);
  return value;
}
inline bool PlayerControllerState::has_targetviewrotation() const {
  return _internal_has_targetviewrotation();
}
inline void PlayerControllerState::clear_targetviewrotation() {
  if (_impl_.targetviewrotation_ != nullptr) _impl_.targetviewrotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::unrealpb::FVector& PlayerControllerState::_internal_targetviewrotation() const {
  const ::unrealpb::FVector* p = _impl_.targetviewrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerControllerState::targetviewrotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerControllerState.targetViewRotation)
  return _internal_targetviewrotation();
}
inline void PlayerControllerState::unsafe_arena_set_allocated_targetviewrotation(
    ::unrealpb::FVector* targetviewrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetviewrotation_);
  }
  _impl_.targetviewrotation_ = targetviewrotation;
  if (targetviewrotation) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerControllerState.targetViewRotation)
}
inline ::unrealpb::FVector* PlayerControllerState::release_targetviewrotation() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.targetviewrotation_;
  _impl_.targetviewrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::unsafe_arena_release_targetviewrotation() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerControllerState.targetViewRotation)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.targetviewrotation_;
  _impl_.targetviewrotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::_internal_mutable_targetviewrotation() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.targetviewrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.targetviewrotation_ = p;
  }
  return _impl_.targetviewrotation_;
}
inline ::unrealpb::FVector* PlayerControllerState::mutable_targetviewrotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_targetviewrotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerControllerState.targetViewRotation)
  return _msg;
}
inline void PlayerControllerState::set_allocated_targetviewrotation(::unrealpb::FVector* targetviewrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.targetviewrotation_;
  }
  if (targetviewrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(targetviewrotation);
    if (message_arena != submessage_arena) {
      targetviewrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetviewrotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.targetviewrotation_ = targetviewrotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerControllerState.targetViewRotation)
}

// optional .unrealpb.FVector spawnLocation = 3;
inline bool PlayerControllerState::_internal_has_spawnlocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spawnlocation_ != nullptr);
  return value;
}
inline bool PlayerControllerState::has_spawnlocation() const {
  return _internal_has_spawnlocation();
}
inline void PlayerControllerState::clear_spawnlocation() {
  if (_impl_.spawnlocation_ != nullptr) _impl_.spawnlocation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::FVector& PlayerControllerState::_internal_spawnlocation() const {
  const ::unrealpb::FVector* p = _impl_.spawnlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerControllerState::spawnlocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerControllerState.spawnLocation)
  return _internal_spawnlocation();
}
inline void PlayerControllerState::unsafe_arena_set_allocated_spawnlocation(
    ::unrealpb::FVector* spawnlocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spawnlocation_);
  }
  _impl_.spawnlocation_ = spawnlocation;
  if (spawnlocation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerControllerState.spawnLocation)
}
inline ::unrealpb::FVector* PlayerControllerState::release_spawnlocation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FVector* temp = _impl_.spawnlocation_;
  _impl_.spawnlocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::unsafe_arena_release_spawnlocation() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerControllerState.spawnLocation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FVector* temp = _impl_.spawnlocation_;
  _impl_.spawnlocation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::_internal_mutable_spawnlocation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.spawnlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.spawnlocation_ = p;
  }
  return _impl_.spawnlocation_;
}
inline ::unrealpb::FVector* PlayerControllerState::mutable_spawnlocation() {
  ::unrealpb::FVector* _msg = _internal_mutable_spawnlocation();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerControllerState.spawnLocation)
  return _msg;
}
inline void PlayerControllerState::set_allocated_spawnlocation(::unrealpb::FVector* spawnlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spawnlocation_;
  }
  if (spawnlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spawnlocation);
    if (message_arena != submessage_arena) {
      spawnlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spawnlocation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.spawnlocation_ = spawnlocation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerControllerState.spawnLocation)
}

// -------------------------------------------------------------------

// PlayerController_ServerUpdateCamera_Params

// .unrealpb.FVector camLoc = 1;
inline bool PlayerController_ServerUpdateCamera_Params::_internal_has_camloc() const {
  return this != internal_default_instance() && _impl_.camloc_ != nullptr;
}
inline bool PlayerController_ServerUpdateCamera_Params::has_camloc() const {
  return _internal_has_camloc();
}
inline void PlayerController_ServerUpdateCamera_Params::clear_camloc() {
  if (GetArenaForAllocation() == nullptr && _impl_.camloc_ != nullptr) {
    delete _impl_.camloc_;
  }
  _impl_.camloc_ = nullptr;
}
inline const ::unrealpb::FVector& PlayerController_ServerUpdateCamera_Params::_internal_camloc() const {
  const ::unrealpb::FVector* p = _impl_.camloc_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerController_ServerUpdateCamera_Params::camloc() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
  return _internal_camloc();
}
inline void PlayerController_ServerUpdateCamera_Params::unsafe_arena_set_allocated_camloc(
    ::unrealpb::FVector* camloc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camloc_);
  }
  _impl_.camloc_ = camloc;
  if (camloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::release_camloc() {
  
  ::unrealpb::FVector* temp = _impl_.camloc_;
  _impl_.camloc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::unsafe_arena_release_camloc() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
  
  ::unrealpb::FVector* temp = _impl_.camloc_;
  _impl_.camloc_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::_internal_mutable_camloc() {
  
  if (_impl_.camloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.camloc_ = p;
  }
  return _impl_.camloc_;
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::mutable_camloc() {
  ::unrealpb::FVector* _msg = _internal_mutable_camloc();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
  return _msg;
}
inline void PlayerController_ServerUpdateCamera_Params::set_allocated_camloc(::unrealpb::FVector* camloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camloc_;
  }
  if (camloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camloc);
    if (message_arena != submessage_arena) {
      camloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camloc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camloc_ = camloc;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
}

// int32 camPitchAndYaw = 2;
inline void PlayerController_ServerUpdateCamera_Params::clear_campitchandyaw() {
  _impl_.campitchandyaw_ = 0;
}
inline int32_t PlayerController_ServerUpdateCamera_Params::_internal_campitchandyaw() const {
  return _impl_.campitchandyaw_;
}
inline int32_t PlayerController_ServerUpdateCamera_Params::campitchandyaw() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerUpdateCamera_Params.camPitchAndYaw)
  return _internal_campitchandyaw();
}
inline void PlayerController_ServerUpdateCamera_Params::_internal_set_campitchandyaw(int32_t value) {
  
  _impl_.campitchandyaw_ = value;
}
inline void PlayerController_ServerUpdateCamera_Params::set_campitchandyaw(int32_t value) {
  _internal_set_campitchandyaw(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ServerUpdateCamera_Params.camPitchAndYaw)
}

// -------------------------------------------------------------------

// PlayerController_ClientSetHUD_Params

// optional string hudClassName = 1;
inline bool PlayerController_ClientSetHUD_Params::_internal_has_hudclassname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerController_ClientSetHUD_Params::has_hudclassname() const {
  return _internal_has_hudclassname();
}
inline void PlayerController_ClientSetHUD_Params::clear_hudclassname() {
  _impl_.hudclassname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerController_ClientSetHUD_Params::hudclassname() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
  return _internal_hudclassname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerController_ClientSetHUD_Params::set_hudclassname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.hudclassname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
}
inline std::string* PlayerController_ClientSetHUD_Params::mutable_hudclassname() {
  std::string* _s = _internal_mutable_hudclassname();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
  return _s;
}
inline const std::string& PlayerController_ClientSetHUD_Params::_internal_hudclassname() const {
  return _impl_.hudclassname_.Get();
}
inline void PlayerController_ClientSetHUD_Params::_internal_set_hudclassname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hudclassname_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerController_ClientSetHUD_Params::_internal_mutable_hudclassname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hudclassname_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerController_ClientSetHUD_Params::release_hudclassname() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
  if (!_internal_has_hudclassname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.hudclassname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hudclassname_.IsDefault()) {
    _impl_.hudclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerController_ClientSetHUD_Params::set_allocated_hudclassname(std::string* hudclassname) {
  if (hudclassname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hudclassname_.SetAllocated(hudclassname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hudclassname_.IsDefault()) {
    _impl_.hudclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
}

// -------------------------------------------------------------------

// PlayerController_ClientSetViewTarget_Params

// .unrealpb.UnrealObjectRef actor = 1;
inline bool PlayerController_ClientSetViewTarget_Params::_internal_has_actor() const {
  return this != internal_default_instance() && _impl_.actor_ != nullptr;
}
inline bool PlayerController_ClientSetViewTarget_Params::has_actor() const {
  return _internal_has_actor();
}
inline void PlayerController_ClientSetViewTarget_Params::clear_actor() {
  if (GetArenaForAllocation() == nullptr && _impl_.actor_ != nullptr) {
    delete _impl_.actor_;
  }
  _impl_.actor_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientSetViewTarget_Params::_internal_actor() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientSetViewTarget_Params::actor() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
  return _internal_actor();
}
inline void PlayerController_ClientSetViewTarget_Params::unsafe_arena_set_allocated_actor(
    ::unrealpb::UnrealObjectRef* actor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actor_);
  }
  _impl_.actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientSetViewTarget_Params::release_actor() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.actor_;
  _impl_.actor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientSetViewTarget_Params::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.actor_;
  _impl_.actor_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientSetViewTarget_Params::_internal_mutable_actor() {
  
  if (_impl_.actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.actor_ = p;
  }
  return _impl_.actor_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientSetViewTarget_Params::mutable_actor() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
  return _msg;
}
inline void PlayerController_ClientSetViewTarget_Params::set_allocated_actor(::unrealpb::UnrealObjectRef* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.actor_;
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actor);
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
}

// float blendTime = 2;
inline void PlayerController_ClientSetViewTarget_Params::clear_blendtime() {
  _impl_.blendtime_ = 0;
}
inline float PlayerController_ClientSetViewTarget_Params::_internal_blendtime() const {
  return _impl_.blendtime_;
}
inline float PlayerController_ClientSetViewTarget_Params::blendtime() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.blendTime)
  return _internal_blendtime();
}
inline void PlayerController_ClientSetViewTarget_Params::_internal_set_blendtime(float value) {
  
  _impl_.blendtime_ = value;
}
inline void PlayerController_ClientSetViewTarget_Params::set_blendtime(float value) {
  _internal_set_blendtime(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetViewTarget_Params.blendTime)
}

// uint32 blendFunction = 3;
inline void PlayerController_ClientSetViewTarget_Params::clear_blendfunction() {
  _impl_.blendfunction_ = 0u;
}
inline uint32_t PlayerController_ClientSetViewTarget_Params::_internal_blendfunction() const {
  return _impl_.blendfunction_;
}
inline uint32_t PlayerController_ClientSetViewTarget_Params::blendfunction() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.blendFunction)
  return _internal_blendfunction();
}
inline void PlayerController_ClientSetViewTarget_Params::_internal_set_blendfunction(uint32_t value) {
  
  _impl_.blendfunction_ = value;
}
inline void PlayerController_ClientSetViewTarget_Params::set_blendfunction(uint32_t value) {
  _internal_set_blendfunction(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetViewTarget_Params.blendFunction)
}

// float blendExp = 4;
inline void PlayerController_ClientSetViewTarget_Params::clear_blendexp() {
  _impl_.blendexp_ = 0;
}
inline float PlayerController_ClientSetViewTarget_Params::_internal_blendexp() const {
  return _impl_.blendexp_;
}
inline float PlayerController_ClientSetViewTarget_Params::blendexp() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.blendExp)
  return _internal_blendexp();
}
inline void PlayerController_ClientSetViewTarget_Params::_internal_set_blendexp(float value) {
  
  _impl_.blendexp_ = value;
}
inline void PlayerController_ClientSetViewTarget_Params::set_blendexp(float value) {
  _internal_set_blendexp(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetViewTarget_Params.blendExp)
}

// bool bLockOutgoing = 5;
inline void PlayerController_ClientSetViewTarget_Params::clear_blockoutgoing() {
  _impl_.blockoutgoing_ = false;
}
inline bool PlayerController_ClientSetViewTarget_Params::_internal_blockoutgoing() const {
  return _impl_.blockoutgoing_;
}
inline bool PlayerController_ClientSetViewTarget_Params::blockoutgoing() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.bLockOutgoing)
  return _internal_blockoutgoing();
}
inline void PlayerController_ClientSetViewTarget_Params::_internal_set_blockoutgoing(bool value) {
  
  _impl_.blockoutgoing_ = value;
}
inline void PlayerController_ClientSetViewTarget_Params::set_blockoutgoing(bool value) {
  _internal_set_blockoutgoing(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetViewTarget_Params.bLockOutgoing)
}

// -------------------------------------------------------------------

// PlayerController_ClientEnableNetworkVoice_Params

// optional bool bEnable = 1;
inline bool PlayerController_ClientEnableNetworkVoice_Params::_internal_has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerController_ClientEnableNetworkVoice_Params::has_benable() const {
  return _internal_has_benable();
}
inline void PlayerController_ClientEnableNetworkVoice_Params::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PlayerController_ClientEnableNetworkVoice_Params::_internal_benable() const {
  return _impl_.benable_;
}
inline bool PlayerController_ClientEnableNetworkVoice_Params::benable() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientEnableNetworkVoice_Params.bEnable)
  return _internal_benable();
}
inline void PlayerController_ClientEnableNetworkVoice_Params::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}
inline void PlayerController_ClientEnableNetworkVoice_Params::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientEnableNetworkVoice_Params.bEnable)
}

// -------------------------------------------------------------------

// PlayerController_ClientCapBandwidth_Params

// int32 cap = 1;
inline void PlayerController_ClientCapBandwidth_Params::clear_cap() {
  _impl_.cap_ = 0;
}
inline int32_t PlayerController_ClientCapBandwidth_Params::_internal_cap() const {
  return _impl_.cap_;
}
inline int32_t PlayerController_ClientCapBandwidth_Params::cap() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientCapBandwidth_Params.cap)
  return _internal_cap();
}
inline void PlayerController_ClientCapBandwidth_Params::_internal_set_cap(int32_t value) {
  
  _impl_.cap_ = value;
}
inline void PlayerController_ClientCapBandwidth_Params::set_cap(int32_t value) {
  _internal_set_cap(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientCapBandwidth_Params.cap)
}

// -------------------------------------------------------------------

// PlayerController_ClientRestart_Params

// .unrealpb.UnrealObjectRef pawn = 1;
inline bool PlayerController_ClientRestart_Params::_internal_has_pawn() const {
  return this != internal_default_instance() && _impl_.pawn_ != nullptr;
}
inline bool PlayerController_ClientRestart_Params::has_pawn() const {
  return _internal_has_pawn();
}
inline void PlayerController_ClientRestart_Params::clear_pawn() {
  if (GetArenaForAllocation() == nullptr && _impl_.pawn_ != nullptr) {
    delete _impl_.pawn_;
  }
  _impl_.pawn_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientRestart_Params::_internal_pawn() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.pawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientRestart_Params::pawn() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientRestart_Params.pawn)
  return _internal_pawn();
}
inline void PlayerController_ClientRestart_Params::unsafe_arena_set_allocated_pawn(
    ::unrealpb::UnrealObjectRef* pawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawn_);
  }
  _impl_.pawn_ = pawn;
  if (pawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ClientRestart_Params.pawn)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRestart_Params::release_pawn() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRestart_Params::unsafe_arena_release_pawn() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientRestart_Params.pawn)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRestart_Params::_internal_mutable_pawn() {
  
  if (_impl_.pawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.pawn_ = p;
  }
  return _impl_.pawn_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRestart_Params::mutable_pawn() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_pawn();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientRestart_Params.pawn)
  return _msg;
}
inline void PlayerController_ClientRestart_Params::set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawn_;
  }
  if (pawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawn);
    if (message_arena != submessage_arena) {
      pawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawn, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pawn_ = pawn;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientRestart_Params.pawn)
}

// -------------------------------------------------------------------

// PlayerController_ClientSetCameraMode_Params

// string newCamMode = 1;
inline void PlayerController_ClientSetCameraMode_Params::clear_newcammode() {
  _impl_.newcammode_.ClearToEmpty();
}
inline const std::string& PlayerController_ClientSetCameraMode_Params::newcammode() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
  return _internal_newcammode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerController_ClientSetCameraMode_Params::set_newcammode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.newcammode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
}
inline std::string* PlayerController_ClientSetCameraMode_Params::mutable_newcammode() {
  std::string* _s = _internal_mutable_newcammode();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
  return _s;
}
inline const std::string& PlayerController_ClientSetCameraMode_Params::_internal_newcammode() const {
  return _impl_.newcammode_.Get();
}
inline void PlayerController_ClientSetCameraMode_Params::_internal_set_newcammode(const std::string& value) {
  
  _impl_.newcammode_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerController_ClientSetCameraMode_Params::_internal_mutable_newcammode() {
  
  return _impl_.newcammode_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerController_ClientSetCameraMode_Params::release_newcammode() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
  return _impl_.newcammode_.Release();
}
inline void PlayerController_ClientSetCameraMode_Params::set_allocated_newcammode(std::string* newcammode) {
  if (newcammode != nullptr) {
    
  } else {
    
  }
  _impl_.newcammode_.SetAllocated(newcammode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newcammode_.IsDefault()) {
    _impl_.newcammode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
}

// -------------------------------------------------------------------

// PlayerController_ClientRetryClientRestart_Params

// .unrealpb.UnrealObjectRef pawn = 1;
inline bool PlayerController_ClientRetryClientRestart_Params::_internal_has_pawn() const {
  return this != internal_default_instance() && _impl_.pawn_ != nullptr;
}
inline bool PlayerController_ClientRetryClientRestart_Params::has_pawn() const {
  return _internal_has_pawn();
}
inline void PlayerController_ClientRetryClientRestart_Params::clear_pawn() {
  if (GetArenaForAllocation() == nullptr && _impl_.pawn_ != nullptr) {
    delete _impl_.pawn_;
  }
  _impl_.pawn_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientRetryClientRestart_Params::_internal_pawn() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.pawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientRetryClientRestart_Params::pawn() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
  return _internal_pawn();
}
inline void PlayerController_ClientRetryClientRestart_Params::unsafe_arena_set_allocated_pawn(
    ::unrealpb::UnrealObjectRef* pawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawn_);
  }
  _impl_.pawn_ = pawn;
  if (pawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRetryClientRestart_Params::release_pawn() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRetryClientRestart_Params::unsafe_arena_release_pawn() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRetryClientRestart_Params::_internal_mutable_pawn() {
  
  if (_impl_.pawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.pawn_ = p;
  }
  return _impl_.pawn_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRetryClientRestart_Params::mutable_pawn() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_pawn();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
  return _msg;
}
inline void PlayerController_ClientRetryClientRestart_Params::set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawn_;
  }
  if (pawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawn);
    if (message_arena != submessage_arena) {
      pawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawn, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pawn_ = pawn;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
}

// -------------------------------------------------------------------

// PlayerController_ServerSetSpectatorLocation_Params

// .unrealpb.FVector newLoc = 1;
inline bool PlayerController_ServerSetSpectatorLocation_Params::_internal_has_newloc() const {
  return this != internal_default_instance() && _impl_.newloc_ != nullptr;
}
inline bool PlayerController_ServerSetSpectatorLocation_Params::has_newloc() const {
  return _internal_has_newloc();
}
inline void PlayerController_ServerSetSpectatorLocation_Params::clear_newloc() {
  if (GetArenaForAllocation() == nullptr && _impl_.newloc_ != nullptr) {
    delete _impl_.newloc_;
  }
  _impl_.newloc_ = nullptr;
}
inline const ::unrealpb::FVector& PlayerController_ServerSetSpectatorLocation_Params::_internal_newloc() const {
  const ::unrealpb::FVector* p = _impl_.newloc_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerController_ServerSetSpectatorLocation_Params::newloc() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
  return _internal_newloc();
}
inline void PlayerController_ServerSetSpectatorLocation_Params::unsafe_arena_set_allocated_newloc(
    ::unrealpb::FVector* newloc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newloc_);
  }
  _impl_.newloc_ = newloc;
  if (newloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::release_newloc() {
  
  ::unrealpb::FVector* temp = _impl_.newloc_;
  _impl_.newloc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::unsafe_arena_release_newloc() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
  
  ::unrealpb::FVector* temp = _impl_.newloc_;
  _impl_.newloc_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::_internal_mutable_newloc() {
  
  if (_impl_.newloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newloc_ = p;
  }
  return _impl_.newloc_;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::mutable_newloc() {
  ::unrealpb::FVector* _msg = _internal_mutable_newloc();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
  return _msg;
}
inline void PlayerController_ServerSetSpectatorLocation_Params::set_allocated_newloc(::unrealpb::FVector* newloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newloc_;
  }
  if (newloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newloc);
    if (message_arena != submessage_arena) {
      newloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newloc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newloc_ = newloc;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
}

// .unrealpb.FVector newRot = 2;
inline bool PlayerController_ServerSetSpectatorLocation_Params::_internal_has_newrot() const {
  return this != internal_default_instance() && _impl_.newrot_ != nullptr;
}
inline bool PlayerController_ServerSetSpectatorLocation_Params::has_newrot() const {
  return _internal_has_newrot();
}
inline void PlayerController_ServerSetSpectatorLocation_Params::clear_newrot() {
  if (GetArenaForAllocation() == nullptr && _impl_.newrot_ != nullptr) {
    delete _impl_.newrot_;
  }
  _impl_.newrot_ = nullptr;
}
inline const ::unrealpb::FVector& PlayerController_ServerSetSpectatorLocation_Params::_internal_newrot() const {
  const ::unrealpb::FVector* p = _impl_.newrot_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerController_ServerSetSpectatorLocation_Params::newrot() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
  return _internal_newrot();
}
inline void PlayerController_ServerSetSpectatorLocation_Params::unsafe_arena_set_allocated_newrot(
    ::unrealpb::FVector* newrot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrot_);
  }
  _impl_.newrot_ = newrot;
  if (newrot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::release_newrot() {
  
  ::unrealpb::FVector* temp = _impl_.newrot_;
  _impl_.newrot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::unsafe_arena_release_newrot() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
  
  ::unrealpb::FVector* temp = _impl_.newrot_;
  _impl_.newrot_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::_internal_mutable_newrot() {
  
  if (_impl_.newrot_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newrot_ = p;
  }
  return _impl_.newrot_;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::mutable_newrot() {
  ::unrealpb::FVector* _msg = _internal_mutable_newrot();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
  return _msg;
}
inline void PlayerController_ServerSetSpectatorLocation_Params::set_allocated_newrot(::unrealpb::FVector* newrot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newrot_;
  }
  if (newrot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newrot);
    if (message_arena != submessage_arena) {
      newrot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newrot_ = newrot;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
}

// -------------------------------------------------------------------

// PlayerController_ServerAcknowledgePossession_Params

// .unrealpb.UnrealObjectRef pawn = 1;
inline bool PlayerController_ServerAcknowledgePossession_Params::_internal_has_pawn() const {
  return this != internal_default_instance() && _impl_.pawn_ != nullptr;
}
inline bool PlayerController_ServerAcknowledgePossession_Params::has_pawn() const {
  return _internal_has_pawn();
}
inline void PlayerController_ServerAcknowledgePossession_Params::clear_pawn() {
  if (GetArenaForAllocation() == nullptr && _impl_.pawn_ != nullptr) {
    delete _impl_.pawn_;
  }
  _impl_.pawn_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ServerAcknowledgePossession_Params::_internal_pawn() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.pawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ServerAcknowledgePossession_Params::pawn() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
  return _internal_pawn();
}
inline void PlayerController_ServerAcknowledgePossession_Params::unsafe_arena_set_allocated_pawn(
    ::unrealpb::UnrealObjectRef* pawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawn_);
  }
  _impl_.pawn_ = pawn;
  if (pawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ServerAcknowledgePossession_Params::release_pawn() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ServerAcknowledgePossession_Params::unsafe_arena_release_pawn() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ServerAcknowledgePossession_Params::_internal_mutable_pawn() {
  
  if (_impl_.pawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.pawn_ = p;
  }
  return _impl_.pawn_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ServerAcknowledgePossession_Params::mutable_pawn() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_pawn();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
  return _msg;
}
inline void PlayerController_ServerAcknowledgePossession_Params::set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawn_;
  }
  if (pawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawn);
    if (message_arena != submessage_arena) {
      pawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawn, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pawn_ = pawn;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
}

// -------------------------------------------------------------------

// PlayerController_ClientGotoState_Params

// string newState = 1;
inline void PlayerController_ClientGotoState_Params::clear_newstate() {
  _impl_.newstate_.ClearToEmpty();
}
inline const std::string& PlayerController_ClientGotoState_Params::newstate() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientGotoState_Params.newState)
  return _internal_newstate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerController_ClientGotoState_Params::set_newstate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.newstate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientGotoState_Params.newState)
}
inline std::string* PlayerController_ClientGotoState_Params::mutable_newstate() {
  std::string* _s = _internal_mutable_newstate();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientGotoState_Params.newState)
  return _s;
}
inline const std::string& PlayerController_ClientGotoState_Params::_internal_newstate() const {
  return _impl_.newstate_.Get();
}
inline void PlayerController_ClientGotoState_Params::_internal_set_newstate(const std::string& value) {
  
  _impl_.newstate_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerController_ClientGotoState_Params::_internal_mutable_newstate() {
  
  return _impl_.newstate_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerController_ClientGotoState_Params::release_newstate() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientGotoState_Params.newState)
  return _impl_.newstate_.Release();
}
inline void PlayerController_ClientGotoState_Params::set_allocated_newstate(std::string* newstate) {
  if (newstate != nullptr) {
    
  } else {
    
  }
  _impl_.newstate_.SetAllocated(newstate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newstate_.IsDefault()) {
    _impl_.newstate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientGotoState_Params.newState)
}

// -------------------------------------------------------------------

// PlayerController_ClientReceiveLocalizedMessage_Params

// string message = 1;
inline void PlayerController_ClientReceiveLocalizedMessage_Params::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PlayerController_ClientReceiveLocalizedMessage_Params::message() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerController_ClientReceiveLocalizedMessage_Params::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.message)
}
inline std::string* PlayerController_ClientReceiveLocalizedMessage_Params::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.message)
  return _s;
}
inline const std::string& PlayerController_ClientReceiveLocalizedMessage_Params::_internal_message() const {
  return _impl_.message_.Get();
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerController_ClientReceiveLocalizedMessage_Params::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerController_ClientReceiveLocalizedMessage_Params::release_message() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.message)
  return _impl_.message_.Release();
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.message)
}

// int32 switch = 2;
inline void PlayerController_ClientReceiveLocalizedMessage_Params::clear_switch_() {
  _impl_.switch__ = 0;
}
inline int32_t PlayerController_ClientReceiveLocalizedMessage_Params::_internal_switch_() const {
  return _impl_.switch__;
}
inline int32_t PlayerController_ClientReceiveLocalizedMessage_Params::switch_() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.switch)
  return _internal_switch_();
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::_internal_set_switch_(int32_t value) {
  
  _impl_.switch__ = value;
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::set_switch_(int32_t value) {
  _internal_set_switch_(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.switch)
}

// .unrealpb.UnrealObjectRef relatedPlayerState_1 = 3;
inline bool PlayerController_ClientReceiveLocalizedMessage_Params::_internal_has_relatedplayerstate_1() const {
  return this != internal_default_instance() && _impl_.relatedplayerstate_1_ != nullptr;
}
inline bool PlayerController_ClientReceiveLocalizedMessage_Params::has_relatedplayerstate_1() const {
  return _internal_has_relatedplayerstate_1();
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::clear_relatedplayerstate_1() {
  if (GetArenaForAllocation() == nullptr && _impl_.relatedplayerstate_1_ != nullptr) {
    delete _impl_.relatedplayerstate_1_;
  }
  _impl_.relatedplayerstate_1_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientReceiveLocalizedMessage_Params::_internal_relatedplayerstate_1() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.relatedplayerstate_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientReceiveLocalizedMessage_Params::relatedplayerstate_1() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_1)
  return _internal_relatedplayerstate_1();
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::unsafe_arena_set_allocated_relatedplayerstate_1(
    ::unrealpb::UnrealObjectRef* relatedplayerstate_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relatedplayerstate_1_);
  }
  _impl_.relatedplayerstate_1_ = relatedplayerstate_1;
  if (relatedplayerstate_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_1)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::release_relatedplayerstate_1() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.relatedplayerstate_1_;
  _impl_.relatedplayerstate_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::unsafe_arena_release_relatedplayerstate_1() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_1)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.relatedplayerstate_1_;
  _impl_.relatedplayerstate_1_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::_internal_mutable_relatedplayerstate_1() {
  
  if (_impl_.relatedplayerstate_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.relatedplayerstate_1_ = p;
  }
  return _impl_.relatedplayerstate_1_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::mutable_relatedplayerstate_1() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_relatedplayerstate_1();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_1)
  return _msg;
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::set_allocated_relatedplayerstate_1(::unrealpb::UnrealObjectRef* relatedplayerstate_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relatedplayerstate_1_;
  }
  if (relatedplayerstate_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relatedplayerstate_1);
    if (message_arena != submessage_arena) {
      relatedplayerstate_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relatedplayerstate_1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relatedplayerstate_1_ = relatedplayerstate_1;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_1)
}

// .unrealpb.UnrealObjectRef relatedPlayerState_2 = 4;
inline bool PlayerController_ClientReceiveLocalizedMessage_Params::_internal_has_relatedplayerstate_2() const {
  return this != internal_default_instance() && _impl_.relatedplayerstate_2_ != nullptr;
}
inline bool PlayerController_ClientReceiveLocalizedMessage_Params::has_relatedplayerstate_2() const {
  return _internal_has_relatedplayerstate_2();
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::clear_relatedplayerstate_2() {
  if (GetArenaForAllocation() == nullptr && _impl_.relatedplayerstate_2_ != nullptr) {
    delete _impl_.relatedplayerstate_2_;
  }
  _impl_.relatedplayerstate_2_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientReceiveLocalizedMessage_Params::_internal_relatedplayerstate_2() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.relatedplayerstate_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientReceiveLocalizedMessage_Params::relatedplayerstate_2() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_2)
  return _internal_relatedplayerstate_2();
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::unsafe_arena_set_allocated_relatedplayerstate_2(
    ::unrealpb::UnrealObjectRef* relatedplayerstate_2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relatedplayerstate_2_);
  }
  _impl_.relatedplayerstate_2_ = relatedplayerstate_2;
  if (relatedplayerstate_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_2)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::release_relatedplayerstate_2() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.relatedplayerstate_2_;
  _impl_.relatedplayerstate_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::unsafe_arena_release_relatedplayerstate_2() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_2)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.relatedplayerstate_2_;
  _impl_.relatedplayerstate_2_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::_internal_mutable_relatedplayerstate_2() {
  
  if (_impl_.relatedplayerstate_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.relatedplayerstate_2_ = p;
  }
  return _impl_.relatedplayerstate_2_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::mutable_relatedplayerstate_2() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_relatedplayerstate_2();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_2)
  return _msg;
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::set_allocated_relatedplayerstate_2(::unrealpb::UnrealObjectRef* relatedplayerstate_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relatedplayerstate_2_;
  }
  if (relatedplayerstate_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relatedplayerstate_2);
    if (message_arena != submessage_arena) {
      relatedplayerstate_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relatedplayerstate_2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relatedplayerstate_2_ = relatedplayerstate_2;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_2)
}

// .unrealpb.UnrealObjectRef optionalObject = 5;
inline bool PlayerController_ClientReceiveLocalizedMessage_Params::_internal_has_optionalobject() const {
  return this != internal_default_instance() && _impl_.optionalobject_ != nullptr;
}
inline bool PlayerController_ClientReceiveLocalizedMessage_Params::has_optionalobject() const {
  return _internal_has_optionalobject();
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::clear_optionalobject() {
  if (GetArenaForAllocation() == nullptr && _impl_.optionalobject_ != nullptr) {
    delete _impl_.optionalobject_;
  }
  _impl_.optionalobject_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientReceiveLocalizedMessage_Params::_internal_optionalobject() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.optionalobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientReceiveLocalizedMessage_Params::optionalobject() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.optionalObject)
  return _internal_optionalobject();
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::unsafe_arena_set_allocated_optionalobject(
    ::unrealpb::UnrealObjectRef* optionalobject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalobject_);
  }
  _impl_.optionalobject_ = optionalobject;
  if (optionalobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.optionalObject)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::release_optionalobject() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.optionalobject_;
  _impl_.optionalobject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::unsafe_arena_release_optionalobject() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.optionalObject)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.optionalobject_;
  _impl_.optionalobject_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::_internal_mutable_optionalobject() {
  
  if (_impl_.optionalobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.optionalobject_ = p;
  }
  return _impl_.optionalobject_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientReceiveLocalizedMessage_Params::mutable_optionalobject() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_optionalobject();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.optionalObject)
  return _msg;
}
inline void PlayerController_ClientReceiveLocalizedMessage_Params::set_allocated_optionalobject(::unrealpb::UnrealObjectRef* optionalobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.optionalobject_;
  }
  if (optionalobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optionalobject);
    if (message_arena != submessage_arena) {
      optionalobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalobject, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionalobject_ = optionalobject;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.optionalObject)
}

// -------------------------------------------------------------------

// GameStateBase

// optional string spectatorClassName = 2;
inline bool GameStateBase::_internal_has_spectatorclassname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameStateBase::has_spectatorclassname() const {
  return _internal_has_spectatorclassname();
}
inline void GameStateBase::clear_spectatorclassname() {
  _impl_.spectatorclassname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameStateBase::spectatorclassname() const {
  // @@protoc_insertion_point(field_get:unrealpb.GameStateBase.spectatorClassName)
  return _internal_spectatorclassname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameStateBase::set_spectatorclassname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.spectatorclassname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.GameStateBase.spectatorClassName)
}
inline std::string* GameStateBase::mutable_spectatorclassname() {
  std::string* _s = _internal_mutable_spectatorclassname();
  // @@protoc_insertion_point(field_mutable:unrealpb.GameStateBase.spectatorClassName)
  return _s;
}
inline const std::string& GameStateBase::_internal_spectatorclassname() const {
  return _impl_.spectatorclassname_.Get();
}
inline void GameStateBase::_internal_set_spectatorclassname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.spectatorclassname_.Set(value, GetArenaForAllocation());
}
inline std::string* GameStateBase::_internal_mutable_spectatorclassname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.spectatorclassname_.Mutable(GetArenaForAllocation());
}
inline std::string* GameStateBase::release_spectatorclassname() {
  // @@protoc_insertion_point(field_release:unrealpb.GameStateBase.spectatorClassName)
  if (!_internal_has_spectatorclassname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.spectatorclassname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spectatorclassname_.IsDefault()) {
    _impl_.spectatorclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GameStateBase::set_allocated_spectatorclassname(std::string* spectatorclassname) {
  if (spectatorclassname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.spectatorclassname_.SetAllocated(spectatorclassname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spectatorclassname_.IsDefault()) {
    _impl_.spectatorclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.GameStateBase.spectatorClassName)
}

// optional string gameModeClassName = 3;
inline bool GameStateBase::_internal_has_gamemodeclassname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameStateBase::has_gamemodeclassname() const {
  return _internal_has_gamemodeclassname();
}
inline void GameStateBase::clear_gamemodeclassname() {
  _impl_.gamemodeclassname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GameStateBase::gamemodeclassname() const {
  // @@protoc_insertion_point(field_get:unrealpb.GameStateBase.gameModeClassName)
  return _internal_gamemodeclassname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameStateBase::set_gamemodeclassname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.gamemodeclassname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.GameStateBase.gameModeClassName)
}
inline std::string* GameStateBase::mutable_gamemodeclassname() {
  std::string* _s = _internal_mutable_gamemodeclassname();
  // @@protoc_insertion_point(field_mutable:unrealpb.GameStateBase.gameModeClassName)
  return _s;
}
inline const std::string& GameStateBase::_internal_gamemodeclassname() const {
  return _impl_.gamemodeclassname_.Get();
}
inline void GameStateBase::_internal_set_gamemodeclassname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gamemodeclassname_.Set(value, GetArenaForAllocation());
}
inline std::string* GameStateBase::_internal_mutable_gamemodeclassname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.gamemodeclassname_.Mutable(GetArenaForAllocation());
}
inline std::string* GameStateBase::release_gamemodeclassname() {
  // @@protoc_insertion_point(field_release:unrealpb.GameStateBase.gameModeClassName)
  if (!_internal_has_gamemodeclassname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.gamemodeclassname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamemodeclassname_.IsDefault()) {
    _impl_.gamemodeclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GameStateBase::set_allocated_gamemodeclassname(std::string* gamemodeclassname) {
  if (gamemodeclassname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gamemodeclassname_.SetAllocated(gamemodeclassname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamemodeclassname_.IsDefault()) {
    _impl_.gamemodeclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.GameStateBase.gameModeClassName)
}

// optional float replicatedWorldTimeSeconds = 4;
inline bool GameStateBase::_internal_has_replicatedworldtimeseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameStateBase::has_replicatedworldtimeseconds() const {
  return _internal_has_replicatedworldtimeseconds();
}
inline void GameStateBase::clear_replicatedworldtimeseconds() {
  _impl_.replicatedworldtimeseconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float GameStateBase::_internal_replicatedworldtimeseconds() const {
  return _impl_.replicatedworldtimeseconds_;
}
inline float GameStateBase::replicatedworldtimeseconds() const {
  // @@protoc_insertion_point(field_get:unrealpb.GameStateBase.replicatedWorldTimeSeconds)
  return _internal_replicatedworldtimeseconds();
}
inline void GameStateBase::_internal_set_replicatedworldtimeseconds(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.replicatedworldtimeseconds_ = value;
}
inline void GameStateBase::set_replicatedworldtimeseconds(float value) {
  _internal_set_replicatedworldtimeseconds(value);
  // @@protoc_insertion_point(field_set:unrealpb.GameStateBase.replicatedWorldTimeSeconds)
}

// optional bool bReplicatedHasBegunPlay = 5;
inline bool GameStateBase::_internal_has_breplicatedhasbegunplay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameStateBase::has_breplicatedhasbegunplay() const {
  return _internal_has_breplicatedhasbegunplay();
}
inline void GameStateBase::clear_breplicatedhasbegunplay() {
  _impl_.breplicatedhasbegunplay_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool GameStateBase::_internal_breplicatedhasbegunplay() const {
  return _impl_.breplicatedhasbegunplay_;
}
inline bool GameStateBase::breplicatedhasbegunplay() const {
  // @@protoc_insertion_point(field_get:unrealpb.GameStateBase.bReplicatedHasBegunPlay)
  return _internal_breplicatedhasbegunplay();
}
inline void GameStateBase::_internal_set_breplicatedhasbegunplay(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.breplicatedhasbegunplay_ = value;
}
inline void GameStateBase::set_breplicatedhasbegunplay(bool value) {
  _internal_set_breplicatedhasbegunplay(value);
  // @@protoc_insertion_point(field_set:unrealpb.GameStateBase.bReplicatedHasBegunPlay)
}

// -------------------------------------------------------------------

// PawnState

// .unrealpb.UnrealObjectRef playerState = 1;
inline bool PawnState::_internal_has_playerstate() const {
  return this != internal_default_instance() && _impl_.playerstate_ != nullptr;
}
inline bool PawnState::has_playerstate() const {
  return _internal_has_playerstate();
}
inline void PawnState::clear_playerstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerstate_ != nullptr) {
    delete _impl_.playerstate_;
  }
  _impl_.playerstate_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PawnState::_internal_playerstate() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.playerstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PawnState::playerstate() const {
  // @@protoc_insertion_point(field_get:unrealpb.PawnState.playerState)
  return _internal_playerstate();
}
inline void PawnState::unsafe_arena_set_allocated_playerstate(
    ::unrealpb::UnrealObjectRef* playerstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerstate_);
  }
  _impl_.playerstate_ = playerstate;
  if (playerstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PawnState.playerState)
}
inline ::unrealpb::UnrealObjectRef* PawnState::release_playerstate() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.playerstate_;
  _impl_.playerstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PawnState::unsafe_arena_release_playerstate() {
  // @@protoc_insertion_point(field_release:unrealpb.PawnState.playerState)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.playerstate_;
  _impl_.playerstate_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PawnState::_internal_mutable_playerstate() {
  
  if (_impl_.playerstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.playerstate_ = p;
  }
  return _impl_.playerstate_;
}
inline ::unrealpb::UnrealObjectRef* PawnState::mutable_playerstate() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_playerstate();
  // @@protoc_insertion_point(field_mutable:unrealpb.PawnState.playerState)
  return _msg;
}
inline void PawnState::set_allocated_playerstate(::unrealpb::UnrealObjectRef* playerstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerstate_;
  }
  if (playerstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerstate);
    if (message_arena != submessage_arena) {
      playerstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerstate_ = playerstate;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PawnState.playerState)
}

// .unrealpb.UnrealObjectRef controller = 2;
inline bool PawnState::_internal_has_controller() const {
  return this != internal_default_instance() && _impl_.controller_ != nullptr;
}
inline bool PawnState::has_controller() const {
  return _internal_has_controller();
}
inline void PawnState::clear_controller() {
  if (GetArenaForAllocation() == nullptr && _impl_.controller_ != nullptr) {
    delete _impl_.controller_;
  }
  _impl_.controller_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PawnState::_internal_controller() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PawnState::controller() const {
  // @@protoc_insertion_point(field_get:unrealpb.PawnState.controller)
  return _internal_controller();
}
inline void PawnState::unsafe_arena_set_allocated_controller(
    ::unrealpb::UnrealObjectRef* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controller_);
  }
  _impl_.controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PawnState.controller)
}
inline ::unrealpb::UnrealObjectRef* PawnState::release_controller() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.controller_;
  _impl_.controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PawnState::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:unrealpb.PawnState.controller)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.controller_;
  _impl_.controller_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PawnState::_internal_mutable_controller() {
  
  if (_impl_.controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.controller_ = p;
  }
  return _impl_.controller_;
}
inline ::unrealpb::UnrealObjectRef* PawnState::mutable_controller() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:unrealpb.PawnState.controller)
  return _msg;
}
inline void PawnState::set_allocated_controller(::unrealpb::UnrealObjectRef* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PawnState.controller)
}

// optional uint32 remoteViewPitch = 3;
inline bool PawnState::_internal_has_remoteviewpitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PawnState::has_remoteviewpitch() const {
  return _internal_has_remoteviewpitch();
}
inline void PawnState::clear_remoteviewpitch() {
  _impl_.remoteviewpitch_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PawnState::_internal_remoteviewpitch() const {
  return _impl_.remoteviewpitch_;
}
inline uint32_t PawnState::remoteviewpitch() const {
  // @@protoc_insertion_point(field_get:unrealpb.PawnState.remoteViewPitch)
  return _internal_remoteviewpitch();
}
inline void PawnState::_internal_set_remoteviewpitch(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.remoteviewpitch_ = value;
}
inline void PawnState::set_remoteviewpitch(uint32_t value) {
  _internal_set_remoteviewpitch(value);
  // @@protoc_insertion_point(field_set:unrealpb.PawnState.remoteViewPitch)
}

// -------------------------------------------------------------------

// FClientAdjustment

// optional bool bAckGoodMove = 1;
inline bool FClientAdjustment::_internal_has_backgoodmove() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FClientAdjustment::has_backgoodmove() const {
  return _internal_has_backgoodmove();
}
inline void FClientAdjustment::clear_backgoodmove() {
  _impl_.backgoodmove_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FClientAdjustment::_internal_backgoodmove() const {
  return _impl_.backgoodmove_;
}
inline bool FClientAdjustment::backgoodmove() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.bAckGoodMove)
  return _internal_backgoodmove();
}
inline void FClientAdjustment::_internal_set_backgoodmove(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.backgoodmove_ = value;
}
inline void FClientAdjustment::set_backgoodmove(bool value) {
  _internal_set_backgoodmove(value);
  // @@protoc_insertion_point(field_set:unrealpb.FClientAdjustment.bAckGoodMove)
}

// optional float timeStamp = 2;
inline bool FClientAdjustment::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FClientAdjustment::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void FClientAdjustment::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float FClientAdjustment::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline float FClientAdjustment::timestamp() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.timeStamp)
  return _internal_timestamp();
}
inline void FClientAdjustment::_internal_set_timestamp(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.timestamp_ = value;
}
inline void FClientAdjustment::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:unrealpb.FClientAdjustment.timeStamp)
}

// optional .unrealpb.FVector newLoc = 3;
inline bool FClientAdjustment::_internal_has_newloc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newloc_ != nullptr);
  return value;
}
inline bool FClientAdjustment::has_newloc() const {
  return _internal_has_newloc();
}
inline void FClientAdjustment::clear_newloc() {
  if (_impl_.newloc_ != nullptr) _impl_.newloc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::FVector& FClientAdjustment::_internal_newloc() const {
  const ::unrealpb::FVector* p = _impl_.newloc_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FClientAdjustment::newloc() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.newLoc)
  return _internal_newloc();
}
inline void FClientAdjustment::unsafe_arena_set_allocated_newloc(
    ::unrealpb::FVector* newloc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newloc_);
  }
  _impl_.newloc_ = newloc;
  if (newloc) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FClientAdjustment.newLoc)
}
inline ::unrealpb::FVector* FClientAdjustment::release_newloc() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FVector* temp = _impl_.newloc_;
  _impl_.newloc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FClientAdjustment::unsafe_arena_release_newloc() {
  // @@protoc_insertion_point(field_release:unrealpb.FClientAdjustment.newLoc)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FVector* temp = _impl_.newloc_;
  _impl_.newloc_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FClientAdjustment::_internal_mutable_newloc() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.newloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newloc_ = p;
  }
  return _impl_.newloc_;
}
inline ::unrealpb::FVector* FClientAdjustment::mutable_newloc() {
  ::unrealpb::FVector* _msg = _internal_mutable_newloc();
  // @@protoc_insertion_point(field_mutable:unrealpb.FClientAdjustment.newLoc)
  return _msg;
}
inline void FClientAdjustment::set_allocated_newloc(::unrealpb::FVector* newloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newloc_;
  }
  if (newloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newloc);
    if (message_arena != submessage_arena) {
      newloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newloc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.newloc_ = newloc;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FClientAdjustment.newLoc)
}

// optional .unrealpb.FVector newVel = 4;
inline bool FClientAdjustment::_internal_has_newvel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newvel_ != nullptr);
  return value;
}
inline bool FClientAdjustment::has_newvel() const {
  return _internal_has_newvel();
}
inline void FClientAdjustment::clear_newvel() {
  if (_impl_.newvel_ != nullptr) _impl_.newvel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::unrealpb::FVector& FClientAdjustment::_internal_newvel() const {
  const ::unrealpb::FVector* p = _impl_.newvel_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FClientAdjustment::newvel() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.newVel)
  return _internal_newvel();
}
inline void FClientAdjustment::unsafe_arena_set_allocated_newvel(
    ::unrealpb::FVector* newvel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newvel_);
  }
  _impl_.newvel_ = newvel;
  if (newvel) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FClientAdjustment.newVel)
}
inline ::unrealpb::FVector* FClientAdjustment::release_newvel() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.newvel_;
  _impl_.newvel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FClientAdjustment::unsafe_arena_release_newvel() {
  // @@protoc_insertion_point(field_release:unrealpb.FClientAdjustment.newVel)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.newvel_;
  _impl_.newvel_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FClientAdjustment::_internal_mutable_newvel() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.newvel_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newvel_ = p;
  }
  return _impl_.newvel_;
}
inline ::unrealpb::FVector* FClientAdjustment::mutable_newvel() {
  ::unrealpb::FVector* _msg = _internal_mutable_newvel();
  // @@protoc_insertion_point(field_mutable:unrealpb.FClientAdjustment.newVel)
  return _msg;
}
inline void FClientAdjustment::set_allocated_newvel(::unrealpb::FVector* newvel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newvel_;
  }
  if (newvel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newvel);
    if (message_arena != submessage_arena) {
      newvel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newvel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.newvel_ = newvel;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FClientAdjustment.newVel)
}

// optional .unrealpb.FVector newRot = 5;
inline bool FClientAdjustment::_internal_has_newrot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newrot_ != nullptr);
  return value;
}
inline bool FClientAdjustment::has_newrot() const {
  return _internal_has_newrot();
}
inline void FClientAdjustment::clear_newrot() {
  if (_impl_.newrot_ != nullptr) _impl_.newrot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::unrealpb::FVector& FClientAdjustment::_internal_newrot() const {
  const ::unrealpb::FVector* p = _impl_.newrot_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FClientAdjustment::newrot() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.newRot)
  return _internal_newrot();
}
inline void FClientAdjustment::unsafe_arena_set_allocated_newrot(
    ::unrealpb::FVector* newrot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrot_);
  }
  _impl_.newrot_ = newrot;
  if (newrot) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FClientAdjustment.newRot)
}
inline ::unrealpb::FVector* FClientAdjustment::release_newrot() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.newrot_;
  _impl_.newrot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FClientAdjustment::unsafe_arena_release_newrot() {
  // @@protoc_insertion_point(field_release:unrealpb.FClientAdjustment.newRot)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.newrot_;
  _impl_.newrot_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FClientAdjustment::_internal_mutable_newrot() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.newrot_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newrot_ = p;
  }
  return _impl_.newrot_;
}
inline ::unrealpb::FVector* FClientAdjustment::mutable_newrot() {
  ::unrealpb::FVector* _msg = _internal_mutable_newrot();
  // @@protoc_insertion_point(field_mutable:unrealpb.FClientAdjustment.newRot)
  return _msg;
}
inline void FClientAdjustment::set_allocated_newrot(::unrealpb::FVector* newrot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newrot_;
  }
  if (newrot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newrot);
    if (message_arena != submessage_arena) {
      newrot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrot, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.newrot_ = newrot;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FClientAdjustment.newRot)
}

// optional .unrealpb.UnrealObjectRef newBase = 6;
inline bool FClientAdjustment::_internal_has_newbase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newbase_ != nullptr);
  return value;
}
inline bool FClientAdjustment::has_newbase() const {
  return _internal_has_newbase();
}
inline void FClientAdjustment::clear_newbase() {
  if (_impl_.newbase_ != nullptr) _impl_.newbase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::unrealpb::UnrealObjectRef& FClientAdjustment::_internal_newbase() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.newbase_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& FClientAdjustment::newbase() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.newBase)
  return _internal_newbase();
}
inline void FClientAdjustment::unsafe_arena_set_allocated_newbase(
    ::unrealpb::UnrealObjectRef* newbase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newbase_);
  }
  _impl_.newbase_ = newbase;
  if (newbase) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FClientAdjustment.newBase)
}
inline ::unrealpb::UnrealObjectRef* FClientAdjustment::release_newbase() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.newbase_;
  _impl_.newbase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* FClientAdjustment::unsafe_arena_release_newbase() {
  // @@protoc_insertion_point(field_release:unrealpb.FClientAdjustment.newBase)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.newbase_;
  _impl_.newbase_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* FClientAdjustment::_internal_mutable_newbase() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.newbase_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.newbase_ = p;
  }
  return _impl_.newbase_;
}
inline ::unrealpb::UnrealObjectRef* FClientAdjustment::mutable_newbase() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_newbase();
  // @@protoc_insertion_point(field_mutable:unrealpb.FClientAdjustment.newBase)
  return _msg;
}
inline void FClientAdjustment::set_allocated_newbase(::unrealpb::UnrealObjectRef* newbase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newbase_;
  }
  if (newbase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newbase);
    if (message_arena != submessage_arena) {
      newbase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newbase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.newbase_ = newbase;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FClientAdjustment.newBase)
}

// optional string newBaseBoneName = 7;
inline bool FClientAdjustment::_internal_has_newbasebonename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FClientAdjustment::has_newbasebonename() const {
  return _internal_has_newbasebonename();
}
inline void FClientAdjustment::clear_newbasebonename() {
  _impl_.newbasebonename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FClientAdjustment::newbasebonename() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.newBaseBoneName)
  return _internal_newbasebonename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FClientAdjustment::set_newbasebonename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.newbasebonename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.FClientAdjustment.newBaseBoneName)
}
inline std::string* FClientAdjustment::mutable_newbasebonename() {
  std::string* _s = _internal_mutable_newbasebonename();
  // @@protoc_insertion_point(field_mutable:unrealpb.FClientAdjustment.newBaseBoneName)
  return _s;
}
inline const std::string& FClientAdjustment::_internal_newbasebonename() const {
  return _impl_.newbasebonename_.Get();
}
inline void FClientAdjustment::_internal_set_newbasebonename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.newbasebonename_.Set(value, GetArenaForAllocation());
}
inline std::string* FClientAdjustment::_internal_mutable_newbasebonename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.newbasebonename_.Mutable(GetArenaForAllocation());
}
inline std::string* FClientAdjustment::release_newbasebonename() {
  // @@protoc_insertion_point(field_release:unrealpb.FClientAdjustment.newBaseBoneName)
  if (!_internal_has_newbasebonename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.newbasebonename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newbasebonename_.IsDefault()) {
    _impl_.newbasebonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FClientAdjustment::set_allocated_newbasebonename(std::string* newbasebonename) {
  if (newbasebonename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.newbasebonename_.SetAllocated(newbasebonename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newbasebonename_.IsDefault()) {
    _impl_.newbasebonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FClientAdjustment.newBaseBoneName)
}

// optional bool bBaseRelativePosition = 8;
inline bool FClientAdjustment::_internal_has_bbaserelativeposition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FClientAdjustment::has_bbaserelativeposition() const {
  return _internal_has_bbaserelativeposition();
}
inline void FClientAdjustment::clear_bbaserelativeposition() {
  _impl_.bbaserelativeposition_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool FClientAdjustment::_internal_bbaserelativeposition() const {
  return _impl_.bbaserelativeposition_;
}
inline bool FClientAdjustment::bbaserelativeposition() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.bBaseRelativePosition)
  return _internal_bbaserelativeposition();
}
inline void FClientAdjustment::_internal_set_bbaserelativeposition(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bbaserelativeposition_ = value;
}
inline void FClientAdjustment::set_bbaserelativeposition(bool value) {
  _internal_set_bbaserelativeposition(value);
  // @@protoc_insertion_point(field_set:unrealpb.FClientAdjustment.bBaseRelativePosition)
}

// optional .unrealpb.FRootMotionSourceGroup rootMotionSourceCorrection = 9;
inline bool FClientAdjustment::_internal_has_rootmotionsourcecorrection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rootmotionsourcecorrection_ != nullptr);
  return value;
}
inline bool FClientAdjustment::has_rootmotionsourcecorrection() const {
  return _internal_has_rootmotionsourcecorrection();
}
inline void FClientAdjustment::clear_rootmotionsourcecorrection() {
  if (_impl_.rootmotionsourcecorrection_ != nullptr) _impl_.rootmotionsourcecorrection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::unrealpb::FRootMotionSourceGroup& FClientAdjustment::_internal_rootmotionsourcecorrection() const {
  const ::unrealpb::FRootMotionSourceGroup* p = _impl_.rootmotionsourcecorrection_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FRootMotionSourceGroup&>(
      ::unrealpb::_FRootMotionSourceGroup_default_instance_);
}
inline const ::unrealpb::FRootMotionSourceGroup& FClientAdjustment::rootmotionsourcecorrection() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.rootMotionSourceCorrection)
  return _internal_rootmotionsourcecorrection();
}
inline void FClientAdjustment::unsafe_arena_set_allocated_rootmotionsourcecorrection(
    ::unrealpb::FRootMotionSourceGroup* rootmotionsourcecorrection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootmotionsourcecorrection_);
  }
  _impl_.rootmotionsourcecorrection_ = rootmotionsourcecorrection;
  if (rootmotionsourcecorrection) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FClientAdjustment.rootMotionSourceCorrection)
}
inline ::unrealpb::FRootMotionSourceGroup* FClientAdjustment::release_rootmotionsourcecorrection() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::unrealpb::FRootMotionSourceGroup* temp = _impl_.rootmotionsourcecorrection_;
  _impl_.rootmotionsourcecorrection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FRootMotionSourceGroup* FClientAdjustment::unsafe_arena_release_rootmotionsourcecorrection() {
  // @@protoc_insertion_point(field_release:unrealpb.FClientAdjustment.rootMotionSourceCorrection)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::unrealpb::FRootMotionSourceGroup* temp = _impl_.rootmotionsourcecorrection_;
  _impl_.rootmotionsourcecorrection_ = nullptr;
  return temp;
}
inline ::unrealpb::FRootMotionSourceGroup* FClientAdjustment::_internal_mutable_rootmotionsourcecorrection() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.rootmotionsourcecorrection_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FRootMotionSourceGroup>(GetArenaForAllocation());
    _impl_.rootmotionsourcecorrection_ = p;
  }
  return _impl_.rootmotionsourcecorrection_;
}
inline ::unrealpb::FRootMotionSourceGroup* FClientAdjustment::mutable_rootmotionsourcecorrection() {
  ::unrealpb::FRootMotionSourceGroup* _msg = _internal_mutable_rootmotionsourcecorrection();
  // @@protoc_insertion_point(field_mutable:unrealpb.FClientAdjustment.rootMotionSourceCorrection)
  return _msg;
}
inline void FClientAdjustment::set_allocated_rootmotionsourcecorrection(::unrealpb::FRootMotionSourceGroup* rootmotionsourcecorrection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rootmotionsourcecorrection_;
  }
  if (rootmotionsourcecorrection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rootmotionsourcecorrection);
    if (message_arena != submessage_arena) {
      rootmotionsourcecorrection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rootmotionsourcecorrection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.rootmotionsourcecorrection_ = rootmotionsourcecorrection;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FClientAdjustment.rootMotionSourceCorrection)
}

// optional .unrealpb.FVector rootMotionRotation = 10;
inline bool FClientAdjustment::_internal_has_rootmotionrotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rootmotionrotation_ != nullptr);
  return value;
}
inline bool FClientAdjustment::has_rootmotionrotation() const {
  return _internal_has_rootmotionrotation();
}
inline void FClientAdjustment::clear_rootmotionrotation() {
  if (_impl_.rootmotionrotation_ != nullptr) _impl_.rootmotionrotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::unrealpb::FVector& FClientAdjustment::_internal_rootmotionrotation() const {
  const ::unrealpb::FVector* p = _impl_.rootmotionrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& FClientAdjustment::rootmotionrotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.rootMotionRotation)
  return _internal_rootmotionrotation();
}
inline void FClientAdjustment::unsafe_arena_set_allocated_rootmotionrotation(
    ::unrealpb::FVector* rootmotionrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootmotionrotation_);
  }
  _impl_.rootmotionrotation_ = rootmotionrotation;
  if (rootmotionrotation) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.FClientAdjustment.rootMotionRotation)
}
inline ::unrealpb::FVector* FClientAdjustment::release_rootmotionrotation() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::unrealpb::FVector* temp = _impl_.rootmotionrotation_;
  _impl_.rootmotionrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* FClientAdjustment::unsafe_arena_release_rootmotionrotation() {
  // @@protoc_insertion_point(field_release:unrealpb.FClientAdjustment.rootMotionRotation)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::unrealpb::FVector* temp = _impl_.rootmotionrotation_;
  _impl_.rootmotionrotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* FClientAdjustment::_internal_mutable_rootmotionrotation() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.rootmotionrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.rootmotionrotation_ = p;
  }
  return _impl_.rootmotionrotation_;
}
inline ::unrealpb::FVector* FClientAdjustment::mutable_rootmotionrotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_rootmotionrotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.FClientAdjustment.rootMotionRotation)
  return _msg;
}
inline void FClientAdjustment::set_allocated_rootmotionrotation(::unrealpb::FVector* rootmotionrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rootmotionrotation_;
  }
  if (rootmotionrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rootmotionrotation);
    if (message_arena != submessage_arena) {
      rootmotionrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rootmotionrotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.rootmotionrotation_ = rootmotionrotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.FClientAdjustment.rootMotionRotation)
}

// optional uint32 movementMode = 11;
inline bool FClientAdjustment::_internal_has_movementmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FClientAdjustment::has_movementmode() const {
  return _internal_has_movementmode();
}
inline void FClientAdjustment::clear_movementmode() {
  _impl_.movementmode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t FClientAdjustment::_internal_movementmode() const {
  return _impl_.movementmode_;
}
inline uint32_t FClientAdjustment::movementmode() const {
  // @@protoc_insertion_point(field_get:unrealpb.FClientAdjustment.movementMode)
  return _internal_movementmode();
}
inline void FClientAdjustment::_internal_set_movementmode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.movementmode_ = value;
}
inline void FClientAdjustment::set_movementmode(uint32_t value) {
  _internal_set_movementmode(value);
  // @@protoc_insertion_point(field_set:unrealpb.FClientAdjustment.movementMode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace unrealpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::unrealpb::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::unrealpb::MessageType>() {
  return ::unrealpb::MessageType_descriptor();
}
template <> struct is_proto_enum< ::unrealpb::UnrealObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::unrealpb::UnrealObjectType>() {
  return ::unrealpb::UnrealObjectType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto
